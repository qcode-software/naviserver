[include version_include.man]
[manpage_begin ns_register n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Register Tcl/ADP handlers}]

[description]
This document describes various command to bind Tcl code and/or
ADP-pages to URL patterns.

[section COMMANDS]

[list_begin definitions]

[call [cmd ns_register_adp] \
     [opt [option -noinherit]] \
     [opt [option "-expires [arg t]"]] \
     [opt [option "-options [arg options]"]] \
     [opt --] \
     [arg method] \
     [arg URL] \
     [opt [arg file]] ]

Requests to the server which match the [arg method] and [arg URL]
will trigger the [term ADP] page request handler. If [arg file] is
given then it is the specific [term ADP] page which should respond to all
matching requests. Otherwise, the [term ADP] page will be located at request
time using [cmd ns_url2file].

[para]
This commands works similar as [cmd ns_register_tcl], but registers an
ADP file instead of a Tcl script.

[para]
Use [cmd ns_unregister_op] to unregister an ADP request.

[call [cmd ns_register_fastpath] \
	[opt [option -noinherit]] \
	[opt --] \
	[arg method] \
	[arg URL]]

This command register given [arg URL] to be processed by fast path subsystem, i.e.
all requestes that match will be served by corresponding .adp files if resolved. This
can be used when there is no global fast path handler installed.

[para]
The argument [arg method] is restricted to GET, POST or HEAD

[call [cmd ns_register_filter] [arg when] [arg method] [arg URL] [arg script] [opt [arg args]]]

[term ns_register_filter] registers a Tcl filter script for the specified method/URL combination
on a virtual server. The script can be called at one or more of three given times:
pre-authorization, post-authorization before page data has been returned to the user,
and after the connection has been processed and closed.

[para]
This function will be called at the specified stage of a connection, if the method/URL
combination for the filter matches the method/URL combination for the connection using glob style matching.

[para]
The URL can contain standard string-matching characters. For example, these are valid URLs:

[example_begin]
   /employees/*.tcl
   /accounts/*/out
[example_end]

[para]
Valid values for the when argument are: preauth, postauth, and trace.

[para]
Using pre-authorization, the procedure will be called (assuming that the method/URL
combination matches) just before authorization. If the procedure returns with a code of:

[list_begin itemized]

[item] TCL_OK (using: return "filter_ok"): The server will continue to the next pre-authorization
         filter for this connection, or, if there are no more pre-authorization filters, it will
          continue on with authorization.

[item] TCL_BREAK (using: return "filter_break"): The server will not process any more pre-authorization
         filters for this connection, and it will continue on with authorization.

[item] TCL_RETURN (using: return "filter_return"): The server will close the connection and will
         not run any more pre-authorization filters. It will not authorize the request, and it will
         not run the function registered for this METHOD/URL. It WILL run any trace functions
         registered for this METHOD/URL, usually including logging. It is assumed that the filter
         has sent a proper response (e.g., using [cmd ns_return]) to the client before returning TCL_RETURN.
[list_end]

Using post-authorization, the procedure will be called (assuming that the method/URL combination matches)
just after successful authorization. If the procedure returns:

[list_begin itemized]

[item] TCL_OK (using: return "filter_ok"): The server will continue to the next post-authorization
         filter for this connection, or, if there are no more post-authorization filters, it will run
         the function registered to handle this request.

[item] TCL_BREAK (using: return "filter_break"): The server will not process any more post-authorization
         filters for this connection, and it will run the function registered to handle this request.

[item] TCL_RETURN (using: return "filter_return"): The server will close the connection and will
         not run any more post-authorization filters and it will not run the function registered for
         this METHOD/URL. It WILL run any trace functions registered for this METHOD/URL, usually
         including logging. It is assumed that the filter has returned a proper response (e.g.,
          using [cmd ns_return]) to the client before returning TCL_RETURN.

[list_end]

Using trace, the procedure will be called (assuming that the method/URL combination match) after
the connection has been totally processed and closed. If the procedure returns:

[list_begin itemized]

[item] TCL_OK (using: return "filter_ok"): The server will continue to the next trace filter.

[item] TCL_BREAK, TCL_RETURN (using: return "filter_break" or return "filter_return"): The rest
         of the trace filters are ignored.

[list_end]

[term ns_register_filter] and [term ns_register_proc] are similar, but significantly different.
With [term ns_register_proc], the specified URL is used to match that URL and any URL below
it in the hierarchy. Wildcards such as "*" are meaningful only for the final part of
the URL, such as /scripts/*.tcl. With [term ns_register_filter], the URL is used to
match URLs as a string with standard string-matching characters. [term ns_register_proc]
results in a single match, whereas multiple [term ns_register_filters] can be matched and
will be called.

[para]
Be aware that executing the same [term ns_register_filter] statement more than once (as
you might do when re-initializing Tcl) will add the filter more than once! You
may want to have a shared variable set so that you don't do this.

[para]
This example shows how to expire all HTML files after an hour:

[example_begin]
    if {![lb]nsv_exists filters installed[rb]} {
      nsv_set filters installed 1
      ns_register_filter postauth GET /*.html ExpireSoon 3600
    }
    
    proc ExpireSoon {seconds why} {
      ns_set update [lb]ns_conn outputheaders[rb] Expires [lb]ns_httptime [lb]expr {$seconds + [lb]ns_time[rb]}[rb][rb]
    }
    
[example_end]

The command [cmd ns_info] [arg requestprocs] can be used to list the
currently registerd procs.


[call [cmd ns_register_proc] \
	[opt [option -noinherit]] \
	[opt [arg --]] \
	[arg method] \
	[arg URL] \
	[arg myproc] \
	[opt [arg args]]]

[term ns_register_proc] registers the procname to handle the specified method/URL combination.
When the server gets a matching request, it calls procname with the connection id and
any arguments specified here.

[para]
If [arg -noinherit] is specified, the requested URL must match the specified URL exactly.
For example, if the URL specified with [term ns_register_proc] is /foo/bar, procname will
not be called unless the requested URL is exactly /foo/bar.

[para]
If -noinherit is not specified, the requested URL can match the specified URL or any
URL below it.  For example, if the URL specified with [term ns_register_proc] is /foo/bar,
procname will be called for /foo/bar, /foo/bar/hmm, and any other URL below /foo/bar,
provided there is not already another procedure registered for that exact URL or for
an URL with a closer match.

Note that you must use a glob-style matching character if you want inheritance
for file names.  For example, if you want /foo/bar to match /foo/bar.html, you must use:

[example_begin]
   ns_register_proc /foo/bar*
[example_end]

 You can register two procedures for any given method/URL combination by calling [term ns_register_proc] once with the -noinherit flag set and once without it.  Only one of the procedures will be called for any given request, depending on whether the URL was an exact match or not.  For example:

[example_begin]
   ns_register_proc -noinherit GET /foo/bar Aproc
   ns_register_proc GET /foo/bar Bproc
   ns_register_proc GET /foo/bar/hmm Cproc
[example_end]

 Aproc will be called when the requested URL is exactly /foo/bar.  Bproc will be called when
 the requested URL is below /foo/bar, provided there is not already another procedure registered
 to be called for that exact URL or for an URL with a closer match.  Cproc (not Bproc) will be
 called when the requested URL is equal to or below /foo/bar/hmm.  Syntax for the registered
 procedure The conn (connection) argument is optional for procedures registered by [term ns_register_proc]
 if the procedure has 0 or 1 arguments
 (not including conn).  The following examples show the variations that can be used in this case:

[example_begin]
   ns_register_proc GET /noargs noargs
   ns_register_proc GET /context context fnord
   ns_register_proc GET /conncontext conncontext greeblev
   
   proc noargs { } {
       ns_returnnotice 200 "noargs"
   };# noargs
   
   proc context { context } {
       ns_returnnotice 200 "context is $context"
   };# context
   
   proc conncontext { conn context } {
       ns_returnnotice 200 "conncontext is $context"
   };# conncontext
[example_end]

The conn (connection) argument is required for procedures registered by [term ns_register_proc] if the
procedure has 2 or more arguments (not including conn).  The conn argument will be filled
automatically with the connection information.  The first argument following conn will always
take the value supplied by [term ns_register_proc], if there is one, or an empty value.  All other
arguments must supply a default value.  The following examples show the variations that can
be used in this case:

[example_begin]
   ns_register_proc GET /twoargs twoargs fnord
   ns_register_proc GET /threeargs threeargs fnord fjord
   
   proc twoargs { conn context { greeble bork } } {
       # Do stuff...
   }
   
   proc threeargs { conn context {greeble bork } { hoover quark } {
       # Do stuff...
   }
[example_end]

When a GET of /twoargs is requested, the conn argument will be filled automatically,
the context argument will be assigned "fnord" and the greeble argument will be assigned
the default value "bork".

When a GET of /threeargs is requested, the conn argument will be filled automatically,
the context argument will be assigned "fnord" and the greeble argument will be assigned "fjord",
and the hoover argument will be assigned the default value "quark".

[call [cmd ns_register_proxy] [arg method] [arg protocol] [arg script] [opt [arg args]]]

[term ns_register_proxy] registers a Tcl script as a handler for the specified method/protocol
combination.

[para]
Example of HTTP proxy server:

[example_begin]
   ns_register_proxy GET http http_proxy_handler
   
   proc http_proxy_handler { args } {

       set port [lb]ns_conn port[rb]
       if {$port == 0} {
           set port 80
       }
       set url http://[lb]ns_conn host[rb]:$port[lb]ns_conn url[rb]?[lb]ns_conn query[rb]
       ns_return 200 text/html [lb]ns_httpget $url[rb]]
   }
   
[example_end]

[call [cmd ns_register_tcl] \
	[opt [option -noinherit]] \
	[opt [option {-cache cache}]] \
	[opt --] \
	[arg method] \
	[arg URL] \
	[opt [arg file]]]

Register Tcl file to be called when request matches method/URL
combination. This is to enable extention-less URLs or for mapping
actual files into virtual URLs. The command [cmd ns_register_tcl]
works similar as [cmd ns_register_adp] except the file to evaluate
should be a Tcl file which might use [cmd ns_return], [cmd ns_write]
etc. to respond to the request.

[para]
If this argument [arg file] is omitted, the command  will register standard C-based
callback which will resolve URLs into absolute Tcl file and execute it.

[para]
Use [cmd ns_unregister_op] to unregister a Tcl request handler.


[call [cmd ns_register_trace] \
	[arg method] \
	[arg URL] \
	[arg script] \
	[opt [arg args]]]

[term ns_register_trace] registers a Tcl script as a trace for the specified method/URL
combination. After the server handles the request for the specified method on an
URL that matches the URL, it calls the trace script with the connection id
and any arguments (args) specified.

[para]

The URL can contain standard string-matching characters. For example, these are valid URLs:

[example_begin]
   /employees/*.tcl
   /accounts/*/out
[example_end]

[para]
[term ns_register_trace] is similar to [term ns_register_proc] except that the
pattern-matching for the URL is performed differently. With [term ns_register_proc],
the specified URL is used to match that URL and any URL below it in the hierarchy.
Wildcards such as "*" are meaningful only for the final part of the URL, such as
/scripts/*.tcl. With [term ns_register_trace], the URL is used to match URLs as
a string with standard string-matching characters.

[para]
[term ns_register_proc] results in a single match, whereas multiple [term ns_register_trace]'s
can be matched and will be called.


[call [cmd ns_register_url2file] \
	[opt [option -noinherit]] \
	[opt --] \
	[arg URL] \
	[arg script] \
	[opt [arg args]]]

[call [cmd ns_register_fasturl2file] \
	[opt [option -noinherit]] \
	[opt --] \
	[arg URL] \
	[opt [arg basepath]]]

These commands are used to perform runtime resolving of the requested
urls into corresponding files that will be served to the client. They
use [cmd ns_url2file] interface which resolves file for current
url. [cmd ns_register_fasturl2file] register the default fast url2file
proc for the given [arg URL]. The Tcl [arg script] 
provided to [cmd ns_register_url2file] 
is used to return full path to the requested URL.


[call [cmd ns_unregister_op] \
     [opt [option -noinherit]] \
     [opt [option -recurse]] \
     [opt --] \
     [arg method] \
     [arg URL]]

Unregister a Tcl or ADP request handler for the speci-
fied method/URL combination.

This command unregisters any Tcl or C functions previously registered 
for this method/URL combination and with the same inheritance
setting.  That is, if the [arg -noinherit] flag is specified with 
[term ns_unregister_op], the function previously registered with the
[arg -noinherit] flag using [term ns_register_proc] (or the NS_OP_NOINHERIT
flag in ns_RegisterRequest) will be unregistered.  If [arg -noinherit]
is omitted, the function previously registered without the 
[arg -noinherit] flag (or the NS_OP_NOINHERIT flag) will be unregistered.

[call [cmd ns_unregister_url2file] \
	[opt [option -noinherit]] \
	[opt [option -recurse]] \
	[opt --] \
	[arg URL]]

The command is the inverse command to  [cmd ns_register_url2file].

[list_end]



[section OPTIONS]
[list_begin options]

[opt_def -cache [arg t]]
Specifies for how long to keep result in the cache, in seconds or absolute time.

[opt_def -expires [arg t]]
Specifies that the result of evaluating the [term ADP] page should be cached
for [arg t] seconds, or until [arg t] time in the future (expressed as
seconds after the [term epoch]) if [arg t] is large.

[opt_def -noinherit]
Specifies that the directory portion of the request URL should match
exactly and not also apply to a URL lower in the hierarchy. This is
the default.

[para]
Different [term ADP] page handlers can be registered for the
same [arg method] and [arg URL] if one uses the [opt -noinherit]
option and the other does not.

[example_begin]
   [cmd ns_register_adp]            GET /a x.adp
   [cmd ns_register_adp] -noinherit GET /b y.adp
[example_end]

In the previous example, a.adp will run for the requests /a, /a/b,
/a/b/c and so on. But b.adp will only run when the requested URL is
exactly /b. The request /b/c will result in a 404 Page Not Found error.

[example_begin]
   [cmd ns_register_adp]            GET /a x.adp
   [cmd ns_register_adp] -noinherit GET /a y.adp
[example_end]

In this example, a request for the exact URL /a will run the y.adp page, while
/a/b and /a/b/c will will run the x.adp page.  The y.adp page is more specific
than the x.adp page, and hides it for the /a request, which matched it exactly.

[opt_def -options [arg options]]
A list of one or more [term ADP] options that should be added to the default
set which are in effect while the [term ADP] page runs. Options can only be
enabled, not disabled. Valid options are those that [cmd ns_adp_ctl]
accepts, which can be used by [term ADP] code to fine tune the options.

[opt_def -recurse]
if specified, the delete operation will be recursive.
[list_end]


[section ARGUMENTS]
[list_begin arguments]

[arg_def string method]
The HTTP [arg method], such as [term HEAD], [term GET] or [term POST],
which will be compared using exact string equality to the HTTP request.

[example_begin]
   foreach method {HEAD GET POST} {
       [cmd ns_register_adp] $method /foo/bar [file hmm.adp]
   }
[example_end]



[arg_def string URL]
The [arg URL] patterm to match against the URL in each HTTP request. The last
component of the URL may contain the globbing characters [term *] and [term ?].

[example_begin]
   [cmd ns_register_adp] GET /dynamic/*.htm?
[example_end]

In this example, a URL where the last component matches the pattern *.htm?,
such as /dynamic/foo.htm or /dynamic/a/b/c/bar.html, will be run by the
ADP engine.

[para]
Only the last component of the URL may be a pattern. If this is too restrictive,
try using [cmd ns_register_filter].



[arg_def string [opt file]]
The optional  argument [arg file] is either an absolute path to a file in the file system,
or a path relative to the page root directory of the virtual server.

[example_begin]
   [cmd ns_register_adp] GET /a [file a.adp]    ; # relative to page root
   [cmd ns_register_adp] GET /b [file b/b.adp]  ; # relative to page root
   [cmd ns_register_adp] GET /c [file /c.adp]   ; # absolute in file-system root
[example_end]

The first and second lines specify a file relative to the page
root directory. The full path is constructed each time the [term ADP] page is
requested using [cmd ns_pagepath], so [cmd ns_serverroot] and
[cmd ns_register_url2file] callbacks will be taken into account.

[para]
In the third example, a specific [term ADP] file in the server's file system
is registered for a simillarly named URL (and all URLs bellow
it). There are no calls to [cmd ns_pagepath] or [cmd ns_url2file]
during the request.


[list_end]

[section EXAMPLES]

In the following example, all files with the .adp extension in and below the
/big URL should be served by the [term ADP] handler, with the options
[term stricterror] and [term stream] enabled:

[example_begin]
   foreach method {GET HEAD POST} {
       [cmd ns_register_adp] -options {stream stricterror} -- $method /big/*.adp
   }
[example_end]



[see_also ns_adp ns_conn ns_info]
[keywords ADP filter request callback fastpath]
[manpage_end]

