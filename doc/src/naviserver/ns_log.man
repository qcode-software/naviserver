[include version_include.man]
[include version_include.man]

[manpage_begin ns_log n [vset version]]
[moddesc   {NaviServer Built-in Commands}]
[titledesc {Global server error log}]

[description]

The running NaviServer process opens a single log file into which all
[emph Notice], [emph Error] etc. messages are logged, whether originating
from the server itself or form Tcl scripts and ADP pages.

[para]
The built-in set of severity levels can be extended. Logging can be
enabled/disabled at run-time per-severity level. Custom filters can be added to
process log messages.




[section COMMANDS]
[list_begin definitions]


[call [cmd ns_log] \
      [arg severity-level] \
      [arg message] \
      [opt [arg "message ..."]] ]

Queue a message for the error log file if the given [arg severity-level] is
enabled. The [arg message] arguments are concatenated with connecting spaces.
The message will reach the log file when the per-thread cache is flushed.

[para]
The following are the predefined values of [arg severity-level].

[list_begin definitions]

[def Notice]
Something interesting occurred.

[def Warning]
Something that could mean something bad occurred.

[def Error]
Something bad occurred.

[def Fatal]
Something extremely bad occurred. The server will shut down after
logging this message.

[def Bug]
Something occurred that implies that there is a bug in the code.

[def Debug]
If debug level logging is enabled the the message is logged.

[def Dev]
If dev level logging is enabled the message is logged.

[list_end]



[call [cmd ns_logctl] \
      [method severity] \
      [arg severity-level] \
      [opt [arg bool]] ]

Return true if the given [arg severity-level] is enabled, false if it is
disabled. If [arg bool] is given it enables/disables the given
[arg severity-level] for all future log messages, server-wide.

[para]
If [arg severity-level] does not already exist and [arg bool] is given, then the
new severity is created, enabled or disabled according to [arg bool]. Future
calls to [cmd ns_log] may use new [arg severity-level].



[call [cmd ns_logctl] \
	  [method severities] ]

Return a list of available severity-levels. This includes the 7 predefined
levels and those created with [cmd ns_logctl] or via C code.



[call [cmd ns_logctl] \
	  [method hold] ]

Buffer log messages originating in the current thread indefinitely. Log messages
are no longer written directly to the server log.



[call [cmd ns_logctl] \
	  [method flush] ]

Write buffered log messages from the current thread to the log file. Do not
disable buffering enabled by [arg hold].



[call [cmd ns_logctl] \
	  [method release] ]

Write buffered log messages from the current thread to the log file and disable
buffering. Future log messages will not be buffered.



[call [cmd ns_logctl] \
	  [method peek] ]

Return a copy of any buffered log messages for the current thread.



[call [cmd ns_logctl] \
	  [method get] ]

Return all buffered log messages, removing them from the buffer without writing them
to the log file.



[call [cmd ns_logctl] \
	  [method count] ]

Returns a count of buffered messages for the current thread.



[call [cmd ns_logctl] \
	  [method truncate] \
	  [arg count] ]

Discard this threads buffered messages, leaving [arg count] untouched.



[call [cmd ns_logctl] \
      [method register] \
      [arg script] \
      [opt [arg "script-args ..."]] ]

Register a log filter [arg script] with the given [arg script-args] where
[arg script] should have the signature:
[emph script] [arg severity] [arg timestamp] [arg message] [opt [arg "script-args ..."]].
A [arg handle] will be returned which can be used to unregister the filter script.



[call [cmd ns_logctl] \
      [method unregister] \
      [arg handle] ]

Unregister the previously registered log filter script identified by
[arg handle].



[call [cmd ns_logroll] ]

Roll the server error log. This works whether the configuration parameter
[emph logroll] is enabled or not. See [cmd ns_rollfile] for details of log
rolling.


[list_end]



[section CONFIGURATION]

The error log is configured globally for the whole server process.

[example_begin]
[cmd ns_section] "ns/parameters"
[cmd ns_param]   ...
[example_end]


The following are valid configuration parameters:

[list_begin definitions]

[def serverlog]
Path to error log file. If the path is not fully qualified it is assumed to be
relative to the server home directory ([lb][cmd ns_info] home[rb]). All the components of
the path must exist. The server will fail to start if the log file cannot be
opened.
Default: logs/nsd.log

[def lognotice]
If true, messages of severity-level [emph Notice] are enabled.
Default: true.

[def logdev]
If true, messages of severity-level [emph Dev] are enabled.
Default: false.

[def logdebug]
If true messages of severity-level [emph Debug] are enabled.
Default: false.

[def logusec]
If true, log entries will have timestamps with microsecond resolution.
Default: false.

[def logexpanded]
If true, an extra newline is added to each log entry.
Default: false.

[def logroll]
If true, the log file will be rolled when the server receives a SIGHUP signal.
Default: true.

[def logmaxbackup]
The number of old error log files to keep around if log rolling is enabled.
Default: 10.


[list_end]




[section EXAMPLES]

Equivalent log messages.

[example_begin]
% [cmd ns_log] notice "Hello World!"
[lb]21/May/1974:15:30:00[rb][lb]12257.40348b90[rb][lb]-command-[rb] Notice: Hello World!

% [cmd ns_log] notice Hello World!
[lb]21/May/1974:15:30:01[rb][lb]12257.40348b90[rb][lb]-command-[rb] Notice: Hello World!
[example_end]


Enable debug logging while the server is running.

[example_begin]
nscp:1> [cmd ns_log] debug testing...

nscp:2> [cmd ns_logctl] severity debug
0
nscp:3> [cmd ns_logctl] severity debug true
1
nscp:4> [cmd ns_log] debug testing...
[lb]01/April/1984:11:11:59[rb][lb]12257.40348b90[rb][lb]-nscp:1-[rb] testing...
[example_end]



Report log messages at the end of an ADP page, as well as log them to the error
log file.

[example_begin]
<h1>An ADP Page</h1>

<%
  [cmd ns_logctl] hold
  # ... do some stuff here ...
%>

...

<%
  if {[lb][cmd ns_logctl] count[rb] > 0} {
      [cmd ns_adp_append] "Log messages:"
      [cmd ns_adp_append] "<pre>[lb][cmd ns_logctl] peek[rb]</pre>"
  }
  [cmd ns_logctl] release
%>
[example_end]



Create a new severity-level.

[example_begin]
nscp:1> [cmd ns_logctl] severities
Notice Warning Error Fatal Bug Debug Dev

nscp:2> [cmd ns_log] my:debug "a debug message"
unknown severity: "my:debug": should be one of: Notice Warning Error Fatal Bug Debug Dev

nscp:3> [cmd ns_logctl] severity my:debug off
0

nscp:4> [cmd ns_log] my:debug "a debug message"

nscp:5> [cmd ns_logctl] severity my:debug on
0

nscp:6> [cmd ns_log] my:debug "a debug message"
[lb]22/Nov/1963:13:25:00[rb][lb]1899.40349b90[rb][lb]-nscp:1-[rb] my:debug: a debug message
[example_end]



[see_also ns_accesslog ns_info ns_rollfile]
[keywords log path error configuration]


[manpage_end]
