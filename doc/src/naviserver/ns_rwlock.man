[include version_include.man]
[manpage_begin ns_rwlock n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Create, destroy, and manipulate read/write locks}]

[description]
ns_rwlock create initializes a read/write lock and returns an ID for it.

[para]
ns_rwlock destroy frees the resources associated with the specified read/write
lock. The rwlockid argument is the read/write lock ID returned by ns_rwlock
create when the lock was created.

[para]
ns_rwlock readlock acquires a read lock. Any number of read locks can be pending.
If there's a write lock active, the read lock acquisition blocks until the write lock is released.

[para]
ns_rwlock readunlock releases a read lock.

[para]
ns_rwlock writelock acquires a write lock. Only one write lock can be in effect.
If there are pending read locks active, the write lock acquisition blocks until
all of the read locks drain. If a subsequent read lock acquisition attempt is made,
the write lock has priority.

[para]
ns_rwlock writeunlock releases a write lock

[section {COMMANDS}]

[list_begin definitions]

[call [cmd ns_rwlock] [arg create]]

[call [cmd ns_rwlock] [arg destroy] [arg rwlockid]]

[call [cmd ns_rwlock] [arg readlock] [arg rwlockid]]

[call [cmd ns_rwlock] [arg readunlock] [arg rwlockid]]

[call [cmd ns_rwlock] [arg writelock] [arg rwlockid]]

[call [cmd ns_rwlock] [arg writeunlock] [arg rwlockid]] 

[list_end]

[section EXAMPLES]

[example_begin]
Put some examples here to illustrate command usage.
[example_end]

[section NOTES]
About Read/Write Locks

[para]
Read/write locks are a serialization mechanism for using data structures
where multiple reads can happen simultaneously, but where writes must
happen singly. For example, suppose you have a hash table that is
heavily used but doesn't change very often. You'd like to have multiple
threads be able to read from the table without blocking on each other,
but when you need to update the table, you can do so safely without
having to worry about other threads reading incorrect data.

[para]
The principal feature of read/write locks is the mechanism of which locks
have priority and which locks must wait. Any number of read locks can be
pending. If there's a write lock active, the read lock acquisition blocks
until the write lock is released. Also, only one write lock can be in effect.
If there are pending read locks active, the write lock acquisition blocks until
all of the read locks drain. If a subsequent read lock acquisition attempt is
made while a write lock is waiting to acquire, the write lock has priority.

[see_also nsd]
[keywords NaviServer]
[manpage_end]


