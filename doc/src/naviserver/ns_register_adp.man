[include version_include.man]
[include version_include.man]

[manpage_begin ns_register_adp n [vset version]]
[moddesc   {NaviServer Built-In Commands}]
[titledesc {Respond to URLs with ADP or Tcl pages}]

[description]

[term ADP] pages are [term HTML] or other text for output into which you can
embed [term Tcl] code. The code is evaluated when the page is served.
The output of the code and text is combined and returned to the client.

[para]
The server will translate the result into the correct character encoding for the
client and compress if enabled (see [cmd ns_conn]). The result can be
cached to speed up future requests.

[para]
There are several ways of embedding [term Tcl] code within [term ADP] pages...

[example_begin]
<h1>Hello World</h1>
Time: [emph <%=] ns_httptime [emph %>]
[example_end]


[section COMMANDS]
[list_begin definitions]


[call [cmd ns_register_adp] \
     [opt [option -noinherit]] \
     [opt [option "-expires [arg t]"]] \
     [opt [option "-options [arg options]"]] \
     [opt --] \
     [arg method] \
     [arg url] \
     [opt [arg file]] ]

Requests to the server which match the [arg method] and [arg url]
pattern will trigger the [term ADP] page request handler. If [arg file] is
given then it is the specific [term ADP] page which should respond to all
matching requests. Otherwise, the [term ADP] page will be located at request
time using [cmd ns_url2file].

[para]
Use [cmd ns_unregister_op] to unregister an ADP request.



[call [cmd ns_register_tcl] \
     [opt [option -noinherit]] \
     [opt --] \
     [arg method] \
     [arg url] \
     [opt [arg file]] ]

Works the same as [cmd ns_register_adp] except the file to evaluate
should be a Tcl file which uses [cmd ns_return], [cmd ns_write]
etc. to respond to the request.

[para]
Use [cmd ns_unregister_op] to unregister a Tcl request handler.



[list_end]




[section ARGUMENTS]
[list_begin arguments]

[arg_def string method]
The HTTP [arg method], such as [term HEAD], [term GET] or [term POST],
which will be compared using exact string equality to the HTTP request.

[example_begin]
foreach method {HEAD GET POST} {
    [cmd ns_register_adp] $method /foo/bar [file hmm.adp]
}
[example_end]



[arg_def string url]
The [arg url] patterm to match against the URL in each HTTP request. The last
component of the URL may contain the globbing characters [term *] and [term ?].

[example_begin]
[cmd ns_register_adp] GET /dynamic/*.htm?
[example_end]

In this example, a URL where the last component matches the pattern *.htm?,
such as /dynamic/foo.htm or /dynamic/a/b/c/bar.html, will be run by the
ADP engine.

[para]
Only the last component of the URL may be a pattern. If this is too restrictive,
try using [cmd ns_register_filter].



[arg_def string [opt file]]
The optional [arg file] is either an absolute path to a file in the file system,
or a path relative to the page root directory of the virtual server.

[example_begin]
[cmd ns_register_adp] GET /a [file a.adp]    ; # relative to page root
[cmd ns_register_adp] GET /b [file b/b.adp]  ; # relative to page root
[cmd ns_register_adp] GET /c [file /c.adp]   ; # absolute in file-system root
[example_end]

The first and second lines specify a file relative to the page
root directory. The full path is constructed each time the [term ADP] page is
requested using [cmd ns_pagepath], so [cmd ns_serverroot] and
[cmd ns_register_url2file] callbacks will be taken into account.

[para]
In the third example, a specific [term ADP] file in the server's file system
is registered for a simillarly named URL (and all URLs bellow
it). There are no calls to [cmd ns_pagepath] or [cmd ns_url2file]
during the request.


[list_end]





[section OPTIONS]
[list_begin options]

[opt_def -noinherit]
Specifies that the directory portion of the request URL should match
exactly and not also apply to a URL lower in the hierarchy. This is
the default.

[para]
Different [term ADP] page handlers can be registered for the
same [arg method] and [arg url] if one uses the [opt -noinherit]
option and the other does not.

[example_begin]
[cmd ns_register_adp]            GET /a x.adp
[cmd ns_register_adp] -noinherit GET /b y.adp
[example_end]

In the previous example, a.adp will run for the requests /a, /a/b,
/a/b/c and so on. But b.adp will only run when the requested URL is
exactly /b. The request /b/c will result in a 404 Page Not Found error.

[example_begin]
[cmd ns_register_adp]            GET /a x.adp
[cmd ns_register_adp] -noinherit GET /a y.adp
[example_end]

In this example, a request for the exact URL /a will run the y.adp page, while
/a/b and /a/b/c will will run the x.adp page.  The y.adp page is more specific
than the x.adp page, and hides it for the /a request, which matched it exactly.



[opt_def -expires [arg t]]
Specifies that the result of evaluating the [term ADP] page should be cached
for [arg t] seconds, or until [arg t] time in the future (expressed as
seconds after the [term epoch]) if [arg t] is large.



[opt_def -options [arg options]]
A list of one or more [term ADP] options that should be added to the default
set which are in effect while the [term ADP] page runs. Options can only be
enabled, not dissabled. Valid options are those that [cmd ns_adp_ctl]
accepts, which can be used by [term ADP] code to fine tune the options.



[list_end]




[section CONFIGURATION]

ADP pages can be enabled per-virtual-server in the configuration file.

[example_begin]
[cmd ns_section] "ns/server/server1/adp"
[cmd ns_param]   map     /*.adp
...
[example_end]


A [term map] entry is used to register the ADP page handler for each of the GET,
HEAD and POST methods on the given URL. There may be zero or more map entries.



[para]
The following parameters provide a hook for running common code for each ADP
either at the beginning of processing or for handling errors.

[list_begin definitions]

[def startpage]
The path of an ADP page which is run before the requested ADP page.
Default: none.

[def errorpage]
The path of an ADP page which is run when an code within an ADP raises an error
which is not caught. Default: none.

[list_end]



[para]
The following parameters control memory usage.

[list_begin definitions]

[def cachesize]
The size in bytes of the per-virtual-server page cache. This is the cache of ADP
pages as read from disk and converted to an efficient form for evaluation. In
addition, a separate cache of script blocks is kept per-thread, which is not
controlled by this parameter. Default: 5MB.

[def bufsize]
The size in bytes of the ADP output buffer. The buffer is flushed to the client
when full, or each time a new chunk is appended when streaming is enabled.
Default: 1MB.

[def tracesize]
The number of bytes of each text and script block which will be dumped to the
error log when the [term trace] option is enabled. Default: 40.

[list_end]



[para]
The following parameters set the default options for the ADP engine. They can be
customised per-URL using the [option -options] flag of the [cmd ns_register_adp]
command, or at run-time for each page using the [cmd ns_adp_ctl] command.

[para]
See [cmd ns_adp_ctl] for details on each option.


[list_begin definitions]

[def cache]
Default: off.

[def stream]
Default: off.

[def enablexpire]
Default: off.

[def enabledebug]
Default: off.

[def safeeval]
Default: off.

[def singlescript]
Default: off.

[def trace]
Log each text and script block of each ADP page as it is executed. The first n
bytes will be logged, as determined by the [term tracesize] parameter.
Default: off.

[def detailerror]
Default: on.

[def stricterror]
Default: off.

[def displayerror]
Default: off.

[def trimspace]
Default: off.

[def autoabort]
Default: enabled.

[list_end]



[para]
The following parameter...

[list_begin definitions]

[def debuginit]
The command which is called when ADP page debugging is initiated. The parameter
[term enabledebug] must be on for this to take effect.
Default: [cmd ns_adp_debuginit].

[list_end]





[section EXAMPLES]

In the following example, all files with the .adp extension in and below the
/big URL should be served by the [term ADP] handler, with the options
[term stricterror] and [term stream] enabled:

[example_begin]
foreach method {GET HEAD POST} {
    [cmd ns_register_adp] -options {stream stricterror} -- $method /big/*.adp
}
[example_end]



[see_also ns_register_fastpath ns_register_proc ns_unregister_op \
          ns_register_filter ns_register_url2file ns_conn ns_info]
[keywords ADP request]

[manpage_end]
