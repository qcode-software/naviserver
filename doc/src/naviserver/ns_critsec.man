[include version_include.man]
[manpage_begin ns_critsec n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Operate on critical section objects}]

[description]

This command provides a mechanism to manipulate critical section objects.

[section {COMMANDS}]

[list_begin definitions]

[call [cmd ns_critsec] [arg option] [opt [arg {arg arg ...}]]]


[list_end]

[list_begin definitions]

[call [cmd  ns_critsec] [arg create]]

Initializes a new critical section object and returns a handle to it.

[call [cmd  ns_critsec] [arg destroy] [arg object]]

Destroys the critical section object and frees any resources it was using.

[call [cmd  ns_critsec] [arg enter] [arg object]]

Enters the critical section.  The thread will block if another thread is already in the critical section.

[call [cmd  ns_critsec] [arg leaves] [arg object]]

Leaves the critical section.  When the thread leaves the critical section as many times as
it has entered, a notification will be sent to other threads that are waiting on the critical section.

[list_end]

[section EXAMPLES]

Is this the right way to use this command? The example is contrived, but I wanted to call ns_critsec multiple times.

[example_begin]
   # If a thread is executing any of these procs, no other
   # thread can execute any of these procs until the first
   # thread has completely finished.

   nsv_set . special_file_critsec [lb]ns_critsec create[rb]

   proc write_special_file {data} {
       set critsec [lb]nsv_get . special_file_critsec[rb]
       ns_critsec enter $critsec
       set handle [lb]open special_file w[rb]
       puts $handle $data
       close $handle
       ns_critsec leave $critsec
   }

   proc read_special_file {} {
       set critsec [lb]nsv_get . special_file_critsec[rb]
       ns_critsec enter $critsec
       set handle [lb]open special_file r[rb]
       set result [lb]read $handle[rb]
       close $handle
       ns_critsec leave $critsec
       return $result
   }

   proc change_special_file {data} {
       set critsec [lb]nsv_get . special_file_critsec[rb]
       ns_critsec enter $critsec
       set result [lb]read_special_file[rb]
       write_special_file $data
       ns_critsec leave $critsec
       return $result
   }
[example_end]

[see_also ns_cond ns_event ns_mutex ns_thread]


[manpage_end]

