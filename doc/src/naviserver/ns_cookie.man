[include version_include.man]
[include version_include.man]

[manpage_begin ns_cookie n [vset version]]
[moddesc   {NaviServer Built-In Commands}]
[titledesc {HTTP cookies}]

[description]

Cookies are small pieces of data which the server sends to the [term "user agent"]
and the user agent sends back during subsequent requests. You can use this
mechanism to save state between otherwise statelss HTTP requests.

[para]
Cookie size limits are user agent dependent. Practically, as cookies are sent
with every request to the server (for which the optional [term domain] and
[term path] match), size should be kept to a minimum.

[para]
These commands implement the original version 1 Netscape cookie protocol which
is widely supported by user agents.


[section {COMMANDS}]

[list_begin definitions]

[call [cmd ns_setcookie] \
 [opt [option "-secure [arg bool]"]] \
 [opt [option "-scriptable [arg bool]"]] \
 [opt [option "-domain [arg d]"]] \
 [opt [option "-path [arg p]"]] \
 [opt [option "-expires [arg t]"]] \
 [opt [arg --]] \
 [arg name] \
 [arg data]  ]

Send [arg data] to the user agent as a cookie, using [arg name] as the
identifier. The user agent will send the cookie data back to the server
during subsequent requests for which the [arg domain] and [arg path] match,
if it has not expired.

[para]
A cookie is identified by a signature which is made up of it's name, domain,
path and secure flag. A cookie named [term foo] with path [term /x/y] is a
different cookie than one named [term foo] with path [term /x/y/z]. During a
request for the URL [term /x/y/z] both cookies named [term foo] are sent.

[para]
The [arg data] will be URL-encoded to escape special characters.
[cmd ns_getcookie] correctly reverses the encoding.



[call [cmd ns_getcookie] [arg name] [opt [arg default]] ]

Get the cookie data identified by [arg name]. If no such cookie exists then
[arg default] is returned. If [arg default] is not given and no such cookie
exists, an error is raised.

[para]
Only the first cookie identified by [arg name] is returned. If two cookies
with the same name are sent by the user agent, each with a different [arg domain]
and/or [arg path], which cookie data is returned depends on the user agent.

[para]
When using [arg domain] or [arg path] to restrict cookies, use a unique name for
each restricted cookie.



[call [cmd ns_deletecookie] \
     [opt [option "-secure [arg bool]"]] \
     [opt [option "-domain [arg d]"]] \
     [opt [option "-path [arg p]"]] \
     [opt [arg --]] \
     [arg name]  ]

Instruct the client to delete the cookie data identified by [arg name]. The
complete cookie signature including [arg domain] and [arg path] must match
for the cookie to be deleted.


[list_end]


[section {OPTIONS}]

[list_begin options]

[opt_def -secure [arg boolean]]
If the secure option is true then the the cookie will only be sent back to the
server when the client uses a secure ([term TLS]/[term SSL]) connection.

[opt_def -scriptable [arg boolean]]
If the scriptable option is false or not given the cookie is unavailable to
javascript on the client. This can prevent cross site scripting attacks (XSS) on
clients which support the [term HttpOnly] option. Set [arg -scriptable] to true
if you need to access the cookie via javascript.

[opt_def -domain [arg domain]]
Restrict the cookie to a domain name, such as [term example.com]. The
current domain is implied if none is specified.

[opt_def -path [arg path]]
Restrict the cookie to a URL path such as [term /foo/bar]. If no path is
specified then the cookie will be back sent to the server for all requests.
If a path is specified the cookie will only be sent back for requests which
match the specified path, or a sub-path.

[opt_def -expires [arg time]]
The cookie will expire in [arg time] seconds, after which the client will no
longer send the cookie back to the server. If [arg time] is large it is treated
as the absolute time in the future when the cookie should expire. The special
value [emph -1] may be used to indicate that the cookie should never expire.

[para]
The expiry time is valid across browser sessions.  If no expiry is
specified then the cookie will expire when the browser session ends,
which is ususally when the user closes their browser.

[list_end]



[section EXAMPLES]

Track all user agents which ever vist out site:

[example_begin]
proc browser_tracking_filter {} {
    if {![lb][cmd ns_getcookie] first_visit 0[rb]} {
        [cmd ns_setcookie] -expires -1 -- first_visit [lb]clock seconds[rb]
    }
}
ns_register_filter preauth GET /* browser_tracking_filter
[example_end]


[see_also ns_cookiecharset Ns_Cookie(3)]
[keywords cookie session]

[manpage_end]
