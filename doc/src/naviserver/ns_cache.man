[include version_include.man]
[include version_include.man]

[manpage_begin ns_cache n [vset version]]
[moddesc   {NaviServer Built-In Commands}]
[titledesc {Cache manipulation}]

[description]
The cache commands store key-value data in memory for quick access, like
[cmd nsv]. Unlike [cmd nsv], a limit is placed on the amount of memory used for
each cache, and additional limits can be placed on the expirey time of cache
entries, timeouts waiting for updates, etc.

[para]
The cache commands try to be efficient. For example, if two threads are
simultaneously accessing the same entry in a cache, and the cache entry does not
exist or has expired, then the first thread will evaluate it's script to
generate the new value.  The second thread will recognise this and wait for the
first thread to finish, and then return the value computed by the first thread.

[para]
A cache will tend to grow to it's maximum specified size.  Unused entries will
move towards the end of the Least Recently Used list and be deleted to make room
for new entries. Similarly, expired entries will remain in the cache and only be
deleted when they reach the end of the LRU list, or are accessed and it is
noticed that they have expired.


[section {COMMANDS}]

[list_begin definitions]

[call [cmd ns_cache_create] \
     [opt [option "-timeout [arg t]"]] \
     [opt [option "-expires [arg t]"]] \
     [opt [option "-maxentry [arg s]"]] \
     [opt [arg --]] \
     [arg name] \
     [arg size]  ]

Create a new Tcl cache identified by [arg name] with maximum size [arg size].



[call [cmd ns_cache_names] ]

Return the list of all caches for the current virtual server.


[call [cmd ns_cache_keys] \
        [opt [option "-exact"]] \
        [opt [arg --]] \
        [arg name] \
        [opt [arg pattern]] ]

Return a list of all keys in the named cache. If [arg pattern] is
given then each key is matched against the globbing pattern, and only
those which match are included in the list. When the option 
[opt [option "-exact"]] is used, [arg pattern] is interpreted
literally,  either a key with a literally exact match or empty is returned.



[call [cmd ns_cache_eval] \
     [opt [option "-timeout [arg t]"]] \
     [opt [option "-expires [arg t]"]] \
     [opt [option "-force [arg bool]"]] \
     [opt [arg --]] \
     [arg name] \
     [arg key] \
     [arg script] \
     [opt [arg args]] ]

Return the data identified by [arg key] from the named cache. If the key does
not exist then [arg script] is executed, its value is returned and inserted
into the cache.

[para]
The [arg script] is also executed if a cached value exists but has expired.

[para]
If the [opt [option -force]] option is set then any existing cached value is removed
whether it has expired or not, and the [arg script] is run to regenerate it.



[call [cmd ns_cache_incr] \
     [opt [option "-timeout [arg t]"]] \
     [opt [option "-expires [arg t]"]] \
     [opt [arg --]] \
     [arg name] \
     [arg key] \
     [opt [arg incr]] ]

Increment the integer value in the cache by 1, or by [arg incr] if specified,
and return it.



[call [cmd ns_cache_append] \
     [opt [option "-timeout [arg t]"]] \
     [opt [option "-expires [arg t]"]] \
     [opt [arg --]] \
     [arg name] \
     [arg key] \
     [arg args] ]

Append the given [arg args] to the value in the cache and return the new
value. The [arg args] and the cache value are treated as simple strings.

[para]
If the cache value does not already exist it is created.



[call [cmd ns_cache_lappend] \
     [opt [option "-timeout [arg t]"]] \
     [opt [option "-expires [arg t]"]] \
     [opt [arg --]] \
     [arg name] \
     [arg key] \
     [arg args] ]

Append the given [arg args] to the value in the cache and return the new
value. The cache value is as a Tcl list and the [arg args] are appended to
maintain it's well-formed-list format.

[para]
If the cache value does not already exist it is created.



[call [cmd ns_cache_flush] \
        [opt [option "-glob"]] \
        [opt [arg --]] \
        [arg name] \
        [opt [arg args]] ]

Flush the entries in a cache. If 

[para]
The number of entries flushed are returned. If [opt [arg args]] are given then
they are the keys in the cache to be flushed. If the [opt [option -glob]] option
is given then the keys are treated as globbing patterns and only the keys which
match are flushed.



[call [cmd ns_cache_stats] \
        [opt [option "-contents"]] \
        [opt [option "-reset"]] \
        [opt [arg --]] \
        [arg name] ]

Return the accumulated statistics for the given cache [arg name] in array-get
format since the cache was created or was last reset.

[para]
If the [opt [option -reset]] option is given then the statistics will be reset
to zero after the command returns.

[para]
If the [opt [option -contents]] option is given then the first element of the
returned list contains the size and expirey time for each entry in the
cache. The time is in [cmd ns_time] timespec format.

The cache statistics track the following items:

[list_begin definitions]

[def maxsize]
The maximum size in bytes this cache can grow to, as specified by the
[opt [option -size]] option to [cmd ns_cache_create].

[def size]
The current size of the cache, in bytes.

[def entries]
The current number of entries the cache contains.

[def flushed]
Number of entries which were explicitly flushed by the [cmd ns_cache_flush]
command.

[def hits]
Number of times cache was queried and entry was present and valid.

[def missed]
Number of times cache was queried and entry was not present or valid.

[def hitrate]
The successful hit rate expressed as a percentage of total hits. Higher is better.

[def expired]
Number of times an entry was found to be present but expired when requested and
so not returned.

[def pruned]
Number of time an entry reached the end of the LRU list and was removed to make
way for a new entry.

[list_end]


[call [cmd ns_fastpath_cache_stats] \
        [opt [option "-contents"]] \
        [opt [option "-reset"]] \
        [opt [arg --]] \
        [arg name] ]

Return the accumulated statistics for fastpatch cache in array-get
format since the cache was created or was last reset. For deails, see
[cmd ns_cache_stats] above.

[list_end]


[section {OPTIONS}]

[list_begin options]

[opt_def -timeout [arg t]]
The time in seconds to wait for some other thread to compute the cache value.

[opt_def -expires [arg t]]
A time in the future when the cache value expires. The expired value will be
deleted only when retrieved, e.g. via [cmd ns_cache_eval].

[para]
The [opt [option -expires]] time can be expressed either as an absolute time in
the futre (the number of seconds since 190), or as an offset from the current
time. Small values are treated as offsets, large values as absolute time. It is
slightly less efficient to specify an offset as the current time must be looked
up.


[list_end]



[section EXAMPLES]

In the following example our goal is to serve a web page within 5 seconds. The
web page requires two sets of data: the user's name and email address, and a
personalised advert, both of which are stored in a database.

[para]
The data doesn't change often so a cache is used to speed up access. Even so,
the server may become so busy that database queries take longer than our target
response time of 5 seconds so we specify a [opt [option -timeout]] to both calls
to the [cmd ns_cache_eval] command.

[para]
In this case, a time 5 seconds into the future is constructed once and passed to
both cache calls. The second call will use the remainder of the time once the
first completes.


[example_begin]

set timeout [lb]ns_time incr [lb]ns_time get[rb] 5[rb]

if {[lb]catch {
    set user [lb][cmd ns_cache_eval] [option -timeout] $timeout -- users $userid {
        db_query {
            select name, email
            from users
            where userid = :userid
        }
    }[rb]
    set ad [lb][cmd ns_cache_eval] [option -timeout] $timeout [option -expires] 120 -- ads $userid {
        db_query {
            select advert from
            personalised_adverts
            where userid = :userid
        }
    }[rb]
} errmsg[rb]} {
    ns_returnunavailable "Sorry, our web server is too busy."
}

ns_return 200 text/html [lb]example_personalised_page $user $ad[rb]

[example_end]


[see_also ns_memoize nsv ns_time]
[keywords cache fastpath]

[manpage_end]
