[include version_include.man]
[manpage_begin ns_httpopen n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Fetch a web page}]

[description]

This command opens an http connection to a web page used to fetch its contents
via the method, which may be POST, GET, or another valid http method.  If the
act of opening the connections fails, it may throw an error.
The url may be either absolute () or local (/page). If it is local, the host and
port number of the server are added.
The parameter rqset is the handle for an ns_set containing headers to send with
the request. The timeout is the number of seconds to wait for the connection to
open.  Pdata is the  extra data to send with the request (i.e. post data). If
pdata is specified, the caller is responsible for supplying the Content-length
and Content-type headers in rqset The call returns a list with these three elements:
a file descriptor for reading, a file descriptor for writing, and a set ID for a set
describing the connection. 

Note: This command is currently implemented in Tcl, in the source file tcl/http.tcl

[section {COMMANDS}]

[list_begin definitions]

[call [cmd ns_httpopen] [arg method] [arg url] [opt [arg rqset]] [opt [arg timeout]] [opt [arg pdata]]]


[list_end]


[section EXAMPLES]

[example_begin]

    # A proc to post some data to a url and return the result
    proc postit {url data} {
        set rqset [lb]ns_set new rqset[rb]
        ns_set put $rqset "Accept" "*/*"
        ns_set put $rqset "User-Agent" "[lb]ns_info name[rb]-Tcl/[lb]ns_info version[rb]"
        # ns_set put $rqset "Content-type" "text/xml"
        ns_set put $rqset "Content-type" "application/x-www-form-urlencoded"
        ns_set put $rqset "Content-length" [lb]string length $data[rb]
        set timeout 15
        set connInfo [lb]ns_httpopen POST $url $rqset $timeout $data[rb]
        foreach {rfd wfd headers} $connInfo break
        close $wfd
        set length [lb]ns_set iget $headers content-length[rb]
        if {[lb]string match "" $length[rb]} {
            set length -1
        }
        set page ""
        set err [lb]catch {
            # Read the content.
            while {1} {
                set buf [lb]_ns_http_read $timeout $rfd $length[rb]
                append page $buf
                if {[lb]string match "" $buf[rb]} {
                    break
                }
                if {$length > 0} {
                    incr length -[lb]string length $buf[rb]
                    if {$length >= 0} {
                        break
                    }
                }
            }
        } errMsg[rb]
        ns_set free $headers
        close $rfd
        if {$err} {
            return -code error -errorinfo $::errorInfo $errMsg
        }
        return $page
    }
[example_end]


[see_also nsd]
[keywords ns_http ns_httpget ns_httppost]

[manpage_end]

