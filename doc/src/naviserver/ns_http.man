[include version_include.man]
[manpage_begin ns_http n [vset version]]
[moddesc {NaviServer Built-in Commands}]

[titledesc {Simple HTTP client functionality}]

[description]

This command provides a simple HTTP and HTTPS client functionality.

[section {COMMANDS}]

[list_begin definitions]

[call [cmd "ns_http cancel"] \
	[arg id]]

Cancel queued HTTP/HTTPS request by id (ns_set id of request).

[call [cmd "ns_http cleanup"]]

Cancel all pending HTTP/HTTPS requests

[call [cmd "ns_http list"]]

Return the list of currently running or pending requests in format:
id url done|running ....

[call [cmd "ns_http queue"] \
	[opt [option "-method [arg M]"]] \
	[opt [option "-headers [arg S]"]] \
	[opt [option "-body [arg B]"]] \
	[opt [option "-body_file [arg fn]"]] \
	[opt [option "-timeout [arg T]"]] \
	[opt [option "-keep_host_header"]] \
	[opt [option "-cert [arg C]"]] \
	[opt [option "-cafile [arg CA ]"]] \
	[opt [option "-capath [arg CP ]"]] \
	[opt [option "-verify"]] \
	[arg url] \
	]

[option -method]
use the specified HTTP method such as GET or POST or HEAD

[para]
[option -headers]
headers is the ns_set ID containing the additional headers to include in the HTTP request.

[para]
[arg -body]
body is the value which will be sent as the HTTP request body.
This option is mutual exclusive with [arg -body_file].

[para]
[option -body_file]
transmit the file specified via filename as the HTTP request body.
This option is mutual exclusive with [arg -body].

[para]
[option -timeout]
Timeout for how long to wait for finishing the whole request 
(default 2:0, secs:microsesc)

[para]
[option -keep_host_header]
allows the Host: header field for the request to be passed in via the -headers arg. 
Otherwise it is overwritten.

[para]
[option "-cert"]
allows for HTTPS URIs to use the specified client certificate. The
certificates must be in PEM format and must be sorted starting with
the subject's certificate (actual client or server certificate),
followed by intermediate CA certificates if applicable, and ending at
the highest level (root) CA.

[para]
[option "-cafile"]
allows for HTTPS URIs to specify the locations, at which CA
certificates for verification purposes are located. The certificates
available via cafile and capath are trusted. The cafile points to a
file of CA certificates in PEM format. The file can contain several CA
certificates.

[para]
[option "-capath"]
allows for HTTPS URIs to specify the locations, at which CA
certificates for verification purposes are located. capath points to a
directory containing CA certificates in PEM format. The files each
contain one CA certificate. For more details, see
https://www.openssl.org/docs/manmaster/ssl/SSL_CTX_load_verify_locations.html

[para]
[option -verify]
allows for HTTPS URIs to specify that the server certificate should be
verified. If the verification process fails, the TLS/SSL handshake is
immediately terminated with an alert message containing the reason for
the verification failure. If no server certificate is sent, because an
anonymous cipher is used, this option is ignored.

[para]
The command [cmd "ns_http queue"] opens a connection to the web server
denoted in the [arg url] and returns on success the [arg id] of the HTTP
request, which might be used later in a [cmd "ns_http wait"] 
or [cmd "ns_http cancel"] command to refer to this request. The
command supports HTTP and HTTPS URIs.


[call [cmd "ns_http run"] \
	[opt [option "-method [arg M]"]] \
	[opt [option "-headers [arg S]"]] \
	[opt [option "-body [arg B]"]] \
	[opt [option "-body_file [arg fn]"]] \
	[opt [option "-timeout [arg T]"]] \
	[opt [option "-keep_host_header"]] \
	[opt [option "-cert [arg C]"]] \
	[opt [option "-cafile [arg CA ]"]] \
	[opt [option "-capath [arg CP ]"]] \
	[opt [option "-verify"]] \
	[arg url] \
	]

[para] 
Send a HTTP reuqest and wait for the result.  The command 
[cmd "ns_http run"] is similar to [cmd "ns_http queue"] followed by 
[cmd "ns_http wait"].


[call [cmd "ns_http wait"] \
	[opt [option "-elapsed [arg varName]"]] \
	[opt [option "-file [arg varName]"]] \
	[opt [option "-headers [arg H]"]] \
	[opt [option "-result [arg varName]"]] \
	[opt [option "-spoolsize [arg int]"]] \
	[opt [option "-status [arg varName]"]] \
	[opt [option "-timeout [arg t]"]] \
	[opt [option "-decompress"]] \
	[arg id]]

[para]
[option -elapsed]
varName is the name of a variable that should be used to store the elapsed
time for the request from beginning to finish

[para]
[option -file]
varName is the name of a variable that will contain the name of the 
temporary file in case the request was larger than [arg -spoolsize]

[para]
[option -headers]
headers is the ns_set ID which will receive the headers from the HTTP response.

[para]
[option -result]
varName is the name of a variable that should be used to store the HTTP response body.

[para]
[option -spoolsize]
In case the result is larger than spoolsize, it will be spooled to a
temporary file returned in the variable denoted by [arg -file].

[para]
[option -status]
varName is the name of a variable that should be used to store the HTTP response status

[para] 
[option -timeout] 
Optional timeout for the [cmd wait] subcommand. The task
might wait for input until the specified timeout for input. Might be
governed by the total timeout specified in the [cmd queue] subcommand.

[para]
[option -decompress]
In case the response has a content encoding of gzip, automatically
decompress the result

[para]
[arg id]
ns_set ID of the HTTP request to wait for.

[para]
The command [cmd "ns_http wait"] specifies, how the results of request
should be delivered and what information should be obtained from the
request in which form. The command waits until the request is
finished. For retrieving large content (e.g. .mp4 files) from a
server, it is recommended to use the [arg -spoolsize] option,
since per default the results are received into memory.

[list_end]

[section EXAMPLES]

First, a minimal example:
[example_begin]
 % ns_http queue http://www.google.com
 http0
 % ns_http wait -status S -result R http0
 1
[example_end]

The second example set a larger timeout on the request, provides
query-headers and returns reply-headers, and spools results to a file,
when the result is larger than 100 bytes.

[example_begin]
 set queryHeaders [lb]ns_set create[rb]
 set replyHeaders [lb]ns_set create[rb]
 ns_set update $queryHeaders Host localhost
 
 set h [lb]ns_http queue -headers $queryHeaders -timeout 10.0 http://www.google.com[rb]
 ns_http wait -result R -headers $replyHeaders -status S -spoolsize 1000 -file F $h
 
 if {[lb]info exists F[rb]} {
   ns_log notice "Spooled [lb]file size $F[rb] bytes to $F"
   file delete $F
 } else {
   ns_log notice "Got [lb]string length $R[rb] bytes"
 }
[example_end]


[see_also ns_httpget ns_httppost ns_httptime]
[keywords http-client nssock] 

[manpage_end]

