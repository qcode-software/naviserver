'\"
'\" Generated from file 'ns_db\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "ns_db" n 4\&.99\&.23 nsdb "NaviServer Module Commands"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
ns_db \- Database access API
.SH SYNOPSIS
\fBns_db 1row\fR \fIhandle\fR \fIsql\fR
.sp
\fBns_db 0or1row\fR \fIhandle\fR \fIsql\fR
.sp
\fBns_db bindrow\fR \fIhandle\fR
.sp
\fBns_db bouncepool\fR \fIpoolname\fR
.sp
\fBns_db cancel\fR \fIhandle\fR
.sp
\fBns_db close\fR \fIhandle\fR
.sp
\fBns_db connected\fR \fIhandle\fR
.sp
\fBns_db currenthandles\fR
.sp
\fBns_db datasource\fR \fIhandle\fR
.sp
\fBns_db dbtype\fR \fIhandle\fR
.sp
\fBns_db dml\fR \fIhandle\fR \fIsql\fR
.sp
\fBns_db driver\fR \fIhandle\fR
.sp
\fBns_db exception\fR \fIhandle\fR
.sp
\fBns_db exec\fR \fIhandle\fR \fIsqlcommand\fR
.sp
\fBns_db flush\fR \fIhandle\fR
.sp
\fBns_db gethandle\fR ?\fB-timeout \fIt\fR\fR? \fIpoolname\fR ?\fInhandles\fR?
.sp
\fBns_db getrow\fR \fIhandle\fR \fIsetId\fR
.sp
\fBns_db logminduration\fR \fIpool\fR ?\fIduration\fR?
.sp
\fBns_db open\fR \fIdriver\fR \fIdatasource\fR \fIuser\fR \fIpassword\fR
.sp
\fBns_db password\fR \fIhandle\fR
.sp
\fBns_db poolname\fR \fIhandle\fR
.sp
\fBns_db pools\fR
.sp
\fBns_db releasehandle\fR \fIhandle\fR
.sp
\fBns_db rowcount\fR \fIhandle\fR
.sp
\fBns_db select\fR \fIhandle\fR \fIsql\fR
.sp
\fBns_db setexception\fR \fIhandle\fR \fIcode\fR \fImessage\fR
.sp
\fBns_db sp_exec\fR \fIhandle\fR
.sp
\fBns_db sp_getparams\fR
.sp
\fBns_db sp_returncode\fR \fIhandle\fR
.sp
\fBns_db sp_setparam\fR \fIhandle\fR \fIvarname\fR \fIvartype\fR \fIinout\fR \fIvalue\fR
.sp
\fBns_db sp_start\fR \fIhandle\fR \fIprocname\fR
.sp
\fBns_db stats\fR
.sp
\fBns_db user\fR \fIhandle\fR
.sp
\fBns_db verbose\fR \fIhandle\fR ?\fIenabled\fR?
.sp
\fBns_dberrorcode\fR \fIhandle\fR
.sp
\fBns_dberrormsg\fR \fIhandle\fR
.sp
\fBns_dbconfigpath\fR
.sp
\fBns_pooldescription\fR \fIpoolname\fR
.sp
.BE
.SH DESCRIPTION
These commands provides a mechanism to access databases\&.
.SH COMMANDS
.TP
\fBns_db 1row\fR \fIhandle\fR \fIsql\fR
This command expects the SQL to be a select statement that returns exactly one
row and returns that row as an ns_set\&. An error is returned if zero or more than
one row is returned\&.
.TP
\fBns_db 0or1row\fR \fIhandle\fR \fIsql\fR
This command expects the provided SQL command
to be a select statement that returns exactly zero
or one row\&. On zero rows, a null string is returned\&. On one row, a newly
allocated ns_set is returned\&. An error is thrown if more then one row
is returned\&.
.TP
\fBns_db bindrow\fR \fIhandle\fR
ns_db bindrow returns an ns_set structure whose key names are the column names
of the rows returned by the SQL command previously-executed with ns_db exec\&.
If the database is not currently returning rows (i\&.e\&., a status other than
NS_ROWS was returned by ns_db exec), an error is thrown\&. The handle argument is
a database handle (obtained with ns_db gethandle)\&.
.TP
\fBns_db bouncepool\fR \fIpoolname\fR
Marks all database handles for the specified database pool as stale\&. When any
database handle currently open is put back into the pool, its connection to the
database will be reset\&.
.TP
\fBns_db cancel\fR \fIhandle\fR
ns_db cancel cancels the current operation\&.
.TP
\fBns_db close\fR \fIhandle\fR
Closes the connection\&. Use this function only on handles that were obtained by
the ns_db open function\&. The server automatically close handles when the
operation is complete, so you don't normally have to call this function\&.
.TP
\fBns_db connected\fR \fIhandle\fR
Returns a boolean value indicating whether the connection to the database pool is made\&.
.TP
\fBns_db currenthandles\fR
Return information about handles currently allocated to the thread
performing this call\&. The result contains a dict with the pools,
from which handles were allocated, the names of the handles and their
"active" state (a handle is active between a "ns_db select" and the
last "ns_db getrow" statement)\&. If no handles are allocated by this
thread, empty is returned\&.
For example, a possible result is "main {nsdb0 1} subquery {nsdb1 0}"
indicating that the current thread has allocated handles from pool
"main" and "subquery", but the handle from pool "main" (i\&.e\&. "nsdb0")
is currently active (during a select)\&.
.TP
\fBns_db datasource\fR \fIhandle\fR
Returns the datasource for the database pool\&.
.TP
\fBns_db dbtype\fR \fIhandle\fR
Returns the database type for the database pool\&.
.TP
\fBns_db dml\fR \fIhandle\fR \fIsql\fR
ns_db dml executes the provided SQL DML statement that should be data
manipulation language such as an insert or update, or data definition
language such as a create table\&.
.TP
\fBns_db driver\fR \fIhandle\fR
Returns the name of the driver of the handle\&.
.TP
\fBns_db exception\fR \fIhandle\fR
ns_db exception returns the most recent exception for the database pool\&.
.TP
\fBns_db exec\fR \fIhandle\fR \fIsqlcommand\fR
Executes the specified SQL command\&. It returns either NS_DML (if the SQL command
is a DML or DDL command) or NS_ROWS (if the SQL command returns rows, such as
a SELECT)\&. This function can be used for ad hoc querying, where you don't know
what kind of SQL command will be executed\&.
.TP
\fBns_db flush\fR \fIhandle\fR
ns_db flush flushes the results of an SQL select so you do not need to use ns_db
getrow to get all the rows and throw them away\&.
.TP
\fBns_db gethandle\fR ?\fB-timeout \fIt\fR\fR? \fIpoolname\fR ?\fInhandles\fR?
ns_db gethandle returns the specified number of handles from the specified pool\&.
If poolname is not specified, the Defaultpool from the configuration file is
used\&. If nhandles is not specified, 1 handle is returned\&. (Note that if you
specify nhandles, you must also specify a poolname\&.) If not enough handles are
available to fulfill the request, it waits until they are available\&. You must
request all the handles you will need for a specific pool with one call to ns_db
gethandle\&. You must release all your database handles explicitly (with ns_db
releasehandle) before acquiring more\&. If you request multiple handles from the
database, this function returns a Tcl list of database handles (space
delimited)\&. In this case, each handle must be released with a separate call to
ns_db releasehandle\&.
.sp
If \fB-timeout\fR is not specified or timeout is zero, \fBns_db gethandle\fR will
wait indefinitely (perhaps forever) for the requested number of handles to
become available\&. If timeout is greater than zero, ns_db gethandle will either
return with the handles within that time period, or return "" if the time period
was exceeded, or generate a Tcl error\&.
See the examples for \fBns_db gethandle\fR, below\&.
The argument \fIt\fR can be specified in the form
\fIsecs?:microsecs?\fR, or \fIsecs\&.fraction\fR,
or as a number with the time units ms, s, m, d\&.
.TP
\fBns_db getrow\fR \fIhandle\fR \fIsetId\fR
ns_db getrow fetches the next row waiting to be retrieved after an ns_db select\&.
The data is dumped right into the set associated with SETID, which should be the
set returned by the ns_db select\&. It returns "1" if there are more rows waiting
and returns "0" otherwise\&. If you call ns_db getrow again after already
receiving "0" on the previous call, an error is returned\&.
.TP
\fBns_db logminduration\fR \fIpool\fR ?\fIduration\fR?
Query or set a threshold for logging of SQL statements\&. Log only
statements in the error\&.log, when SQL logging is turned on in general
(via "ns_logctl severity Debug(sql) \&.\&.\&.") and the statement took at
least the specified duration\&. The \fIduration\fR can be specified in
the form \fIsecs?:microsecs?\fR, or \fIsecs\&.fraction\fR, or as a
number with the time units ms, s, m, d\&.
.TP
\fBns_db open\fR \fIdriver\fR \fIdatasource\fR \fIuser\fR \fIpassword\fR
ns_db open returns a handle at a lower level, circumventing the pools\&.
.TP
\fBns_db password\fR \fIhandle\fR
Returns the password of the user for the database pool\&.
.TP
\fBns_db poolname\fR \fIhandle\fR
ns_db poolname returns the database pool that this handle came from\&.
.TP
\fBns_db pools\fR
ns_db pools returns a list of all database pools\&.
.TP
\fBns_db releasehandle\fR \fIhandle\fR
Puts the handle back in the pool\&. The server will automatically return any open
handles to the pool after a page has finished executing\&.
.TP
\fBns_db rowcount\fR \fIhandle\fR
Returns number of processed records by the last SQL statements,
this is useful with INSERT/UPDATE/DELETE
statements to know how many records updated\&.
.TP
\fBns_db select\fR \fIhandle\fR \fIsql\fR
ns_db select executes the SQL statement on the database server\&. It returns an
ns_set with the keys set to the column names that were selected\&. Use ns_db
getrow to retrieve rows\&. You cannot perform nested select statements\&. Before you
start a new select statement, you must first either retrieve all the rows from
the first select or use the ns_db flush statement to flush any rows not
yet retrieved\&.
.TP
\fBns_db setexception\fR \fIhandle\fR \fIcode\fR \fImessage\fR
ns_db setexception returns the specified status code and message to the client\&.
.TP
\fBns_db sp_exec\fR \fIhandle\fR
ns_db sp_exec executes a stored procedure that has been initialized with ns_db
sp_start and ns_db sp_setparam\&. It returns "NS_DML" if the command was
successfully executed but did not return rows, or it returns "NS_ROWS" if the
command was successfully executed and did return rows (which can then be fetched
with ns_db bindrow and ns_db getrow)\&. It throws an error if the command failed\&.
This function is implemented only for the Sybase database driver\&. See the
Examples section, below, for an example of this function\&.
.TP
\fBns_db sp_getparams\fR
ns_db sp_getparams gets any output parameters set after executing a stored
procedure with ns_db sp_exec\&. It returns an ns_set or throws an error on failure\&.
This function is implemented only for the Sybase database driver\&. See the Examples
section, below, for an example of this function\&.
.TP
\fBns_db sp_returncode\fR \fIhandle\fR
ns_db sp_returncode gets the return code from a stored procedure\&. It must be
called after ns_db sp_exec\&. This function is implemented only for the Sybase
database driver\&. See the Examples section, below, for an example of
this function\&.
.TP
\fBns_db sp_setparam\fR \fIhandle\fR \fIvarname\fR \fIvartype\fR \fIinout\fR \fIvalue\fR
ns_db sp_setparam sets a parameter for a call to a stored procedure\&. The varname
is the name of the variable, for example "@name"\&. The vartype is the data type
of this parameter, for example "varchar"\&. The inout argument indicates whether
it is an input or output parameter\&. It must be set to either "in" or "out"\&.
The value is the parameter value to send\&. This function returns 1 on success and
throws an error on failure\&. This function is implemented only for the Sybase
database driver\&. See the Examples section, below, for an example of
this function\&.
.TP
\fBns_db sp_start\fR \fIhandle\fR \fIprocname\fR
ns_db sp_start begins execution of the stored procedure called procname\&.
It returns 0 on success and throws an error on failure\&. This function is
implemented only for the Sybase database driver\&. See the Examples section,
below, for an example of this function\&.
.TP
\fBns_db stats\fR
Returns statistics in form of a Tcl dict from all pools in form of a
dict\&. The statistics contain the number of SQL statements executed,
the number of get-handle operations,
the number of currently connected database connections,
the total and the used handles from the pool, and the aggregated wait
time for handles from this pool (including the connection setup time
to the database server)\&.
.TP
\fBns_db user\fR \fIhandle\fR
Returns the user (as specified for the User parameter of the configuration file)
for the database pool\&.
.TP
\fBns_db verbose\fR \fIhandle\fR ?\fIenabled\fR?
Change the verbose setting (the Verbose parameter in the configuration file) for
the given pool\&.
.TP
\fBns_dberrorcode\fR \fIhandle\fR
Return the database error code for the specified database handle\&.
.TP
\fBns_dberrormsg\fR \fIhandle\fR
Return the database error message for the specified database handle\&.
.TP
\fBns_dbconfigpath\fR
Return the database section name file for the nsdb module from the
configuration file\&.
.TP
\fBns_pooldescription\fR \fIpoolname\fR
Return the description of the provided database pool name from the
[ns/db/pools] section in the configuration file\&.
.PP
.SH EXAMPLES
These are valid uses of ns_db gethandle:
.CS


 ns_db gethandle
 # 1 handle from default pool

 ns_db gethandle -timeout 2\&.5s
 # 1 handle from default pool, 2\&.5 sec timeout

 ns_db gethandle -timeout -1 poolname
 # 1 handle from poolname, error if not available

 ns_db gethandle poolname
 # 1 handle from poolname

 ns_db gethandle -timeout 23 poolname
 # 1 handle from poolname, 23 sec timeout

 ns_db gethandle poolname 5
 # 5 handles from poolname

 ns_db gethandle -timeout 2\&.0s poolname 5
 # 5 handles from poolname, 2\&.0 sec timeout

.CE
.CS


 set db [ns_db gethandle $pool]
 set ret [ns_db sp_start $db "p_TestProc"]

 #
 # Set the parameters for this stored procedure\&.  The SQL definition of this
 # procedure is:
 #
 #   CREATE PROCEDURE p_TestProc(@x int, @y varchar(16) out, @z int out)
 #
 # The arguments to ns_db sp_setparam are like this:
 #
 #   ns_db setparam $handle $varname, $vartype, in|out, $value
 #
 set ret [ns_db sp_setparam $db "@x" int in 4]
 set ret [ns_db sp_setparam $db "@y" varchar out "varchar val"]
 set ret [ns_db sp_setparam $db "@z" int out 231]

 #
 # Execute the stored procedure now
 #
 set ret [ns_db sp_exec $db]

.CE
.SH CONFIGURATION
The nsdb module is typically loaded per-server, where every server
might use multiple database pools\&. Below is a sample configuration for
PostgreSQL using the \fInsdbpg\fR driver, using two database pools
where \fIpool1\fR is the default pool\&.
.CS


 ns_section "ns/db/drivers"
 ns_param	postgres        ${bindir}/nsdbpg\&.so

 ns_section ns/server/${server}/modules
 ns_param	nsdb		${bindir}/nsdb\&.so

 ns_section ns/server/${server}/db
 ns_param	pools           pool1,pool2
 ns_param	defaultpool     pool1

 ns_section ns/db/pools
 ns_param	pool1           "Pool 1"
 ns_param	pool2           "Pool 2"

 ns_section ns/db/pool/pool1
 ns_param	\&.\&.\&.

.CE
For every pool the following configuration options might be used:
.TP
CheckInterval
Check after this time interval for
stale connections\&. Default: 5m\&.
.TP
Connections
Integer: The maximum number of connections that can
be established at any one time\&. The server automatically makes
connections as needed up to this maximum number\&. If additional
connections are requested during processing, the requests must wait\&.
Default: 2
.TP
Datasource
Name specific to the database management system that
might be necessary for opening database connections\&. For PostgreSQL,
datasource has the form "${db_host}:${db_port}:${db_name}"\&. See also:
\fIhttps://www\&.postgresql\&.org/docs/12/libpq-connect\&.html#LIBPQ-PARAMKEYWORDS\fR
.TP
Driver
Name of the driver for this pool as specified in
\fIns/db/drivers\fR\&.
.TP
LogMinDuration
Time interval for logging SQL statements\&. When SQL
logging is turned on, log only SQL queries that take longer than the
specified duration (similar to log_min_duration_statement in
PostgreSQL)\&. Setting \fILogMinDuration\fR to 0 causes all SQL
statements to be logged\&.
.TP
LogSQLErrors
Boolean value: If set to \fIOn\fR, SQL errors are
written to the server log along with the offending SQL statement(s)\&.
.TP
MaxIdle
The maximum time interval that a database
connection within this pool can remain open and idle\&.  The default
setting of "10m" causes connections that are idle for 10 minutes to be
closed\&. Note that \fIMaxIdle\fR will not have an effect if it is
equal to \fIMaxOpen\fR\&. Setting \fIMaxIdle\fR to 0 deactivates the
automatic closing feature on idle connections\&.
Default: 5m
.TP
MaxOpen
The maximum time interval that a database
connection within this pool can remain open\&.  The default setting of
"60m" causes connections to keep open for one hour regardless of
activity level\&. Database connections will then be opened again as
needed up to the value of the \fIConnections\fR parameter\&.  It is
recommended that \fIMaxOpen\fR be a multiple of \fIMaxIdle\fR;
otherwise, \fIMaxOpen\fR may be off by as much as (MaxOpen mod MaxIdle)\&.
Setting \fIMaxOpen\fR to 0 deactivates the automatic closing feature\&.
Default: 60m
.TP
Password
Password to log in to the database\&.
.TP
User
Username to log in to the database\&.
.PP
All time intervals can be specified with and without a time unit
suffix\&. Valid time units are "ms", "s", "m", "h", "d"\&.
If no time unit suffix is specified, seconds are assumed\&.
.PP
Below is a sample configuration for two pools\&. The referenced Tcl
variables have to be set earlier to appropriate values\&.
.CS


ns_section ns/db/pool/pool1 {
  ns_param	Connections        15
  ns_param      LogMinDuration     10ms
  ns_param	LogSQLerrors       $debug
  ns_param	driver             postgres
  ns_param	DataSource         ${db_host}:${db_port}:${db_name}
  ns_param	user               $db_user
  ns_param	password           ""
}
ns_section ns/db/pool/pool2 {
  ns_param	Connections        5
  ns_param      LogMinDuration     10ms
  ns_param	LogSQLerrors       $debug
  ns_param	driver             postgres
  ns_param	DataSource         ${db_host}:${db_port}:${db_name}
  ns_param	user               $db_user
  ns_param	password           ""
}

.CE
.SH "SEE ALSO"
ns_buildsqldate, ns_dbquotevalues
.SH KEYWORDS
SQL, database, module, nsdb, pools, server built-in
