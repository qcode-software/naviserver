'\"
'\" Generated from file 'admin-install\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "admin-install" n 4\&.99\&.23 manual "NaviServer Manual"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
admin-install \- NaviServer Installation Guide
.SH DESCRIPTION
NaviServer is distributed in source form\&.
.SH "GETTING STARTED"
NaviServer is reasonably portable and known to compile and run on the following platforms:
.IP \(bu
Linux 2\&.2 and better (x86 and others)
.IP \(bu
FreeBSD 3\&.4 and better (x86 and others)
.IP \(bu
OpenBSD 2\&.5 and better (x86 and others)
.IP \(bu
Solaris 2\&.x and better (SPARC and x86)
.IP \(bu
OpenSolaris (OmniOS, OpenIndiana)
.IP \(bu
IRIX 6\&.x (mips)
.IP \(bu
HP/UX 10 and 11 (hppa)
.IP \(bu
DEC Tru64 & OSF/1 4\&.0 and better (alpha)
.IP \(bu
UnixWare 7\&.x and better (x86)
.IP \(bu
Apple OS/X "Darwin"
.PP
.PP
It's likely NaviServer can compile on other systems and/or higher or  lower
numbered versions but this has not been extensively tested\&.  The primary
development platforms for NaviServer is Linux\&.
.PP
You will need a \fIC compiler\fR\&.  The best one to use is
GNU GCC from \fIhttp://www\&.gnu\&.org\fR and its mirrors or clang\&.
NaviServer (and the included Tcl libraries) are written entirely in
ANSI standard C\&.
.PP
\fIGNU make\fR is also required\&.  It is also available from the GNU web site\&.
.PP
.SH DOWNLOADING
Released versions are available from
\fISourceForge Download area\fR [http://sourceforge\&.net/project/showfiles\&.php?group_id=130646]
.PP
Latest development version is available from the Bitbucket repository
.CS


 git clone https:/bitbucket\&.org/naviserver/naviserver\&.git
 cd naviserver
 \&./autogen\&.sh
 make install

.CE
.SH BUILDING
We've tried to make building NaviServer as simple as possible\&.  On the supported
platforms, simply type:
.CS


 \&./configure
 make

.CE
.PP
Some modules use third-party libraries\&.  If the library is missing, the NaviServer
build will continue without error -- it just will not build the offending
module\&.
.PP
Note: If you have any problems building, the two files \fIinclude/Makefile\&.global\fR and
\fIinclude/Makefile\&.module\fR have all the information you need to change
settings throughout the NaviServer environment\&.
.PP
Two options to configure\&.sh script worth noting:
.IP [1]
--enable-symbols to enable debugging information to be compiled in for
easy debugging, otherwise it will be compiled with optimization enabled and
that will prevent from effective troubleshooting in case of server crash
.PP
.SH INSTALLING
Type "\fImake install\fR" to make a production server\&.  This
will create an installation directory at \fI/usr/local/ns/\fR, populate
the directories with various  startup files and  configuration files, copy
the binaries to the \fI/usr/local/ns/bin\fR directory, and finish\&.  To install
confidence tests, type "make install-tests" and they will appear in the
tests/ directory of your server's pageroot\&.  The default location for installations
can be overridden by typing "\fIgmake install PREFIX=/your/directory/\fR"\&.
.PP
.SH "DOWNLOADING AND INSTALLING MODULES"
To download and install additional modules:
.CS


  hg clone http://bitbucket\&.org/naviserver/modulename
  cd modulename
  make install

.CE
.PP
The steps above assume, that NaviServer is installed at the standard
place at \fI/usr/local/ns/\fR\&. If this is not the case in your
installation, please provide the location to make via parameter
\fINAVISERVER\fR\&.
.CS


  make NAVISERVER=PATH_TO_LOCATION install

.CE
At this moment the following modules are available:
.PP
\fInsaccess nsclamav nsdbi nsdbmysql nsdhcpd nsicmp nsmemcache nssip nsstats nsvfs nsaspell nsconf nsdbilite nsdbpg nsdns nsimap nsphp nssmtpd nssyslogd nszlib nsauthpam nsconfigrw nsdbimy nsdbsqlite nsexpat nsldapd nsradiusd nssnmp nstftpd nschartdir nsdbbdb nsdbipg nsdbtds nsgdchart nsloopctl nsrtsp nsssl nsoracle nsudp\fR
.PP
To check what modules are available go to http://bitbucket\&.org/naviserver/\&.
.PP
Some of the modules have external dependencies such as include
directories or paths to libraries, so please look into module's README
file for any additional information\&.
.SH CONFIGURING
The installation directory contains several configuration files under
/usr/local/ns/conf installation directory\&.
A simple configuration to start with is nsd-config\&.tcl, which is used
below\&. A more complete reference of the available parameter is
sample-config, a very short configuration file is simple-config\&.tcl\&.
The most basic configuration parameters are the port and listening
addresses, which are set in nsd-config\&.tcl as follows:
.IP [1]
Listen for HTTP connections on your computer's primary
interface at port 8080\&.  To use another port and/or select
interfaces, you can set the \fIport\fR and \fIaddress\fR
parameters\&. For details how to configure the networking setup
of NaviServer, see \fInssock\fR (for HTTP) and \fInsssl\fR
(for HTTPS)\&.
.IP [2]
Check security settings for \fInscp\fR (Control Port module)
and listen on localhost:4080 if they are set\&.
.PP
.PP
Note: Some modules can be disabled in the sample nsd\&.tcl for security
reasons\&. They are \fInscp\fR and \fInsperm\fR\&. These modules can
be disables by e\&.g\&. commenting out the respective lines in the
"ns/server/default/modules" section\&.  These modules are not required
to run a server unless you want to use the Control Port and/or the
Permissions module, respectively\&.  Before using them in a production
environment, change the passwords and default permissions by following
the instructions in the NaviServer documentation\&.
.PP
Although you must be root to start NaviServer on port 80, the server
itself must change to a regular user shortly after initialization\&.
You either need to start the server as a non-root user (in which case
you will not be able to listen for connections on privileged ports
such as port 80) or you must include a \fI-u user\fR command line
flag to which the server will setuid(2) after startup\&. We assume in
the following sections that a user \fInsadmin\fR and a group
\fInsadmin\fR were already created on the system, where NaviServer
is installed\&.
.PP
If NaviServer was installed with default nsd\&.tcl configuration file, just
type
.CS


  /usr/local/ns/bin/nsd

.CE
and it will be started in the background listening on port 8080\&.
.PP
You may either specify a Unix username or numeric uid, e\&.g\&.:
.CS


  bin/nsd -t conf/nsd-config\&.tcl -u \fInsadmin\fR

.CE
.PP
For the mode  of operation, there are four choices:
\fIForeground, Background, Background with watchdog\fR and \fIInittab\&.\fR
.IP \(bu
Foreground mode:
.CS


  bin/nsd  -f -t conf/nsd-config\&.tcl -u \fInsadmin\fR-g \fInsadmin\fR

.CE
.sp
In \fIForeground \fRmode , the server starts  and emits diagnostic log messages
directly to the  terminal window\&.   This is useful for testing, configuration
or debugging  a server\&.  To start the server in foreground mode use:
.sp
To stop a server running the foreground simply press  interrupt on your keyboard
(e\&.g\&., ctrl-c or the DEL key) which will send a SIGINT to the server and
initiate shutdown\&.
.IP \(bu
Background mode:
.CS


  bin/nsd -t conf/nsd-config\&.tcl -u \fInsadmin\fR-g \fInsadmin\fR

.CE
.sp
In \fIBackground\fR mode, the server forks and disassociates from
the terminal\&.  Diagnostic messages are appended to log/server\&.log\&.
This is a typical daemon-style mode of operation\&.  To start the server
in background mode use:
.sp
To stop a server running  the background  you may either use the kill(2) command
to send a SIGTERM to the background  process id(*) or the special -K flag of the
nsd binary\&.  This flag  will determine the process id from a special marker
file, send the signal and wait for shutdown, e\&.g\&.:
.IP \(bu
Background mode with built-in watchdog:
.CS


 /usr/local/ns/bin/nsd  -w -t /usr/local/ns/nsd-config\&.tcl -u \fInsadmin\fR -g \fInsadmin\fR

.CE
.sp
In \fIWatchdog\fR mode, the server is restarted automatically when
it crashes independent from the respawn support from the operating system\&.
.IP \(bu
Inittab mode (non-forking mode):
.sp
.CS


  w1:23:respawn:/usr/local/ns/bin/nsd  -i -t /usr/local/ns/nsd-config\&.tcl -u \fInsadmin\fR -g \fInsadmin\fR

.CE
.sp
In \fIInittab\fR mode, the server runs in the foreground  but opens the
log file as with background mode\&.  This mode is used  when the server is
started from an entry in the "/etc/inittab" file\&.   The benefit of this mode
is that init will restart the server automatically\&.
.sp
Furthermore, the inittab mode is needed as well on macOS when
NaviServer is started via launchd (controlled via launchctl)\&.
.PP
\fINote\fR: While running NaviServer on some Unix platforms (e\&.g\&.,
Linux, SGI), you'll notice multiple nsd processes\&.  This is normal and
represents the individual threads\&.  The main process id can be
determined by checking the log/nsd\&.pid file or looking at the last few
entries of the server log (per default "logs/error\&.log", each of which
will include the process id and thread id in the form [pid\&.tid]\&.
You can also telnet to the control port and type "ns_info pid"\&.
.SH "SEE ALSO"
admin-maintenance
.SH KEYWORDS
command-line-options, nscp, nsd, nssock, nsssl
