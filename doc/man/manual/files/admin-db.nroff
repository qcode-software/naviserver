'\"
'\" Generated from file 'admin-db\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "admin-db" n 4\&.99\&.19 manual "NaviServer Manual"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
admin-db \- NaviServer Database Administration Guide
.SH DESCRIPTION
.SH "WHAT IS A DATABASE?"
A database is a collection of data stored in a computer\&. A Database
Management System (DBMS) is a software package that efficiently
manages databases and lets one or more people use or modify the
contents of the database\&. The main function of the DBMS is to manage
the internal representation of the data in a form optimized for
computer access, and to respond to requests from users to access or
modify the data\&. The DBMS translates these requests into database
commands that it then performs on the data\&.
.PP
One of the most common and powerful languages for accessing databases
is SQL\&. SQL (Structured Query Language) commands perform actions on
the database\&. There are two types of SQL commands: DDL (Data
Definition Language) commands, which are used to define the structure
of the data, and DML (Data Manipulation Language) commands, which are
used to manipulate the data itself\&. The data is organized into tables
in the database\&. Tables contain rows (sometimes called records) and
columns (sometimes called fields)\&. The structure of the table and its
columns is defined by DDL commands\&. The commands to insert or update
values in the rows of the table are DML commands\&.
.PP
.SH "DATABASES AND NAVISERVER"
NaviServer can be configured to have access to multiple databases
through NaviServer's database drivers\&. NaviServer creates a database
pool, a group of connections to a database, for each database it
accesses\&.
.PP
You can write your own Tcl or C extensions to
access the database\&. See the Tcl Developer's Guide and the C
Developer's Guide for more information\&.
.PP
.SH "INTERNAL VS\&. EXTERNAL DRIVERS"
NaviServer provides a tightly-coupled solution to
database driver integration, with database client libraries linked
directly into the server\&. Such database drivers are called internal
drivers\&.
.PP
NaviServer also provides an additional, loosely-coupled
architecture, where NaviServer redirects all database requests to a
separate process known as the database proxy daemon\&. This is
accomplished using a special external driver, which looks just like an
internal database driver to NaviServer\&.
.SH "AVAILABLE DATABASE DRIVERS"
NaviServer provides internal database drivers for Postgres and
Sybase/MS SQLServer\&. Third-party database drivers are provided
for Oracle, Informix, and InterBase, Mysql\&.
.SH "INTERNAL DATABASE DRIVERS"
.SS "CONFIGURE AN INTERNAL DATABASE DRIVER"
Configuration for an internal database driver consists of setting
parameters for the internal driver and creating a database pool that
uses that driver\&.
.PP
The internal database driver parameters can be typed directly in the
configuration file as described below\&. This example describes the
steps involved in configuring an internal driver to interface with the
Postgres or Solid driver\&.
.IP [1]
Edit your NaviServer configuration file, usually named nsd\&.tcl\&.
.sp
.IP [2]
Add a configuration file section called ns/db/drivers:
.sp
ns_section "ns/db/drivers"
.IP [3]
List the database drivers you will be using\&. For example:
.sp
.CS



      ns_section "ns/db/drivers"
      ns_param postgres nsdbpg\&.so
      ns_param solid nsdbtds\&.so


.CE
.IP [4]
Add a configuration file section to list your database pools\&. For example:
.sp
.CS



      ns_section "ns/db/pools"
      ns_param mypool "This pool will use Solid"


.CE
.IP [5]
Add a configuration file section to define the database pool you
have named\&. For example:
.CS


      ns_section "ns/db/pool/mypool"
      ns_param Driver solid
      ns_param Datasource "TCP/IP hostname 1313"
      ns_param Connection 1

.CE
.sp
Note that the syntax provided to the datasource and the
available options depends on the actual driver and might have
therefore different options\&. For example, with the
\fInsdbpg\fR driver, the database driver section might look like:
.CS


   ns_section ns/db/pool/mypool {
       ns_param	  connections        15
       ns_param   LogMinDuration     0\&.01   ;# when SQL logging is on, log only statements above this duration
       ns_param	  logsqlerrors       true
       ns_param	  driver             postgres
       ns_param	  datasource         "${db_host}:${db_port}:dbname=${db_name}  sslmode=require"
       ns_param	  user               $db_user
       ns_param	  password           ""
    }

.CE
.IP [6]
Choose which server or servers is to have access to the database
pools you have defined\&. For each server, add a configuration file
section to define which database pools it can access\&. For example:
.CS



      ns_section "ns/server/servername/db"
      ns_params Pools *


.CE
.PP
.PP
The "*" designation means that this server can access any of the
defined database pools\&.
.SH "EXTERNAL DATABASE DRIVERS"
The external driver sends messages to the external database proxy
daemon instead of calling database client libraries directly\&. This
database proxy daemon can be a local or remote process\&. The reason for
this seemingly unnecessary indirection is that some database client
libraries are undesirable partners in the NaviServer process space\&. For
example, they may make assumptions regarding per-process resources
such as signals, or they may not be thread-safe\&. Also, platforms
without support for a particular database client library can still
interface with a database via a remote database proxy daemon\&.
.PP
A database proxy daemon is created for each connection in a NaviServer
database pool\&. Like connections within a pool configured for an
internal driver, the connections associated with proxy daemons are
efficiently managed by the NaviServer on an ad hoc basis\&. Thus,
database proxy daemon processes are created and shut down by the
NaviServer as demand for concurrent database handles varies over time\&.
.PP
This distributed approach is not intended to replace the existing
practice of linking database client libraries into the server via a
driver\&. It merely provides an alternative interface
mechanism--augmenting the choices available to developers who are
extending the NaviServer database interface capabilities\&. It is likely,
however, that this distributed approach, i\&.e\&. a separate process per
database connection, will improve overall database throughput, even
with the additional communication overhead\&. We expect this performance
improvement because vendor-supplied database client libraries, running
within a multi-threaded server, must limit concurrency via resource
locks\&.
.PP
.SS CONFIGURATION
Configuration for an external database driver consists of setting
parameters for the external driver and creating a database pool that
uses that driver\&. An external driver is configured to spawn and
communicate with a database-specific proxy daemon\&. Database proxy
daemons are provided for Sybase\&.
.PP
The following example describes the steps involved in configuring an
external driver to interface with the Sybase proxy daemon\&.
.PP
.SS "CONFIGURE AN EXTERNAL DATABASE DRIVER"
.IP [1]
Edit your NaviServer configuration file, usually named nsd\&.tcl\&.
.sp
.IP [2]
Add a configuration file section called ns/db/drivers:
.sp
ns_section "ns/db/drivers"
.IP [3]
List the Sybase database driver\&. For example:
.sp
.CS



      ns_section "ns/db/drivers"
      ns_param extsyb nssybpd\&.so


.CE
.IP [4]
Configure the Sybase driver\&. For example:
.sp
.CS



      ns_section "ns/db/driver/extsyb"
      ns_param LocalDaemon nssybpd
      ns_param Param SYBASE-env-variable


.CE
.sp
The Param parameter should be set to the value of the SYBASE
environment variable\&.
.IP [5]
Add a configuration file section to list your database pools\&. For example:
.sp
.CS



      ns_section "ns/db/pools"
      ns_param mypool "This pool will use Sybase"


.CE
.IP [6]
Add a configuration file section to define the database pool you
have named\&. For example:
.sp
.CS



      ns_section "ns/db/pool/mypool"
      ns_param Driver extsyb


.CE
.IP [7]
Choose which server or servers is to have access to the database
pools you have defined\&. For each server, add a configuration file
section to define which database pools it can access\&. For example:
.sp
.CS



      ns_section "ns/server/servername/db"
      ns_params Pools *


.CE
.sp
The "*" designation means that this server can access any of the
defined database pools\&.
.PP
.PP
.SS "REMOTE DATABASE PROXY DAEMONS"
The previous example showed configuration of a local proxy daemon\&. One
of the advantages of the external driver interface is that you are
free to run database proxy daemons on any other host, perhaps one on
which database vendor client libraries are more readily available or
more reliable\&.
.PP
The following example shows how to configure an interface to a proxy
daemon on a remote machine\&.
.PP
.SS "CONFIGURE A REMOTE EXTERNAL DATABASE DRIVER"
.IP [1]
Edit your NaviServer configuration file as described in the
previous section, "External Database Drivers" section\&.
.IP [2]
In the ns/db/drivers/extsyb configuration section, delete the
definition for the LocalDaemon parameter\&.
.IP [3]
Add definitions for the RemoteHost and RemotePort parameters\&. For
example:
.sp
.CS



      ns_section "ns/db/driver/extsyb"
      ns_param RemoteHost host-name
      ns_param RemotePort port-number
      ns_param Param SYBASE-env-variable


.CE
.IP [4]
Run nssybpd, or configure inetd as shown in the next step instead\&.
.sp
For example:
.sp
nssybpd 8199
.IP [5]
As an alternative to running nssybpd as shown in the previous
step, you can configure inetd on the target remote machine as
follows\&.
.sp
.RS
.IP [1]
Add the following line to /etc/inet/services:
.sp
nssybpd 8199/tcp
.IP [2]
Add the following line to /etc/inet/inetd\&.conf:
.sp
nssybpd stream tcp nowait sa /serverhome/bin/nssybpd nssybpd
.IP [3]
Send a SIGHUP signal to your inetd process\&.
.RE
.PP
.PP
.SS "TCL INTERFACE"
In addition to the built-in, database-driver independent ns_db Tcl
functions, the ns_ext function is available for special functions that
relate to the external driver mechanism\&. In general, you will not need
to use ns_ext for most database operations\&. The ns_ext functions are
used primarily by the ns_db functions, but ns_ext is provided in the
event that you need to call it directly\&.
.PP
.SH "DEVELOPING DATABASE DRIVERS FOR NAVISERVER"
For information on developing your own database drivers, see the
Database Drivers Development guide\&.