'\"
'\" Generated from file 'admin-tuning\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "admin-tuning" n 4\&.99\&.23 manual "NaviServer Manual"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
admin-tuning \- NaviServer Tuning and Scaling Guide
.SH DESCRIPTION
NaviServer is immensely scalable because it has to be\&. It is based on the web server
for the most heavily-used production environment in the world --
AOL\&. The sections below refer to various configuration parameters\&.
For a complete reference, see the sample configuration files sample-config\&.tcl\&.
.SS "ONLY LOAD MODULES YOU NEED"
Modules like \fInsperm\fR register extra requests that are checked on each connection,
for example\&. Other modules like nscgi and nscp do not need to be loaded
if you're not actually using CGI or the control port, respectively\&.
.SS "TURN OFF DNS LOOKUPS WHEREVER POSSIBLE"
The nslog module has these turned off by default, but it helps to see if
it your configuration has it turned off\&. Also, the nsperm module uses DNS
lookups for access control -- turn this off if you don't use host access
control rules with nsperm\&. The nscgi module also can use DNS but, again,
it is off by default (gethostbyaddr setting)\&. If you must use DNS, NaviServer
has a DNS cache that can be tweaked -- see \fIdnscache\fR,
\fIdnswaittimeout\fR and
\fIdnscachetimeout\fR in the config reference\&.
.SS "EXPERIMENT WITH THE ADP CACHE"
In the ns/server/$server/adp section, the parameters are
\fIcache\fR, \fIcachesize\fR, and \fIthreadcache\fR\&.
Use the appropriate \fI$server\fR
for you installation (maybe the name \fIdefault\fR)\&.
NaviServer defaults to a 10 MB ADP cache\&. This cache
is used to store parsed ADP pages -- as a consequence such ADP scripts are only
parsed once and every subsequent time they are run directly out of memory\&.
This means, though, that you should have a fair amount of core memory on
your system to accommodate the cache if you decide to make it very large\&.
.SS "EXPERIMENT WITH THE FASTPATH CACHE"
This is a separate cache used to store static HTML pages\&. The section is
ns/server/$server/fastpath, and the options are
\fIcache\fR, \fIcachemaxentry\fR, and \fIcachemaxsize\fR\&.
The default is 10 MB\&.
On some systems enabling the \fImmap\fR parameter can make it work even faster\&.
.SS "DISABLE CHECKMODIFIEDSINCE"
Is your site updated rarely or often? On some slower systems, setting
\fIcheckmodifiedsince\fR
to false in the
\fIns/server/$server\fR section can speed up things considerably
as NaviServer reads all scripts and data directly from the in-memory cache
without checking to see if the file has changed each time a cache entry
is hit\&.
.SS "TUNE THE CONNECTION THREADS"
Thread settings are sometimes helpful, sometimes not\&. If one is
running a small configuration (e\&.g\&. 100K requests per day), the
default settings provided by the sample configuration files are typically
sufficient\&.
For larger or very constraint setups the paramamter for the
connection theads can and should be tuned\&. The following parameters can be
altered in the section "ns/server/$server"
(for a server named "$server"):
\fIconnsperthread\fR,
\fIhighwatermark\fR,
\fIlowwatermark\fR,
\fImaxconnections\fR,
\fImaxthreads\fR,
\fIminthreads\fR,
\fIrejectoverrun\fR,
\fIretryafter\fR,
\fIpoolratelimit\fR,
\fIconnectionratelimit\fR and
\fIthreadtimeout\fR\&.
See also
\fIconnection thread pools\fR\&.
.PP
As mentioned, in most cases the defaults are fine, with the exception of
\fIminthreads\fR and
\fImaxthreads\fR which should be
carefully adjusted based on your load\&. When
\fIminthreads\fR and \fImaxthreads\fR are sent to different
values, NaviServer tries to adjust the number of running threads
according to the current load\&. When running applications with
a large Tcl blueprint (e\&.g\&. OpenACS), starting of new threads
can be costly, such that a frequent starting and stopping of threads
might not be the best either\&. Therefore, it is sometimes better to
set \fIminthreads\fR equals to\fImaxthreads\fR\&.
.PP
The parameter \fImaxconnections\fR defines the queue length of
a connection pool\&. This means, requests are received in a situation
where no connection thread is available, these requests are
added to this queue\&. Since this queue has a limited
size, it might as well overrun\&. In this situation,
one can fine tune the behavior\&. When \fIrejectoverrun\fR
is set, NaviServer will send a 503 (service unavailable)
reply to the client\&. When additionall the parameter
\fIretryafter\fR is set, NaviServer provides it value
as a "Retry-After" hint to the client\&. When
\fIrejectoverrun\fR is false the NaviServer keeps
an additional waiting list, causing eagerly to retry
such requests automatically\&. The latter can lead to
a memory bloat on flooding attacks\&. However, for internal
servers (or connection pools), such behavior might be
still favorable\&.
.PP
On busy machines, one can define multiple connection thread
pools and use the configuration option \fImap\fR to map HTTP method,
URL and context filter patterns to certain pools (for details about
the mapping specs, the documentation of
\fIconnection thread pools\fR and the command
\fBns_server\fR\&.
By default, the settings are for the default connection threads
pool\&. Additional connection thread pools can be created via
\fIpools\fR\&.
.CS


 ns_section ns/server/$server/pools {
   #
   # To activate connection thread pools, uncomment one of the
   # following lines and/or add other pools\&.

   ns_param   monitor	"Monitoring actions to check healthiness of the system"
   ns_param   fast	"Fast requests, e\&.g\&. less than 10ms"
 }

 ns_section ns/server/$server/pool/monitor {
   ns_param   minthreads 2
   ns_param   maxthreads 2

   ns_param   map "GET /admin/nsstats"
   ns_param   map "GET /SYSTEM"
   ns_param   map "GET /ds"
   ns_param   map "POST /ds"
   ns_param   map "GET /request-monitor"
 }

 ns_section ns/server/$server/pool/fast {
   ns_param   minthreads 2
   ns_param   maxthreads 2

   ns_param   map "GET /*\&.png"
   ns_param   map "GET /*\&.PNG"
   ns_param   map "GET /*\&.jpg"
   ns_param   map "GET /*\&.pdf"
   ns_param   map "GET /*\&.gif"
   ns_param   map "GET /*\&.mp4"
   ns_param   map "GET /*\&.ts"
   ns_param   map "GET /*\&.m3u8"
 }

 ns_section ns/server/$server/pool/bots {
   ns_param   map "GET  /* {user-agent *bot*}"
   ns_param   map "GET  /* {user-agent *rawl*}"
   ns_param   map "GET  /* {user-agent *pider*}"
   ns_param   map "GET  /* {user-agent *baidu*}"
   ns_param   map "GET  /* {user-agent *Knowledge*}"
   ns_param   minthreads 2
   ns_param   maxthreads 2
   ns_param   poolratelimit 1000    ;# 0; limit rate for pool to this amount (KB/s); 0 means unlimited
   ns_param   rejectoverrun true
 }

.CE
Different pools can be configured with different parameters\&. It is for
example possible to specify the maximum outgoing traffic rate per for
every connection of the pool, or for the total of currently running
connections of a pool\&.
.SS "MONITOR THE MEMORY"
Memory considerations are paramount on heavily-used servers\&. Use the "ps
-leaf" on most systems to look at the "nsd" processes\&. Nearly all the memory
used by nsd should be in RSS (resident set size)\&. If the RSS size of
the nsd process
is less than 2/3 its SZ, then there is a good chance that your operating system
is thrashing, meaning it is spending more time managing memory than allowing
the system to work to its capacity\&. Some operating systems actually limit
the total RSS used by any one process\&. That 1-gigabyte machine might only
allow NaviServer to use 500 megabytes of core at any one time -- this is
especially the case with SGI servers\&.
.SS "BEWARE THE DATABASE"
Databases are a bottleneck\&. Do you use lots of simple queries that return
a hoard of data? Investigate using stored procedures or finely-tuned queries
so that you get only the data you actually want and make the database do
the work it was designed to do\&. Don't make your system spend its time putting
together those ns_getrow structures\&.
.SS "COLLECT METRICS AND USE THEM"
NaviServer has a built-in statistics-gathering system that collects data on
the caches, Tcl interps, threads, and other interesting data\&. We use these
at AOL to gather an immense amount of data on how the systems are working
and where they need to be improved (more cache, less cache, more memory,
more threads, etc)\&.  The module \fInsstats\fR can be dropped into any
running server to get a snapshot of how it is doing\&. The module is available
in the modules repository\&.
.SS "FURTHER PARAMETERS FOR TUNING"
A few further parameters might be used for tuning the performance of
NaviServer in a certain application specific context\&.
.PP
Administrators might consider allowing concurrent Tcl
interpreter create operations\&.  Versions of Tcl up to at least 8\&.5 are
known to crash in case two threads create interpreters at the same
time\&. These crashes were hard to reproduce, but serializing
interpreter creation helped\&. For Tcl versions starting with
Tcl 8\&.6, the default is set to true\&.
.CS


 ns_section ns/parameters {
    ns_param concurrentinterpcreate true  ;# default false
 }

.CE
Sample documented configuration files:
.IP \(bu
\fInsd-config\&.tcl\fR [https://bitbucket\&.org/naviserver/naviserver/raw/default/nsd-config\&.tcl]
.IP \(bu
\fIsimple-config\&.tcl\fR [https://bitbucket\&.org/naviserver/naviserver/raw/default/simple-config\&.tcl]
.IP \(bu
\fIopenacs-config\&.tcl\fR [https://bitbucket\&.org/naviserver/naviserver/raw/default/openacs-config\&.tcl]
.PP
.SH KEYWORDS
SO_REUSEPORT, TCP, TCP_FASTOPEN, configuration, connection thread pools, driver, module, nssock, nsssl, pagedir, performance, prebind, tuning
