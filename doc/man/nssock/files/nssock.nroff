'\"
'\" Generated from file 'nssock\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "nssock" n 4\&.99\&.19 nssock "NaviServer Modules"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
nssock \- Configuring HTTP socket communications
.SH DESCRIPTION
This module \fInssock\fR is used for the socket communication over HTTP\&. For
the communication over HTTPS, the module \fInsssl\fR is used, which shares
the configuration parameters presented here and adds additional parameters\&.
.PP
The module \fInssock\fR is typically loaded per server, e\&.g\&. for
\fIserver1\fR:
.CS


   ns_section ns/server/server1/modules
   ns_param   nssock   nssock\&.so

   ns_section ns/server/server1/module/nssock
   ns_param port 8000
   \&.\&.\&.

.CE
This amount of configuration is sufficient for many installations, which
do not want to run the server on port 80 (which requires as well root
permissions for starting)\&.
.SH CONFIGURATION
The module \fInssock\fR provides a rich set of configuration options, which
are important for large installation\&. However, all parameters are
equipped with sensible default values, such that none of these are required\&.
.TP
acceptsize
Maximum number of requests accepted at once (integer, defaults to
the value \fIbacklog\fR)
.TP
address
Space separated list of one or more IP addresses on
which the server should listen\&. If no address is given it obtain the
address from the host name (either the specified host name or the host
name reported by the OS)\&.
.TP
backlog
Maximum number of entries for waiting listen connections (integer,
default: 256)
.TP
bufsize
Maximum size in bytes (octets) for a single receive operation\&.
The value can be specified in memory units (kB, MB, GB, KiB, MiB, GiB);
default: 16kB
.TP
closewait
Timeout in seconds for close on socket to drain potential garbage if
no keep alive is performed\&. (integer, default: 2)
.TP
defaultserver
In a virtual server setup (when the driver module
is loaded globally), this parameter is required and refers to the
default server (the server, receiving all requests without host header
fields unspecified or with unspecified host header fields, not mapped
to a specific server)
.TP
deferaccept
TCP performance option; use TCP_FASTOPEN or TCP_DEFER_ACCEPT or
SO_ACCEPTFILTER, whatever is available in your operating system to
improve the performance of the initial TCP 3-way handshake\&. The
capabilities of the operating system are determined at compile time\&.
If you want to use TCP_FASTOPEN (introduced by Linux kernel 3\&.7\&.0),
you might have to activate this option in your kernel,
by using
.CS


   sudo sysctl net\&.ipv4\&.tcp_fastopen=1

.CE
.IP (boolean, default: false)
.TP
driverthreads
Number of driver threads threads\&. Specifying multiple driver threads
require the OS kernel to support SO_REUSEPORT and can improve the
performance for high load applications slightly\&. (integer, default: 1)
.sp
When multiple driver threads are configured, parameter "reuseport" is
automatically set to "true"\&.
.sp
Note: When using multiple driver threads on privileged ports,
one has to add "#" followed by the number of necessary bind operations
to the prebind address\&. Otherwise, prebind will bind to the address
only once, and only one driverthread can be used\&.
.TP
extraheaders
This parameter can be used to add extra response headers
for every response sent over this driver\&. The extraheaders
have the form for attribute/value pairs\&. This mechanism can be used
to implement for example HTTP Strict Transport Security in
nsssl, which uses the same parameter definition\&.
.TP
hostname
Hostname of the server, can be looked up automatically if not specified\&.
.TP
keepalivemaxdownloadsize
Don't allow keep-alive for downloads content larger than this size in
bytes; a value of 0 means that this feature is deactivated\&.
The value can be specified in memory units (kB, MB, GB, KiB, MiB, GiB);
(default: 0)
.TP
keepalivemaxuploadsize
Don't allow keep-alive for upload content larger than this size in
bytes; a value of 0 means that this feature is deactivated\&.
The value can be specified in memory units (kB, MB, GB, KiB, MiB, GiB);
(default: 0)
.TP
keepwait
Timeout in seconds for keep-alive\&. (integer, default: 5)
.TP
location
Provide a default for protocol://hostname[:port]\&. Useful
for virtual servers\&.
.TP
maxheaders
Maximum number of header lines (integer, 128)
.TP
maxinput
Maximum size in bytes (octets) for content loaded into the server,
such as upload of files\&.  The value can be specified in memory units
(kB, MB, GB, KiB, MiB, GiB); (default: 1MB)
.TP
maxline
Maximum size in bytes (octets) of a single header line (integer,
default: 8192)
.TP
maxqueuesize
Size of the queue of accepted requests waiting for a connection thread
(integer, default 1024)\&.
.TP
maxupload
Spool uploads to tmp-filesb for uploads larger than
this size in bytes in order to keep the memory footprint small\&. This
is especially important when large uploads are allowed via \fImaxinput\fR\&. If
this value is 0, this feature is deactivated\&. When spool-to-file is
activated, the minimal size is the size of \fIreadahead\fR
(see as well \fIspoolerthreads\fR)\&.
The value can be specified in memory units (kB, MB, GB, KiB, MiB, GiB);
(default: 0)
.TP
nodelay
TCP Performance option; use TCP_NODELAY to disable Nagle algorithm
(boolean, default: true)
.TP
port
Port, on which the server listens\&. When the port is specified as 0,
the module with its defined commands (such as \fBns_http\fR is
loaded, but the driver will not be listening on any port\&.
(integer, default: 80)
.TP
readahead
Maximum size in bytes (octets) for asynchronous read ahead operations\&.
The value can be specified in memory units (kB, MB, GB, KiB, MiB, GiB);
(default: value of \fIbufsize\fR)
.TP
recvwait
Timeout in seconds for receive operations\&. (integer, default: 30)
.TP
reuseport
When the parameter is set and SO_REUSEPORT is
supported by the os, NaviServer will allow multiple listen operations
on the same port (default: false)
.TP
sendwait
Timeout in seconds for send operations\&. (integer, default: 30)
.TP
spoolerthreads
Number of spooler threads used when content larger than
\fImaxupload\fR is received\&. When spoolerthreads are set to 0, the driver
threads handles upload-spooling as wellto memory; (integer, default: 0)
.TP
uploadpath
Directory for uploads, defaults to the setting of \fIns/parameter tmpdir\fR\&.
.TP
writerbufsize
Buffer size in bytes (octets) for writer threads\&.
The value can be specified in memory units (kB, MB, GB, KiB, MiB, GiB);
(default: 8kB)
.TP
writerratelimit
Limit the rate of the data transferred via writer threads\&.
The value can be specified in KB/s (kilobytes per second) and
can be refined per connection pool or per single connection
(default: 0, meaning unlimited)
.TP
writersize
Use writer threads for replies above this size\&.
The value can be specified in memory units (kB, MB, GB, KiB, MiB, GiB);
(default: 1MB)
.TP
writerstreaming
Use writer threads for streaming HTML output
(e\&.g\&. ns_write \&.\&.\&.)\&. (boolean, default: false)
.TP
writerthreads
Number of writer threads\&. (integer, default: 0)
.PP
.SH EXAMPLES
In the most simple case, one defines in a configuration file a single
server \fIs1\fR with single network driver \fInssock\fR\&. In the
example below the server is listening on port 8000\&.
.CS


   ns_section "ns/servers"
   ns_param    s1 "NaviServer Instance 1"

   ns_section "ns/server/s1/modules"
   ns_param    nssock        nssock\&.so

   ns_section "ns/server/s1/module/nssock"
   ns_param    address        0\&.0\&.0\&.0
   ns_param    port           8000

.CE
It is as well possible to define multiple servers in the same
configuration file (here \fIs1\fR and \fIs2\fR)\&. These servers
use the same driver \fInsock\fR but with different ports\&.
In this case it is sufficient to load the driver once\&.
.CS


   ns_section "ns/servers"
   ns_param    s1 "NaviServer Instance 1"
   ns_param    s2 "NaviServer Instance 1"

   ns_section "ns/server/s1/modules"
   ns_param    nssock        nssock\&.so

   ns_section "ns/server/s1/module/nssock"
   ns_param    address        0\&.0\&.0\&.0
   ns_param    port           8000

   ns_section "ns/server/s2/modules"
   ns_param    nssock        nssock\&.so

   ns_section "ns/server/s2/module/nssock"
   ns_param    address        0\&.0\&.0\&.0
   ns_param    port           8001

.CE
When the config file above is named e\&.g\&. two-server-config\&.tcl,
the tow servers can be started with a command line like:
.CS


/usr/local/ns/bin/nsd -u nsadmin -t two-server-config\&.tcl -f

.CE
When it is the goal to start only one of these servers, one can use
e\&.g\&. the following command:
.CS


/usr/local/ns/bin/nsd -u nsadmin -t two-server-config\&.tcl -f -server s2

.CE
Similarly, we can define a single server, listening on multiple
ports\&. In this case, one can load multiple instances of the driver
where each of the driver listens on a different port\&. In the following
example we name the different instances of the network driver
\fInssock1\fR and \fInssock2\fR\&.
.CS


   ns_section ns/server/s1/modules
   ns_param   nssock1   nssock\&.so
   ns_param   nssock2   nssock\&.so

   ns_section ns/server/server1/module/nssock1
   ns_param   port    8000

   ns_section ns/server/server1/module/nssock2
   ns_param   port    8001

.CE
Now assume, we want to define two web servers "s1" and "s2", which
should act as virtual servers\&. This means, we want to define one
network driver, which listens on a single port, but which should
direct requests to the server based on the content of the \fIhost\fR
header field\&.  Using such virtual servers is a common technique, where
e\&.g\&. for the same IP address, multiple DNS names are
registered\&. According to HTTP/1\&.1, clients have to send the host name
in the host header field to the server, which can behave differently
depending on contents of this field\&.
.PP
Assume for the IP address of the server the DNS names \fIfoo\&.com\fR,
\fIbar\&.com\fR and \fIbaz\&.com\fR are registered\&. We define server
"s1" and "s2" such that "s1" should receive requests from
\fIfoo\&.com\fR, and "s2" should receive requests from \fIbar\&.com\fR
and \fIbaz\&.com\fR\&. Servers "s1" and "s2" have different
\fIpagedir\fR definitions\&.
.PP
For definging virtual servers, the drivers (e\&.g\&. \fInssock\fR
or \fInsssl\fR have to be loaded globally (i\&.e\&. under
\fBns/module/nssock\fR\&.  For requests with missing/invalid host header
fields, we have to define a \fIdefaultserver\fR to handle such
requests in the global definition\&.
In the section \fBns/module/nssock/servers\fR we define the mapping
between the host names and the defined servers\&. Note that one can
define multiple DNS names also for a single server (here for \fBs2\fR)\&.
.CS


   #
   # Define two servers
   #
   ns_section ns/servers
   ns_param   s1      "Virtual Server s1"
   ns_param   s2      "Virtual Server s2 "

   ns_section ns/server/s1/fastpath
   ns_param   pagedir  /var/www/s1

   ns_section ns/server/s2/fastpath
   ns_param   pagedir  /var/www/s2

   #
   # Define nssock driver, directing requests to the virtual servers
   #
   ns_section ns/modules
   ns_param   nssock   nssock\&.so

   ns_section ns/module/nssock
   ns_param   port     8000
   ns_param   defaultserver s1

   #
   # Define the mapping between the DNS names and the servers\&.
   #
   ns_section ns/module/nssock/servers
   ns_param   s1      foo\&.com
   ns_param   s2      bar\&.com
   ns_param   s2      baz\&.com

.CE
More to come here\&.\&.\&.
.SH "SEE ALSO"
ns_http, ns_log, ns_write, nsssl
.SH KEYWORDS
SO_REUSEPORT, TCP, TCP_FASTOPEN, configuration, driver, module, nssock, nsssl, pagedir, performance, prebind, redirect, tuning