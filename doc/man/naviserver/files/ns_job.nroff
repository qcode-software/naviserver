'\"
'\" Generated from file 'ns_job\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "ns_job" n 4\&.99\&.19 naviserver "NaviServer Built-in Commands"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
ns_job \- Implement job queues and thread pools for evaluating Tcl scripts
.SH SYNOPSIS
\fBns_job cancel\fR \fIqueueId\fR \fIjobId\fR
.sp
\fBns_job configure\fR ?\fB-jobsperthread N\fR? ?\fB-timeout T\fR?
.sp
\fBns_job create\fR ?\fB-desc description\fR? \fIqueueId\fR ?\fImaxthreads\fR?
.sp
\fBns_job delete\fR \fIqueueId\fR
.sp
\fBns_job exists\fR \fIqueueId\fR \fIjobId\fR
.sp
\fBns_job genid\fR
.sp
\fBns_job joblist\fR \fIqueueId\fR
.sp
\fBns_job jobs\fR \fIqueueId\fR
.sp
\fBns_job queue\fR ?\fB-detached\fR? ?\fB-head\fR? ?\fB-jobid id\fR? \fIqueueId\fR \fIscript\fR
.sp
\fBns_job queuelist\fR
.sp
\fBns_job queues\fR
.sp
\fBns_job threadlist\fR
.sp
\fBns_job wait\fR ?\fB-timeout T\fR? \fIqueueId\fR \fIjobId\fR
.sp
\fBns_job waitany\fR ?\fB-timeout T\fR? \fIqueueId\fR
.sp
.BE
.SH DESCRIPTION
ns_job manages a thread pool and a set of named "queues"\&. Queues have a max number of
threads and when the current number of running thread reaches "max" then jobs are
queued\&.  New threads are created when there are less than maxthread number of idle threads\&.
.PP
This command provides a means for queueing Tcl scripts for evaluation by a pool of threads\&.
.SH COMMANDS
.PP
.TP
\fBns_job cancel\fR \fIqueueId\fR \fIjobId\fR
Remove the specified job from the queue\&. If the job is currently
running, then the job will be removed from the queue when it
completes\&. Returns 1 (true) if the job is currently running and
can not be cancelled\&.
.TP
\fBns_job configure\fR ?\fB-jobsperthread N\fR? ?\fB-timeout T\fR?
Configures jobs system, parameters are:
\fB-jobsperthread\fR defines how many jobs each thread can process and
then gracefully exit, performing a tcl-level cleanup\&. When the
parameter is 0, which means that the number of jobs has no influence
on cleaning up a thread)\&. The logic works the same way as
\fIconnsperthread\fR config parameter for connection threads to
help reduce memory consumption and cleanup Tcl resources\&.
.sp
The parameter \fB-timeout\fR defines maximum idle time for the
job worker thread\&. When the timeout expires, the thread exits like
when \fB-jobsperthread\fR runs out\&. When the \fB-timeout\fR is 0, the
there will be no timeout\&.
.sp
Without any arguments, the command just returns current
settings values in form of a dict\&.
.TP
\fBns_job create\fR ?\fB-desc description\fR? \fIqueueId\fR ?\fImaxthreads\fR?
Create a new job queue called queueId\&. If maxthreads is not specified,
then the default of 4 is used\&.
.TP
\fBns_job delete\fR \fIqueueId\fR
Request that the specified queue be deleted\&. The queue will only be
deleted when all jobs are removed\&.
.TP
\fBns_job exists\fR \fIqueueId\fR \fIjobId\fR
Returns 1 if such job is running the given queue, otherwise
returns 0\&.
.TP
\fBns_job genid\fR
Generate a new unique ID\&. This new ID can be used as the queue ID
without conflicting with any other queue ID\&.
.TP
\fBns_job joblist\fR \fIqueueId\fR
Returns a list the jobs in the specified queue\&. Every returned job entry
has the following fields:
.RS
.IP \(bu
\fIid\fR - Job's ID
.IP \(bu
\fIstate\fR - The job's state; either \fIscheduled\fR,
\fIrunning\fR, \fIdone\fR, or \fIunknown\fR\&.
.IP \(bu
\fIscript\fR - The Tcl commands executed be the job\&.
.IP \(bu
\fIresults\fR - If the job has completed, then this field will
contain the results\&. If the job is running or scheduled to run, then
this will contain the script\&.
.IP \(bu
\fIcode\fR - When the job is done, this will contain the return
code\&. Return codes are TCL_OK, TCL_ERROR, TCL_RETURN, TCL_BREAK,
TCL_CONTINUE\&.
.IP \(bu
\fItype\fR - The type of job\&.  A job's return value
is \fInondetached\fR or \fIdetached\fR\&.
.IP \(bu
\fIreq\fR - The job is required\&.  Return values are
\fInone\fR, \fIwait\fR,or \fIcancel\fR\&.
.IP \(bu
\fIthread\fR - The thread id of the job\&.
.IP \(bu
\fIstarttime\fR - The start time of the job\&.
.IP \(bu
\fIendtime\fR - The end time of the job\&.
.RE
.TP
\fBns_job jobs\fR \fIqueueId\fR
Return a list of the job IDs\&.
.TP
\fBns_job queue\fR ?\fB-detached\fR? ?\fB-head\fR? ?\fB-jobid id\fR? \fIqueueId\fR \fIscript\fR
Add a new job to the queue\&. When ?\fB-head\fR? is specified, add
the new jab to the front of the queue\&. If there are less than
maxthreads current running then the job will be started\&. If there are
maxthreads currently running then this new job will be queued\&.
.sp
If \fB-detached\fR, then the job will be cleaned up when it completes;
no wait will be necessary\&.
.sp
if \fB-jobid\fR is specified, it will be used as new job id instead
of auto-generated one\&. If such job already exists, an error will be
thrown\&.
.sp
if \fB-head\fR is specified, then new job will be inserted in the
beginning of the joblist, otherwise and by default every new job is
added to the end of the job list\&.
.sp
The new job's ID is returned\&.
.TP
\fBns_job queuelist\fR
Returns a list of the queues\&. A queue has the following fields:
.RS
.IP \(bu
\fIname\fR - Name of the queue\&.
.IP \(bu
\fIdesc\fR - Description of the queue\&.
.IP \(bu
\fImaxthreads\fR - Max number of threads to run for this queue\&.
.IP \(bu
\fInumrunning\fR - Number of currently running jobs in this queue\&.
.IP \(bu
\fIreq\fR - Some request fired; e\&.g\&. someone requested this
queue be deleted\&. Queue will not be deleted until all the jobs on the queue are removed\&.
.RE
.TP
\fBns_job queues\fR
Returns a list of the queue IDs\&.
.TP
\fBns_job threadlist\fR
Returns a list of the thread pool's fields\&.
.RS
.IP \(bu
\fImaxthreads\fR - Max number of threads for all the queues in the
thread pool\&.
.IP \(bu
\fInumthreads\fR - Number of allocated threads\&.
.IP \(bu
\fInumidle\fR - Number of currently idle threads\&.
.IP \(bu
\fIreq\fR - E\&.g\&. \fIstop\fR: The thread pools is being
stopped\&. This probably means that the server is shutting down\&.
.RE
.TP
\fBns_job wait\fR ?\fB-timeout T\fR? \fIqueueId\fR \fIjobId\fR
Wait for the specified queued or running job to finish\&.
\fBns_job wait\fR returns the results of the script\&.
.sp
An error is thrown if the specified timeout period (given in
seconds and fractions of seconds) is reached\&.
.TP
\fBns_job waitany\fR ?\fB-timeout T\fR? \fIqueueId\fR
Wait for any job on the queue complete\&.
.sp
An error is thrown if the specified timeout period (given in
seconds and fractions of seconds) is reached\&.
.PP
.SH EXAMPLES
.CS


   % ns_job create q1
   q1

   % set j [ns_job queue q1 {
      ns_log notice start
      ns_sleep 10
      ns_log notice stop
      set x "i am done"}]
   job0

   % ns_job wait q1 $j
   i am done

   % ns_job queue -detached q1 {ns_log notice "a detached job"}

.CE
.SH "SEE ALSO"
ns_schedule_proc, nsd
.SH KEYWORDS
background, global built-in