'\"
'\" Generated from file 'ns_hmac\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "ns_hmac" n 4\&.99\&.19 naviserver "NaviServer Built-in Commands"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
ns_hmac \- Returns a string containing a keyed-hash
message authentication code (HMAC)
.SH SYNOPSIS
\fBns_hmac string\fR ?\fB-digest \fIdigest\fR\fR? ?\fB-encoding \fIencoding\fR\fR? \fIkey\fR \fImessage\fR
.sp
\fBns_hmac file\fR ?\fB-digest \fIdigest\fR\fR? ?\fB-encoding \fIencoding\fR\fR? \fIkey\fR \fIfilename\fR \fIargs\fR
.sp
\fBns_hmac new\fR ?\fB-digest \fIdigest\fR\fR? \fB-key \fIkey\fR\fR
.sp
\fI$hmac_object\fR \fBadd\fR \fIdata\fR
.sp
\fI$hmac_object\fR \fBget\fR ?\fB-encoding \fIencoding\fR\fR?
.sp
\fI$hmac_object\fR \fBdestroy\fR
.sp
.BE
.SH DESCRIPTION These functions return a keyed-hash message authentication
code (HMAC) for the specified key and message, using the specified
message digest algorithm\&. An HMAC is a message authentication code of
a key (secret) with a message\&. It may be used to simultaneously verify
both the data integrity and the authentication of a message\&. For
details of HMAC, consult RFC 4231\&.
.PP
The provided commands provide a one-step interface and an
incremental interface, where the latter one can be used to incrementally
compute a HMAC e\&.g\&. by reading data from a file\&. This is especially important
for computing a HMAC on content which is too large to be kept in memory\&.
.PP
The listed commands are available in installations when
NaviServer is compiled with OpenSSL support and where the NSF package
is installed\&.
.SH COMMANDS
.TP
\fBns_hmac string\fR ?\fB-digest \fIdigest\fR\fR? ?\fB-encoding \fIencoding\fR\fR? \fIkey\fR \fImessage\fR
.sp
\fIkey\fR
Secret in the HMAC computation\&.
.sp
\fImessage\fR
Data from which the HMAC is to be computed\&.
.TP
\fBns_hmac file\fR ?\fB-digest \fIdigest\fR\fR? ?\fB-encoding \fIencoding\fR\fR? \fIkey\fR \fIfilename\fR \fIargs\fR
.sp
\fIkey\fR
Secret in the HMAC computation
.sp
\fIfilename\fR
Path of a file containing the data from which the HMAC
is to be computed\&. The file is read incrementally\&.
\fIargs\fR
Optional paths to other files to be processed\&.
The resulting HMAC is calculated cumulatively\&.
.TP
\fBns_hmac new\fR ?\fB-digest \fIdigest\fR\fR? \fB-key \fIkey\fR\fR
Create and return a new HMAC object for incremental operations\&.
The option \fB-digest\fR defaults to "sha256"
the option \fB-key\fR has to be always specified\&.
.TP
\fI$hmac_object\fR \fBadd\fR \fIdata\fR
Add \fIdata\fR incrementally to the HMAC object, which was created
previously with \fBns_hmac new\fR\&.
.TP
\fI$hmac_object\fR \fBget\fR ?\fB-encoding \fIencoding\fR\fR?
Return the current HMAC value from the HMAC object,
to which data was added previously with the method \fBadd\fR\&.
.TP
\fI$hmac_object\fR \fBdestroy\fR
Delete the HMAC object (used for incremental operations)\&.
.PP
.SH OPTIONS
.TP
\fB-digest\fR \fIdigest\fR
Digest algorithm for the checksum computation\&. The available
algorithms are implemented in OpenSSL\&. The current versions of OpenSSL
supports the following message digest algorithms: "blake2b512
blake2s256 md4 md5 md5-sha1 mdc2 ripemd160 sha1 sha224 sha256 sha3-224
sha3-256 sha3-384 sha3-512 sha384 sha512 sha512-224 sha512-256
shake128 shake256 sm3 whirlpool"\&. The default value is "sha256"
.TP
\fB-encoding\fR \fIencoding\fR
The option \fB-encoding \fIencoding\fR\fR specifies the
output encoding used for the resulting values of the dict\&.
Possible encodings are \fIhex\fR, \fIbase64url\fR,
\fIbase64\fR, or \fIbinary\fR\&. Default is \fIhex\fR\&.
.PP
.CS



  nscp 2> ns_hmac string -digest sha256 "Jefe" "what do ya want for nothing?"
  5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843


.CE
.SH "SEE ALSO"
ns_crypt, ns_crypto, ns_hotp, ns_md, ns_md5, ns_rand, ns_sha, ns_sha1, ns_totp, nsd
.SH KEYWORDS
HMAC, crypto, encoding, nsf