'\"
'\" Generated from file 'ns_log\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "ns_log" n 4\&.99\&.19 naviserver "NaviServer Built-in Commands"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
ns_log \- Global server error log
.SH SYNOPSIS
\fBns_log\fR \fIseverity-level\fR \fImessage\fR ?\fImessage \&.\&.\&.\fR?
.sp
\fBns_logctl\fR \fBcount\fR
.sp
\fBns_logctl\fR \fBflush\fR
.sp
\fBns_logctl\fR \fBget\fR
.sp
\fBns_logctl\fR \fBhold\fR
.sp
\fBns_logctl\fR \fBpeek\fR
.sp
\fBns_logctl\fR \fBrelease\fR
.sp
\fBns_logctl\fR \fBseverities\fR
.sp
\fBns_logctl\fR \fBseverity\fR \fIseverity-level\fR ?\fB-color\fR \fIcolor\fR? ?\fB-intensity\fR \fIintensity\fR? ?\fIbool\fR?
.sp
\fBns_logctl\fR \fBstats\fR
.sp
\fBns_logctl\fR \fBtruncate\fR \fIcount\fR
.sp
\fBns_logctl\fR \fBregister\fR \fIscript\fR ?\fIscript-args \&.\&.\&.\fR?
.sp
\fBns_logctl\fR \fBunregister\fR \fIhandle\fR
.sp
\fBns_logroll\fR
.sp
.BE
.SH DESCRIPTION
The running NaviServer process opens a single log file into which all
\fINotice\fR, \fIError\fR etc\&. messages are logged, whether originating
from the server itself or form Tcl scripts and ADP pages\&.
.PP
The built-in set of severity levels can be extended\&. Logging can be
enabled/disabled at run-time per-severity level\&. Custom filters can be added to
process log messages\&.
.SH COMMANDS
.TP
\fBns_log\fR \fIseverity-level\fR \fImessage\fR ?\fImessage \&.\&.\&.\fR?
Write a message to the error log file if the given
\fIseverity-level\fR is enabled (see \fBns_logctl\fR)\&.
The \fImessage\fR
arguments are concatenated with connecting spaces\&. Note that this only
queues messages for the log and does not actually guarantee that the
message is immediately written to the log\&. The server can be
instructed to queue messages in the cache via \fBns_logctl hold\fR\&.
.sp
The following are the predefined values of \fIseverity-level\fR\&.
.RS
.TP
Notice
Something interesting occurred\&.  A \fInotice\fR shows
typically a state change, start/end of some jobs, etc\&.  This level can
be as well used of temporary debugging, but such messages should be
removed after some time\&.
.TP
Warning
Something that could mean something bad occurred\&.  A
\fIwarning\fR indicates an unexpected situation, which requires attention
of a developer and a corrective measure in the not-to-distant
future\&. Usage of deprecated code or code using not following the
engineering guidelines are of such type\&.
.TP
Error
Something bad occurred\&.  An \fIerror\fR is a malfunction, that
must be investigated by a developer\&. An error is an unhandled
exception\&.  The error\&.log file should be free of errors\&.
.TP
Fatal
Something extremely bad occurred\&. The server will shut down after
logging this message\&.
.TP
Bug
Something occurred that implies that there is a bug in the code\&.
This condition could never happen when the code is behaving correctly\&.
.TP
Debug
General debugging\&.
.TP
Debug(access)
Mirror access log entries in system log\&.
.TP
Debug(cgi)
Debugging for the \fBnscgi\fR module\&.
.TP
Debug(connchan)
Debugging for \fBns_connchan\fR interactions\&.
.TP
Debug(ns:driver)
Debugging for driver (low-level network IO)\&.
.TP
Debug(nsproxy)
Debugging for \fBnsproxy\fR module\&.
.TP
Debug(request)
Debugging for request live cycle\&.
.TP
Debug(sql)
Debugging for SQL (\fBnsdb\fR module)\&.
.TP
Debug(task)
Debugging for task interface (e\&.g\&. \fBns_http\fR)\&.
.TP
Debug(urlspace)
Debugging for \fBns_urlspace\fR interactions\&.
.TP
Dev
This logging level is typically just activated during development
to introspect the behavior of new code\&.
Such logging statements are typically removed once development has
reached a stable point\&.
.RE
.TP
\fBns_logctl\fR \fBcount\fR
Returns a count of buffered messages for the current thread\&. The
message buffering can be turned on subcommand  \fBhold\fR\&.
.TP
\fBns_logctl\fR \fBflush\fR
.TP
\fBns_logctl\fR \fBget\fR
Return all buffered log messages, removing them from the buffer without writing them
to the log file\&.
Write buffered log messages from the current thread to the log file\&. Do not
disable buffering enabled by \fIhold\fR\&.
.TP
\fBns_logctl\fR \fBhold\fR
Buffer log messages originating in the current thread indefinitely\&. Log messages
are no longer written directly to the server log\&. Use the subcommand
\fBrelease\fR to disable buffering\&.
.TP
\fBns_logctl\fR \fBpeek\fR
Return a copy of any buffered log messages for the current thread\&.
.TP
\fBns_logctl\fR \fBrelease\fR
Write buffered log messages from the current thread to the log file and disable
buffering\&. Future log messages will not be buffered\&.
.TP
\fBns_logctl\fR \fBseverities\fR
Return a list of available severity-levels\&. The result includes the 7 predefined
levels and those created with \fBns_logctl\fR or via C code\&.
.TP
\fBns_logctl\fR \fBseverity\fR \fIseverity-level\fR ?\fB-color\fR \fIcolor\fR? ?\fB-intensity\fR \fIintensity\fR? ?\fIbool\fR?
Return true if the given \fIseverity-level\fR is enabled, false if it is
disabled\&. If \fIbool\fR is given it enables/disables the given
\fIseverity-level\fR for all future log messages, server-wide\&.
The options \fB-color\fR and \fB-intensity\fR can be used
to set the coloring when the logfile is colorized\&. The color can be
\fIblack\fR, \fIred\fR, \fIgreen\fR, \fIyellow\fR,
\fIblue\fR, \fImagenta\fR, \fIcyan\fR, \fIgray\fR,
or \fIdefault\fR\&. Intensity can be \fInormal\fR or \fIbright\fR\&.
The logfile colorization can be controlled by setting
\fIlogcolorize\fR in section \fIns/parameters\fR of the
config file\&.
.sp
If \fIseverity-level\fR does not already exist and more arguments arg given, then the
new severity is created\&. Future calls to \fBns_log\fR may use new \fIseverity-level\fR\&.
.TP
\fBns_logctl\fR \fBstats\fR
Return statistics from calls to \fBns_log\fR by severity-level\&.
.TP
\fBns_logctl\fR \fBtruncate\fR \fIcount\fR
Discard this thread's buffered messages, leaving \fIcount\fR untouched\&.
.TP
\fBns_logctl\fR \fBregister\fR \fIscript\fR ?\fIscript-args \&.\&.\&.\fR?
Register a log filter \fIscript\fR with the given \fIscript-args\fR where
\fIscript\fR should have the signature:
\fIscript\fR \fIseverity\fR \fItimestamp\fR \fImessage\fR ?\fIscript-args \&.\&.\&.\fR?\&.
A \fIhandle\fR will be returned which can be used to unregister the filter script\&.
.TP
\fBns_logctl\fR \fBunregister\fR \fIhandle\fR
Unregister the previously registered log filter script identified by
\fIhandle\fR\&.
.TP
\fBns_logroll\fR
Roll the server error log\&. The behavior is independent from the
configuration parameter \fIlogroll\fR\&. See \fBns_rollfile\fR for
details of log rolling\&.
.PP
.SH CONFIGURATION
The error log is configured globally for the whole server process\&.
.CS


\fBns_section\fR ns/parameters
\fBns_param\fR   \&.\&.\&.

.CE
The following are valid configuration parameters:
.TP
logcolorize
If true, log entries will be colorized using ANSI color codes
Default: false\&.
.TP
logdebug
If true messages of severity-level \fIDebug\fR are enabled\&.
Default: false\&.
.TP
logdev
If true, messages of severity-level \fIDev\fR are enabled\&.
Default: false\&.
.TP
logexpanded
If true, an extra newline is added to each log entry\&.
Default: false\&.
.TP
logmaxbackup
The number of old error log files to keep around if log rolling is enabled\&.
Default: 10\&.
.TP
lognotice
If true, messages of severity-level \fINotice\fR are enabled\&.
Default: true\&.
.TP
logprefixcolor
When logcolorize is true, provide a color for the timestamp prefix\&.
Possible values are:
\fIblack red green yellow blue magenta cyan gray default\fR\&.
Default: green\&.
.TP
logprefixintensity
When logcolorize is true, provide a the intensity for the timestamp prefix\&.
Possible values are: \fInormal bright\fR\&.
Default: normal\&.
.TP
logroll
If true, the log file will be rolled when the server receives a SIGHUP signal\&.
Default: true\&.
.TP
logrollfmt
When specified, use a timestamp based logroll format based on the
specified time format (e\&.g\&. %Y-%m-%d)\&. The timestamp is appended
to the name\&. When within the granularity two log files are generated
these are numbered\&.
.TP
serverlog
Path to error log file\&. If the path is not fully qualified it is assumed to be
relative to the server home directory ([\fBns_info\fR home])\&. All the components of
the path must exist\&. The server will fail to start if the log file cannot be
opened\&.
Default: logs/nsd\&.log
.TP
logusec
If true, log entries will have timestamps with microsecond (usec) resolution\&.
Default: false\&.
.TP
logusecdiff
If true, show time difference since last log entry with microsecond (usec)
resolution\&. This option is useful for determine latencies with minimal effort\&.
Default: false\&.
.PP
.SH EXAMPLES
The example below is a snippet taken from sample-config\&.tcl, which is
included in the NaviServer distribution\&.
.CS


ns_section ns/parameters {
    # \&.\&.\&.

    # Provide name for main server log file:
    ns_param	serverlog       ${homedir}/logs/error\&.log

    #
    # Configuration of serverlog
    #
    # Rolling of logfile:

    ns_param	logroll		on
    ns_param	logmaxbackup	100      ;# (default: 10)
    ns_param	logrollfmt	%Y-%m-%d ;# timestamp format appended to serverlog file name when rolled

    #
    # Format of log entries:

    ns_param	logusec         true     ;# add timestamps in microsecond (usec) resolution (default: false)
    ns_param	logusecdiff     true     ;# add timestamp diffs since in microsecond (usec) resolution (default: false)
    ns_param	logcolorize	true     ;# colorize log file with ANSI colors (default: false)
    ns_param	logprefixcolor	green    ;# black, red, green, yellow, blue, magenta, cyan, gray, default
    ns_param	logprefixintensity normal;# bright or normal

    #
    # Severities to be logged (can also be controlled at runtime via ns_logctl):

    ns_param	logdebug	false    ;# debug messages
    ns_param	logdev		false    ;# development message
    ns_param    lognotice       true     ;# informational messages

    # \&.\&.\&.
}

.CE
The logging behavior can be tailored at startup or at runtime as well
via \fBns_logctl\fR commands, as show below\&.
.CS


% \fBns_log\fR notice "Hello World!"
[21/May/1974:15:30:00][12257\&.40348b90][-command-] Notice: Hello World!

% \fBns_log\fR notice Hello World!
[21/May/1974:15:30:01][12257\&.40348b90][-command-] Notice: Hello World!

.CE
Enable debug logging while the server is running\&.
.CS


nscp:1> \fBns_log\fR debug testing\&.\&.\&.

nscp:2> \fBns_logctl\fR severity debug
0
nscp:3> \fBns_logctl\fR severity debug -color green true
1
nscp:4> \fBns_log\fR debug testing\&.\&.\&.
[01/April/1984:11:11:59][12257\&.40348b90][-nscp:1-] testing\&.\&.\&.

.CE
Report log messages at the end of an ADP page, as well as log them to the error
log file\&.
.CS


<h1>An ADP Page</h1>

<%
  \fBns_logctl\fR hold
  # \&.\&.\&. do some stuff here \&.\&.\&.
%>

\&.\&.\&.

<%
  if {[\fBns_logctl\fR count] > 0} {
      \fBns_adp_append\fR "Log messages:"
      \fBns_adp_append\fR "<pre>[\fBns_logctl\fR peek]</pre>"
  }
  \fBns_logctl\fR release
%>

.CE
Create a new severity-level\&.
.CS


nscp:1> \fBns_logctl\fR severities
Notice Warning Error Fatal Bug Debug Dev

nscp:2> \fBns_log\fR my:debug "a debug message"
unknown severity: "my:debug": should be one of: Notice Warning Error Fatal Bug Debug Dev

nscp:3> \fBns_logctl\fR severity my:debug off
0

nscp:4> \fBns_log\fR my:debug "a debug message"

nscp:5> \fBns_logctl\fR severity my:debug on
0

nscp:6> \fBns_log\fR my:debug "a debug message"
[22/Nov/1963:13:25:00][1899\&.40349b90][-nscp:1-] my:debug: a debug message

.CE
.SH "SEE ALSO"
ns_accesslog, ns_asynclogfile, ns_connchan, ns_http, ns_info, ns_rollfile
.SH KEYWORDS
configuration, error, global built-in, log, nscgi, nsdb, nsproxy, path