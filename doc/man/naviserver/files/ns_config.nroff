'\"
'\" Generated from file 'ns_config\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "ns_config" n 4\&.99\&.19 naviserver "NaviServer Built-In Commands"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
ns_config \- Configuration parameters
.SH SYNOPSIS
\fBns_config\fR ?\fB-bool\fR | \fB-int\fR? ?\fB-min \fIminint\fR\fR? ?\fB-max \fImaxint\fR\fR? ?\fB-exact\fR? ?\fB-set\fR? \fIsection\fR \fIkey\fR ?\fIdefault\fR?
.sp
\fBns_configsection\fR \fIsection\fR
.sp
\fBns_configsections\fR
.sp
\fBns_section\fR \fIsection\fR
.sp
\fBns_param\fR \fIkey\fR \fIvalue\fR
.sp
.BE
.SH DESCRIPTION
The NaviServer process reads a Tcl configuration file (specified with the
\fI-t\fR command line option) during early start-up\&. After it has changed to the
correct \fIuser id\fR and \fIgroup id\fR, bound to port 80, and possibly
performed a \fIchroot\fR, it evaluates the configuration file as a Tcl script\&.
.PP
The configuration file may contain standard Tcl and NaviServer commands, plus
the \fBns_section\fR and \fBns_param\fR commands used to define a configuration
structure\&. Parameters are key-value pairs and are grouped into sections\&. Section
names must be unique -- parameter keys may be duplicates\&.
.PP
The configuration is global and read-only\&. Parameters may be retrieved at
run-time using \fBns_config\fR, although usually configuration parameters are
used by Tcl library files at start-up\&.
.SH COMMANDS
The following commands are available at run-time to retrieve information from the
configuration file\&.
.TP
\fBns_config\fR ?\fB-bool\fR | \fB-int\fR? ?\fB-min \fIminint\fR\fR? ?\fB-max \fImaxint\fR\fR? ?\fB-exact\fR? ?\fB-set\fR? \fIsection\fR \fIkey\fR ?\fIdefault\fR?
Returns the parameter value associated with the given \fIsection\fR and \fIkey\fR from
the configuration file\&.  If the parameter is not found then the optional \fIdefault\fR
is returned, otherwise the empty string is returned\&.
.sp
Parameter keys are matched case-insensitively\&. The first parameter is returned
if duplicate keys are present\&.
.RS
.TP
\fB-bool\fR
Specifies that the parameter should be a valid boolean value, using any form
understood by \fBstring is boolean\fR\&. An error will be thrown if this is not
the case, unless a valid \fIdefault\fR is given\&.
.TP
\fB-int\fR
Specifies that the parameter should be a valid integer value, using any form
understood by \fBstring is integer\fR\&. An error will be thrown is this is not
the case, unless a valid \fIdefault\fR is given\&.
.TP
\fB-min\fR minint
Specifies the lower bound for an integer parameter value\&. An error will be thrown
if the parameter < \fIminint\fR, unless a valid default value is given\&.
.TP
\fB-max\fR maxint
Specifies the upper bound for an integer parameter value\&. An error will be thrown
if the parameter > \fImaxint\fR, unless a valid default value is given\&.
.TP
\fB-exact\fR
Specifies case-sensitive parameter key matching\&. Not recommended\&.
.TP
\fB-set\fR
Specifies that the parameter is set to the default value,
when this parameter was not provided earlier\&. When this is done
the default is later retrievable via ns_config\&.
.RE
.TP
\fBns_configsection\fR \fIsection\fR
Return the \fBns_set\fR which contains all the parameter key-value pairs for the
specified \fIsection\fR of the configuration file\&.  If there is no matching section,
an empty string is returned\&.
.TP
\fBns_configsections\fR
Return a list of \fBns_set\fRs, one for every section in the configuration
file\&.  The sets contain the key-value pairs for the configuration section that
the set represents\&. The \fBns_set\fR name contains the \fIsection\fR\&.
.PP
.SH "CONFIGURATION FILE COMMANDS"
The following commands are only available within the Tcl configuration file,
evaluated once at server start-up\&.
.TP
\fBns_section\fR \fIsection\fR
Begin a new section\&. Following calls to \fBns_param\fR place their
parameters in this section, until another call to \fBns_section\fR with a
different \fIsection\fR\&.
.sp
Multiple calls to \fBns_section\fR with the same \fIsection\fR name may be used
to build up a section in pieces\&.
.TP
\fBns_param\fR \fIkey\fR \fIvalue\fR
Set the given \fIkey\fR and \fIvalue\fR in the currently active  section\&. Keys
need not be unique\&. Key matching is case-insensitive by default\&.
.PP
.SH EXAMPLES
The following example shows how to set parameter values for the \fIfoo\fR
module\&.
.CS


\fBns_section\fR "ns/server/server1/modules/foo"
\fBns_param\fR   enabled   true
\fBns_param\fR   map       /some/url
\fBns_param\fR   map       /some-other/url

.CE
The following example shows how to read configuration parameters for the
\fIfoo\fR module\&. The \fBns_config\fR command is used to check for a boolean
\fIenabled\fR parameter -- it defaults to false\&. If enabled, the parameters in
that section are iterated over and all the entries with the key \fImap\fR are
used to register a handler for the \fIurl\fR, which is the parameter value\&.
.CS


set path ns/server/[\fBns_info\fR server]/modules/foo

if {[\fBns_config\fR -bool $path enabled false]} {

    set section [\fBns_configsection\fR $path]

    foreach {key value} [\fBns_set\fR array $section] {
        if {$key eq "map"} {
            \fBns_register_proc\fR GET $value foo_module_handler
        }
    }
}

.CE
The following example prints out all configuration parameters in all sections of
the configuration file\&.
.CS


\fBns_register_proc\fR GET /config-print {

    set config ""

    foreach section [\fBns_configsections\fR] {

        append config "section: [\fBns_set\fR name $section]\\n"

        foreach {key value} [\fBns_set\fR array $section] {
            append config "$key: $value\\n"
        }
    }

    \fBns_return\fR 200 text/plain $config
}

.CE
.SH "SEE ALSO"
ns_env, ns_info, ns_set
.SH KEYWORDS
configuration, global built-in, interp, parameter, startup