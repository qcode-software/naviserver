'\"
'\" Generated from file 'ns_adp_register\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "ns_adp_register" n 4\&.99\&.23 naviserver "NaviServer Built-in Commands"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
ns_adp_register \- Creating custom ADP tags
.SH SYNOPSIS
\fBns_adp_registeradp\fR \fItag\fR ?\fIendtag\fR? \fIadpstring\fR
.sp
\fBns_adp_registerproc\fR \fItag\fR ?\fIendtag\fR? \fIproc\fR
.sp
\fBns_adp_registerscript\fR \fItag\fR ?\fIendtag\fR? \fIscript\fR
.sp
.BE
.SH DESCRIPTION
These commands enable definition of HTML tags within an ADP file
which are expanded and evaluated by the server before returning output
to the client\&. Tags are defined as either a single tag with
options, e\&.g\&.,  <mytag a=b c=d>  or as an
opening/closing tag pair, e\&.g\&.,  <mytag> text
</mytag> \&. This approach is an alternative to
direct calls via the  <% script %>  syntax as
described in the  ns_adp  man page\&.
.SH COMMANDS
.TP
\fBns_adp_registeradp\fR \fItag\fR ?\fIendtag\fR? \fIadpstring\fR
This command registers an ADP
code fragment to be invoked when the specified tag is
encountered while parsing an ADP\&. The  \fItag\fR  argument
specifies the tag that will trigger invocation of the ADP
fragment, which is specified by the  \fIadpstring\fR  argument\&.
.sp
If the  endtag  argument is specified, then the ADP fragment
will be invoked with two arguments: The first will be the
enclosed content, and the second will be the name of an
ns_set with any attributes specified in the tag\&. If no
endtag  argument is specified, the ADP fragment will
only be passed the name of the ns_set\&. The arguments may be
retrieved using  ns_adp_bindargs  or  ns_adp_argc
and  ns_adp_argv \&.
.sp
When the ADP fragment is invoked, its result is inserted in the output
instead of the tag (or, if the  endtag  was specified,
in place of the tag, end tag, and the enclosed content)\&.
.sp
Note: Care must be taken when using this function from inside an ADP, because
the ADP string  is likely to contain script delimiters
( <% \&.\&.\&. %> ) which will prematurely terminate
script fragments\&. It is probably easier to restrict use of
this function to \&.tcl files\&.
.CS


 ns_adp_registeradp example example\&.adp

 ns_adp_registeradp printdate {
      The current date is: <% ns_adp_puts [ns_httptime [ns_time]] %>
 }

.CE
.IP
Once defined, typically in a startup script, you could simple include  <example> or
<printdate> in ADP pages\&.
.TP
\fBns_adp_registerproc\fR \fItag\fR ?\fIendtag\fR? \fIproc\fR
This command registers a Tcl procedure to be evaluated when the given
tag is encountered\&. The tag argument specifies the tag that will
trigger a call to the procedure specified by the proc argument\&.
.sp
The procedure will be called with a variable number of arguments,
one for each of the attributes provided in the tag\&. If the  endtag
argument is specified, the procedure will also receive a
final argument with the contents of the text enclosed
between the tags\&. No evaluation of the content will be
performed, it will be passed as a single text block\&.
.sp
When the procedure is invoked, its result is inserted in the
output instead of the tag (or, if the  endtag  was specified, in place of
the tag, end tag, and the enclosed content)\&.
.TP
\fBns_adp_registerscript\fR \fItag\fR ?\fIendtag\fR? \fIscript\fR
This command registers a Tcl script to be evaluated when the
given tag is encountered\&. The  tag  argument specifies the tag that
will trigger evaluation of the script specified by the
script  argument\&.
.sp
If the  endtag  argument is specified, then the script will be
modified with two arguments appended: The first will be the
enclosed content, and the second will be the name of an
ns_set with any attributes specified in the tag\&. If no
endtag  argument is specified, the script will be
modified with just the name of the ns_set appended\&.
.sp
When the script is evaluated, its result is inserted in the output
instead of the tag (or, if the  endtag  was specified, in place of
the tag, end tag, and the enclosed content)\&.
.sp
The following is a simple way of handling conditional content in ADPs:
.CS


 proc remember {input tagset} {

   set tagname [ns_set iget $tagset name]
   if {[string match "" $tagname]} {
     set ::_adp_memory($tagname) $input
     return ""
   } else {
     return $input
   }
 }

 proc recall {name} {

   if {[info exists ::_adp_memory($name)]} {
     set parsecommand [list ns_adp_parse -string]
     lappend parsecommand $::_adp_memory($name)
     ns_puts -nonewline [uplevel $parsecommand]
   } else {
     ns_log Error "[ns_adp_argv 0]: Unable to recall"
   }
 }

.CE
.IP
If the preceding Tcl has been executed (perhaps during server startup),
then the following ADP fragment displays the results of a
database query in a table, or shows "No rows in
result\&." if there are no rows:
.CS


 <%
  set rows {}
  set db [ns_db gethandle]
  ns_db exec "select somecolumn from sometable"
  set row [ns_db bindargs $db]
  while {[ns_db getrow $db $row]}  {
      lappend rows [ns_set get $row "somecolumn"]
  }
  ns_db releasehandle $db
 %>

 <remember name="has-rows_header"> <table> </remember>
 <remember name="hasrows_rows"> <tr><td><%=$column%></td></tr> </remember>
 <remember name="hasrows_footer"> </table> </remember>
 No rows in result\&.
 <remember name="norows">

 <%
  if {[llength $rows]  >  0}  {
    recall  "hasrows_header"
    foreach row $rows {
      set column $row
      recall "hasrows_rows"
    }
    recall "hasrows_footer"
  } else {
    recall "norows"
  }
 %>

.CE
.PP
.SH "SEE ALSO"
ns_adp, ns_adp_include
.SH KEYWORDS
ADP, server built-in
