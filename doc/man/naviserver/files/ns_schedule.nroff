'\"
'\" Generated from file 'ns_schedule\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "ns_schedule" n 4\&.99\&.19 naviserver "NaviServer Built-in Commands"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
ns_schedule \- Scheduling Tcl scripts
.SH SYNOPSIS
\fBns_schedule_proc\fR ?\fB-once\fR? ?\fB-thread\fR? \fIinterval\fR \fIscript\fR
.sp
\fBns_schedule_weekly\fR ?\fB-once\fR? ?\fB-thread\fR? \fIday\fR \fIhour\fR \fIminute\fR \fIscript\fR
.sp
\fBns_schedule_daily\fR ?\fB-once\fR? ?\fB-thread\fR? \fIhour\fR \fIminute\fR \fIscript\fR
.sp
\fBns_pause\fR \fIid\fR
.sp
\fBns_resume\fR \fIid\fR
.sp
\fBns_after\fR \fIseconds\fR \fIscript\fR
.sp
\fBns_unschedule_proc\fR \fIid\fR
.sp
.BE
.SH DESCRIPTION
These commands perform scheduling of Tcl scripts at various intervals\&. Script will run in
separate thread as background procedures\&. This functionality is similar to Unix cron\&.
.SH COMMANDS
.TP
\fBns_schedule_proc\fR ?\fB-once\fR? ?\fB-thread\fR? \fIinterval\fR \fIscript\fR
This command schedules a script to be run after a certain number of seconds\&.
Returns the ID of the newly scheduled script\&.  If \fB-once\fR is specified, then the
script is run once and then unscheduled, otherwise it will continue to run every
interval seconds\&.  If \fB-thread\fR is specified, then the script will be run in its
own thread, otherwise it will run in the scheduler's thread\&.  If the script is
long-running, this may interfere with the running of other scheduled scripts,
so long-running scripts should be run in their own threads\&.
.CS


   % set id [[ns_schedule_proc -once 60 { ns_log notice "this should run in 60 seconds" }]]
   123

.CE
.TP
\fBns_schedule_weekly\fR ?\fB-once\fR? ?\fB-thread\fR? \fIday\fR \fIhour\fR \fIminute\fR \fIscript\fR
This command schedules a script to be run on a certain day of the week at a
certain hour and minute of that day\&.  Returns the ID of the newly scheduled script\&.
The week starts on Sunday as day zero and runs to Saturday as day six\&.
If \fB-once\fR is
specified, then the script is run once and then unscheduled, otherwise it will continue
to run every week on that day at that time\&.  If \fB-thread\fR
is specified, then the script
will be run in its own thread, otherwise it will run in the scheduler's thread\&.  If
the script is long-running, this may interfere with the running of other scheduled
scripts, so long-running scripts should be run in their own threads\&.
NOTE: day, hour and minute are specified in local time\&.  Beware of Daylight Savings Time
shifts affecting the time of day when the script will execute\&.
.CS


   % set id [[ns_schedule_weekly -once 2 5 35 { ns_log notice "It is now Tuesday at 5:35 AM\&." }]]
   123

.CE
.CS


   % ns_unschedule_proc $id

.CE
.TP
\fBns_schedule_daily\fR ?\fB-once\fR? ?\fB-thread\fR? \fIhour\fR \fIminute\fR \fIscript\fR
This command schedules a script to be run at a certain hour and minute of the day\&.
Returns the ID of the newly scheduled script\&.  If \fB-once\fR is specified, then the script
is run once and then unscheduled, otherwise it will continue to run every day at that
time\&.  If \fB-thread\fR is specified, then the script will be run in its own thread,
otherwise it will run in the scheduler's thread\&.  If the script is long-running,
this may interfere with the running of other scheduled scripts, so long-running scripts should
be run in their own threads\&.
NOTE: hour and minute are specified in local time\&.  Beware of Daylight Savings Time
shifts affecting the time of day when the script will execute\&.
.CS


   % set id [[ns_schedule_daily -once 5 35 { ns_log notice "It is now 5:35 AM\&." }]]
   123

.CE
.CS


   % ns_unschedule_proc $id

.CE
.TP
\fBns_pause\fR \fIid\fR
Pause a scheduled script from running\&. This command pauses a scheduled
script from running at its next scheduled time\&.  Returns 1 on success,
0 on failure\&.
.CS


   % set id [[ns_schedule_daily 1 0 { ns_log notice "One AM and all is well\&.  *gong*" }]]
   19

   % ns_pause $id
   1

.CE
.TP
\fBns_resume\fR \fIid\fR
Resume a previously paused scheduled script\&. This command resumes
scheduling of a previously paused script via \fBns_pause\fR\&.  Returns 1
on success, 0 on failure\&.
.CS


   % set id [[ns_schedule_daily 1 0 { ns_log notice "One AM and all is well\&.  *gong*" }]]
   19

   % ns_pause $id
   1

   % ns_resume $id
   1

.CE
.TP
\fBns_after\fR \fIseconds\fR \fIscript\fR
Execute a command after a time delay\&.
This command executes a script in the background after a number of seconds time delay\&.
It does this by scheduling a one-shot event in the scheduler\&.  Uncaught script errors will
go to the server log\&.  It returns an ID which can be used to unschedule the execution
of the script (if seconds hasn't elapsed) using \fBns_unschedule_proc\fR\&.
.sp
The script when executed will run in the scheduler thread\&.  If the script is long-running,
this may interfere with the execution of other scheduled scripts, in which
case \fBns_schedule_proc\fR should be used instead of ns_after\&.
.CS


   % ns_after 5 { ns_log notice "ns_after script executed" }
   123

.CE
.TP
\fBns_unschedule_proc\fR \fIid\fR
Unschedules a  previous  scheduled  script\&.
.sp
NOTE: Current  behavior  is  to silently return without error if the id
doesn't represent a currently scheduled ID\&.
.CS


   % ns_unschedule_proc $id

.CE
.PP
.SH LOGGING
When entries are written from scheduled procedures to the server log
via \fBns_log\fR these entries can be identified by the string
.CS


\&.\&.\&.[-sched:THREAD_NR:COUNTER_IN_THREAD:SCHED_ID-]\&.\&.\&.

.CE
where THREAD_NR refers to the nth thread, COUNTER_IN_THREAD is the nth
job in this thread and the SCHED_ID refers to the ID of the scheduled
script as returned by the ns_schedule* commands\&.
.SH "SEE ALSO"
ns_job, ns_log, nsd
.SH KEYWORDS
background, global built-in, schedule