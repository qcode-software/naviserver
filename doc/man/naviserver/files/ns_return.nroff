'\"
'\" Generated from file 'ns_return\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "ns_return" n 4\&.99\&.19 naviserver "NaviServer Built-in Commands"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
ns_return \- Return a complete HTTP response
.SH SYNOPSIS
\fBns_return\fR ?\fB-binary\fR? \fIstatus\fR \fImime-type\fR \fIbody\fR
.sp
\fBns_returnfile\fR \fIstatus\fR \fImime-type\fR \fIfilepath\fR
.sp
\fBns_returnfp\fR \fIstatus\fR \fImime-type\fR \fIchannel\fR \fIlength\fR
.sp
\fBns_respond\fR ?\fB-status \fIstatus\fR\fR? ?\fB-type \fImime-type\fR\fR? ?\fB-length \fIint\fR\fR? ?\fB-headers \fIsetid\fR\fR? ?\fB-string \fIbody\fR\fR? ?\fB-binary \fIbody\fR\fR? ?\fB-file \fIfilepath\fR\fR? ?\fB-fileid \fIchannel\fR\fR?
.sp
.BE
.SH DESCRIPTION
These are the lower elevel commands are used to construct a complete
HTTP response and return it to the requesting client\&. The response may
be transcoded into a different encoding, compressed and/or sent in
chunks as automatically negotiated by the client and server settings\&.
.PP
Unless otherwise noted, these commands return \fBtrue\fR if the command
failed and \fBfalse\fR otherwise\&. All of them can raise an error if their
arguments are incorrect\&.
.PP
The behavior of the file delivery commands \fBns_returnfile\fR
and \fBns_repond\fR is influenced
by the \fBfastpath\fR settings, that define, how static files are
served\&. The fastpath settings are described in the \fBCONFIGURATION\fR
section at the end of this page\&.
.PP
Note that there are additional higher level commands are
designed to ease consistent behavior in common success, redirect or
error situations (see \fBreturnstatus-cmds\fR)\&.
.SH COMMANDS
.TP
\fBns_return\fR ?\fB-binary\fR? \fIstatus\fR \fImime-type\fR \fIbody\fR
Return a complete response to the client consisting of the given \fIbody\fR
and a set of HTTP headers\&. \fIstatus\fR is an integer HTTP status code such as
200 (OK) or 404 (Not Found)\&. When the optional flag \fB-binary\fR is
used, the content of the Tcl byte-array is transmitted\&.
.sp
\fImime-type\fR is the mime-type of the body\&. If a \fIcharset\fR attribute
is included in the mime-type it will be used to set the encoding of the
connection\&. Otherwise, the connection encoding will be used to
construct a charset attribute for the mime-type\&.
.sp
If \fIbody\fR is Tcl byte-array object then no transcoding will take place\&.
Otherwise, the \fIencoding\fR in effect for the current connection will be
used to encode the \fIbody\fR\&.
.sp
After the command completes the connection is returned to the driver thread
to be closed or monitored for keep-alive and the calling connection thread
continues to execute code\&.
.TP
\fBns_returnfile\fR \fIstatus\fR \fImime-type\fR \fIfilepath\fR
Return the given file as the complete response body\&. Headers are constructed
using \fIstatus\fR, \fImime-type\fR and any pending headers set using
\fBns_conn outputheaders\fR\&. The bytes of the file are not transformed in any
way\&.
.sp
After the command completes the connection is returned to the driver thread
to be closed or monitored for keep-alive and the calling connection thread
continues to execute code\&.
.TP
\fBns_returnfp\fR \fIstatus\fR \fImime-type\fR \fIchannel\fR \fIlength\fR
Return \fIlength\fR bytes from \fIchannel\fR as the response body\&. The current
offset of the channel is the beginning of the body -- the offset will be left
at \fIlength\fR bytes\&. The bytes of the file are not transformed in any way\&.
.sp
After the command completes the connection is returned to the driver thread
to be closed or monitored for keep-alive and the calling connection thread
continues to execute code\&.
.TP
\fBns_respond\fR ?\fB-status \fIstatus\fR\fR? ?\fB-type \fImime-type\fR\fR? ?\fB-length \fIint\fR\fR? ?\fB-headers \fIsetid\fR\fR? ?\fB-string \fIbody\fR\fR? ?\fB-binary \fIbody\fR\fR? ?\fB-file \fIfilepath\fR\fR? ?\fB-fileid \fIchannel\fR\fR?
Return a complete response to the client using exactly one of \fB-string\fR,
\fB-binary\fR, \fB-file\fR or \fB-fileid\fR as the body\&.
.sp
After the command completes the connection is returned to the driver thread
to be closed or monitored for keep-alive and the calling connection thread
continues to execute code\&.
.RS
.TP
\fB-status\fR \fIstatus\fR
The HTTP status code\&. Default \fB200\fR\&.
.TP
\fB-type\fR \fImime-type\fR
The mime-type of the response body\&. Default \fB*/*\fR\&.
.TP
\fB-headers\fR \fIsetid\fR
A set of headers which will replace any pending headers for the response\&.
.TP
\fB-string\fR \fIbody\fR
The Tcl string to send as the response body\&. The body may be encoded into
an appropriate character set if required by the client and server settings\&.
.TP
\fB-binary\fR \fIbody\fR
The byte-array representation of the given Tcl object will be used as the
response body\&. No character set conversion will be done\&.
.TP
\fB-file\fR \fIfilepath\fR
The file identified by the given \fIfilepath\fR will be sent as the response
body\&. The bytes of the file will not be transformed in any way\&.
.TP
\fB-fileid\fR \fIchannel\fR
The file identified by the given Tcl \fIchannel\fR will be sent as the response
body\&. The bytes of the file will not be transformed in any way\&.
.TP
\fB-length\fR \fIlength\fR
Specifies the number of bytes to send from the channel\&.
.RE
.PP
.SH EXAMPLES
A traditional geek greeting:
.CS


ns_register_proc GET /hello {
    ns_return 200 text/plain "Hello World!"
}

.CE
A traditional Albanian greeting, using an explicit charset:
.CS


ns_register_proc GET /hello {
    ns_return 200 "text/plain; charset=iso-8859-2" "Përshëndetje të gjithëve!"
}

.CE
.SH CONFIGURATION
The behavior of the file delivery commands \fBns_returnfile\fR and
\fBns_respond \fB-file \&.\&.\&.\fR\fR, as well as the automatic delivery of static
files is influenced by the \fBfastpath\fR settings, which define, how
files are served\&. The fastpath section of the configuration file for a
server \fBserver1\fR has a global part (general settings for all
servers) and a per (virtual) server part:
.CS


   ns_section ns/fastpath
   # global configuration
   ns_param  \&.\&.\&.
   \&.\&.\&.

   ns_section ns/server/server1/fastpath
   # per-server configuration
   ns_param  \&.\&.\&.
   \&.\&.\&.

.CE
Most prominently, the \fIglobal fastpath parameters\fR define the delivery
mode\&.  In general, fastpath supports three delivery modes for static
content:
.IP [1]
Delivering file via chunk reads from the file, where the
chunk size is typical the \fBwritersize\fR of a writer thread\&.
This is the same behavior as in
\fBns_respond \fB-fileid \&.\&.\&.\fR\fR or in
\fBns_returnfp\fR\&. This delivery mode is activated, when
both the global fastpath parameter \fBcache\fR and \fBmmap\fR
are false\&.
.IP [2]
Delivering from mapped memory, when \fBmmap\fR is defined
and the operating supports it\&. In this case the file to be delivered
is mapped into memory and served from there\&. The buffer size etc\&. is
determined from the operating system\&. This option is activated, when
the global fastpath parameter \fBmmap\fR is true and \fBcache\fR is
false\&.
.IP [3]
Delivering the file from the own NaviServer file cache\&.  This
option is activated, when the parameter \fBcache\fR is set to true\&.
.PP
.SS "GLOBAL FASTPATH CONFIGURATION PARAMETERS"
.TP
cache
Use the NaviServer file cache for file deliveries
(boolean, defaults to false)
.TP
cachemaxentry
Maximum size of a single entry, when parameter \fBcache\fR is true
(integer, defaults to 8kB)
.TP
cachemaxsize
Size of the cache, when parameter \fBcache\fR is true;
(integer, defaults to 10MB)
.TP
mmap
Use mmap for file deliveries (and cache is false)
(boolean, defaults to false)
.TP
gzip_static
Send the gzip-ed version of the file if available and the client
accepts gzip-ed content\&. When a file \fBpath/foo\&.ext\fR is requested,
and there exists a file  \fBpath/foo\&.ext\&.gz\fR, and the
timestamp of the gzip-ed file is equal or newer than the
source file, use the gzip-ed file for delivery\&.
(boolean, defaults to false)
.TP
gzip_refresh
Refresh gzip file (i\&.e\&. re-gzip source) when the modification time of
the compressed file is older than the modification time of the source\&.
Note that the command is just used for re-gzip-ing outdated \&.gz-files; it
does not actively compress files, which were previously not compressed
(this would be wasteful for e\&.g\&. large tmp files, there is not
cleanup, etc\&.)\&.  For refreshing gzip files, the Tcl command
"::ns_gzipfile source target" is used\&.  This command can be
potentially redefined by an application\&.  When this parameter is not
defined (or the refresh command fails), outdated gzip-ed files are
ignored, and a warning is written to the error\&.log\&. (boolean, defaults
to false)
.TP
gzip_cmd
Command for gzip-ing files, used by \fB::ns_gzipfile\fR\&.
The value of \fIgzip_cmd\fR is used in \fB::ns_gzipfile\fR
to locate the gzip command in the OS\&.  If \fIgzip_cmd\fR
is not defined, and \fB::ns_gzipfile\fR is called, an error
is written to the error\&.log\&.
Example setting: "/usr/bin/gzip -9"\&.  (string, defaults to "")
.TP
brotli_static
Send the brotli compressed version of the file if available and the client
accepts brotli compressed  content\&. When a file \fBpath/foo\&.ext\fR is requested,
and there exists a file  \fBpath/foo\&.ext\&.br\fR, and the
timestamp of the brotli compressed  file is equal or newer than the
source file, use the brotli compressed file for delivery\&.
(boolean, defaults to false)
.TP
brotli_refresh
Refresh the brotli compressed file (i\&.e\&. re compress source) when the modification time of
the compressed file is older than the modification time of the source\&.
Note that the command is just used for recompressing outdated \&.br-files; it
does not actively compress files, which were previously not compressed
(this would be wasteful for e\&.g\&. large tmp files, there is not
cleanup, etc\&.)\&.  For refreshing gzip files, the Tcl command
"::ns_brotlifile source target" is used\&.  This command can be
potentially redefined by an application\&.  When this parameter is not
defined (or the refresh command fails), outdated brotli compressed files are
ignored, and a warning is written to the error\&.log\&. (boolean, defaults
to false)
.TP
brotli_cmd
Command for producing brotli compressed files, used by \fB::ns_brotlifile\fR\&.
The value of \fIbrotli_cmd\fR is used in \fB::ns_brotlifile\fR
to locate the brotlicommand in the OS\&.  If \fIbrotli_cmd\fR
is not defined, and \fB::ns_brotlifile\fR is called, an error
is written to the error\&.log\&.
Example setting: "/usr/bin/brotli -f -q 11"\&.  (string, defaults to "")
.TP
minify_css_cmd
Command for minifying \&.css files\&.  When
recompressing outdated gzip files (see parameters \fIgzip_refresh\fR and
\fIgzip_cmd\fR), NaviServer will optionally minify
css files on the fly, when \fIminify_css_cmd\fR is specified\&.
In these cases, the returned file will be minified and compressed\&.
The configured command must read css files from stdin and
to write the minified content to stdout\&.
Example setting: "/usr/bin/yui-compressor --type css"\&.  (string, defaults to "")
.TP
minify_js_cmd
Command for minifying \&.jsfiles\&.  When
recompressing outdated gzip files (see parameters \fIgzip_refresh\fR and
\fIgzip_cmd\fR), NaviServer will optionally minify
JavaScript files on the fly, when \fIminify_js_cmd\fR is specified\&.
In these cases, the returned file will be minified and compressed\&.
The configured command must read JavaScript files from stdin and
to write the minified content to stdout\&.
Example setting: "/usr/bin/yui-compressor --type js"\&.  (string, defaults to "")
.PP
.SS "PER-SERVER FASTPATH CONFIGURATION PARAMETERS"
.TP
directoryadp
Name of an ADP page to use to display directory listings\&.
One can either specify \fBdirectoryadp\fR,
or \fBdirectoryproc\fR, but not both\&.
(string, defaults to "")
.TP
directoryfile
Index files for directory
(string, defaults to index\&.adp index\&.tcl index\&.html index\&.htm)
.TP
directorylisting
Style of directory listings, Can be \fBfancy\fR, \fBsimple\fR, or \fBnone\fR\&.
(string, defaults to simple)
.TP
directoryproc
Name of Tcl proc to use to display directory listings\&.
One can either specify \fBdirectoryproc\fR,
or \fBdirectoryadp\fR, but not both\&.
(string, defaults to _ns_dirlist)
.TP
hidedotfiles
Hide files starting with a dot in directory listings
(boolean, defaults to false)
.TP
pagedir
Defines absolute or relative path for serving content files\&. Relative
names are relative to the \fBserverdir\fR
(string, defaults to serverdir/pages)
.TP
serverdir
Defines absolute path to server's home directory\&.
(string, defaults to "")
.PP
.SH "SEE ALSO"
ns_adp_puts, ns_conn, ns_guesstype, ns_register, ns_write, ns_writer, returnstatus-cmds
.SH KEYWORDS
brotli, cache, charset, configuration, encoding, fastpath, gzip, minify, mmap, pagedir, response, return, server built-in, serverdir, status, writer