'\"
'\" Generated from file 'ns_chan\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "ns_chan" n 4\&.99\&.19 naviserver "NaviServer Built-in Commands"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
ns_chan \- Share Tcl channels between threads and interpreters
.SH SYNOPSIS
\fBns_chan cleanup\fR ?\fB-shared\fR?
.sp
\fBns_chan create\fR \fIchannel name\fR
.sp
\fBns_chan get\fR \fIname\fR
.sp
\fBns_chan list\fR ?\fB-shared\fR?
.sp
\fBns_chan put\fR \fIname\fR
.sp
.BE
.SH DESCRIPTION
The command \fBns_chan\fR lets you transfer ownership of Tcl channels between threads and interpreters
within the NaviServer process\&.
NaviServer maintains several internal tables to implement the channel-transfer capability\&.
Each virtual server maintains a private table of shared Tcl channels which are not associated
to any particular thread\&.  Each Tcl interpreter maintains a table of currently attached shared
channels\&.  Consequently, a shared channel can be in the per-virtual-server private table, or
it can be in the interpreter private table, but not both at the same time\&.
.PP
Furthermore, each shared channel has a user-supplied name\&.  This name is used to track the
channel handle in the tables mentioned above\&.  By using the various ns_chan commands, you can
create shared Tcl channels and move them back and forth between the current Tcl interpreter
and per-virtual-server private table\&.
.SH COMMANDS
.TP
\fBns_chan cleanup\fR ?\fB-shared\fR?
Closes all shared channels found in the per-virtual-server private table or current Tcl
interpreter table, depending on the \fB-shared\fR flag\&.  If the \fB-shared\fR flag is not specified,
this command will close all channels from the current interpreter which were attached to
it by the ns_chan get command\&.  If the \fB-shared\fR flag is specified, this command will close
all channels from the per-virtual-server private table, i\&.e\&., all those which are currently
not attached in any Tcl interpreter or thread\&.
.TP
\fBns_chan create\fR \fIchannel name\fR
Given an existing Tcl channel handle, ns_chan create "unplugs" this channel from
the current interpreter, and stores it under the name in the per-virtual-server
private table\&.  Any further attempt to use this channel from the current interpreter
will fail by throwing a Tcl error\&.  On success, this command will return an empty string\&.
The command also throws an error if the channel cannot be found in the current Tcl interpreter
or if an entry already exists with the same name in the per-virtual-server private table\&.
.TP
\fBns_chan get\fR \fIname\fR
Retrieves a channel from the per-virtual-server private table for the entry name and makes
it available within the current interpreter\&.  On success, the command will return the handle
for the channel\&.  This handle can be used in any regular Tcl or NaviServer command that operates
on Tcl channels, like puts, read, fconfigure, etc\&.  The command will throw an error if
the channel cannot be plugged in for current interpreter or if the entry name could not
be found in the per-virtual-server private table\&.
.TP
\fBns_chan list\fR ?\fB-shared\fR?
Returns a list of all shared channels found in the per-virtual-server private table or
current Tcl interpreter, depending on the \fB-shared\fR flag\&.
If the \fB-shared\fR flag is not specified,
this command will report all channels from the current interpreter which were attached to it
by the ns_chan get command\&.  If the \fB-shared\fR flag is specified, this command will report all
channels from the per-virtual-server private table, i\&.e\&., all those which are currently not
attached in any Tcl interpreter or thread\&.
.TP
\fBns_chan put\fR \fIname\fR
Unplugs a channel from the current interpreter matching entry name and returns it to the
per-virtual-server private table\&.  Any further attempt to use the named channel from the
current interpreter will fail by throwing a Tcl error\&.  On success, command will return
an empty string\&.  The command will also throw an error if the named channel was never
attached to the current interpreter by some previous ns_chan get command or if the entry
name is already found in the per-virtual-server private table\&.
.PP
.SH EXAMPLES
.CS



    # In thread #1, create the shared entry\&.
    ns_chan create [open /tmp/ns_chan w] test

    # Attach to it in thread #1, and write something to it\&.
    set fd [ns_chan get test]
    puts $fd "this is thread #1"

    # Detach from it in thread #1\&.
    ns_chan put test

    # Now, in thread #2, attach to the channel and write something to it\&.
    set fd [ns_chan get test]
    puts $fd "this is thread #2"

    # See it in the attached state in thread #2\&.
    ns_chan list ;# => test

    # Detach from it in thread #2\&.
    ns_chan put test

    # See it back in the per-virtual-server private table\&.
    ns_chan list -shared ;# => test

.CE
.SH "SEE ALSO"
ns_conn, ns_connchan, ns_sockcallback
.SH KEYWORDS
callback, channels, server built-in