'\"
'\" Generated from file 'ns_ictl\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "ns_ictl" n 4\&.99\&.19 naviserver "NaviServer Built-in Commands"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
ns_ictl \- Manipulate and introspect Tcl interpreter internals
.SH SYNOPSIS
\fBns_cleanup\fR
.sp
\fBns_reinit\fR
.sp
\fBns_eval\fR ?\fB-sync\fR? ?\fB-pending\fR? \fIscript\fR ?\fIargs\fR?
.sp
\fBns_ictl addmodule\fR \fImodulename\fR
.sp
\fBns_ictl cleanup\fR \fImodulename\fR
.sp
\fBns_ictl epoch\fR
.sp
\fBns_ictl get\fR
.sp
\fBns_ictl getmodules\fR
.sp
\fBns_ictl gettrace\fR
.sp
\fBns_ictl markfordelete\fR
.sp
\fBns_ictl runtraces\fR \fItracewhen\fR
.sp
\fBns_ictl save\fR \fIscript\fR
.sp
\fBns_ictl trace\fR \fItracewhen\fR \fIscript\fR ?\fIargs\fR?
.sp
\fBns_ictl update\fR
.sp
.BE
.SH DESCRIPTION
These commands provides a mechanism to control Tcl interpreter initialization,
cleanup, lifetime, synchronization etc\&.
.SH COMMANDS
.TP
\fBns_cleanup\fR
Cleanup the interpreter\&. This function is used to close all currently
open files, to destroy the global variables, destroy the (volatile)
ns_sets, to abort all running requests and to call other cleanup callbacks\&.
The function is called typically internally, e\&.g\&. at the end of a
connection thread\&.
.TP
\fBns_reinit\fR
Cleanup and initialize the interpreter\&. This is used for long running detached
threads to avoid resource leaks and/or missed state changes\&.
.CS


ns_thread begin {
    while {1} {
        ns_reinit
        # \&.\&.\&. long running work \&.\&.\&.
    }
}

.CE
.TP
\fBns_eval\fR ?\fB-sync\fR? ?\fB-pending\fR? \fIscript\fR ?\fIargs\fR?
Evaluate the given script and args and arrange for it's side effects to
propagate to all interpreters in all threads for the current virtual server\&. Use
this to define new procs once the server has started\&.
.sp
If the script evaluates without error then it is appended to the interpreter
initialization script\&. Other threads will begin to pick up the changes when
they next run their \fIdelete\fR traces and notice that the \fIepoch\fR has
changed\&.
.sp
If the \fB-sync\fR option is given then \fBns_eval\fR will return only
after the interpreter initialization script has been updated\&. Otherwise, there
might be a small delay before the initialization script receives the update
due to \fBns_eval\fR \fIscript\fR's being evaluated in series\&.
.sp
If the \fB-pending\fR option is given a list of all scripts which are queued
to be folded into the interpreter initialization script are returned\&.
.TP
\fBns_ictl addmodule\fR \fImodulename\fR
Add a module to the list of modules to be initialized for the current virtual
server and return the whole list\&.  The modules are loaded later\&.
.TP
\fBns_ictl cleanup\fR \fImodulename\fR
Invoke the legacy defer callbacks\&.
.TP
\fBns_ictl epoch\fR
Return the epoch (version) of the interpreter initialization script for the
current virtual server\&.
The epoch increases by 1 whenever \fBns_ictl save\fR is called, such as by
\fBns_eval\fR\&.
.TP
\fBns_ictl get\fR
Return the interpreter initialization script for the current virtual
server\&.
.TP
\fBns_ictl getmodules\fR
Return the list of modules to be loaded for the current virtual server\&.
.TP
\fBns_ictl gettrace\fR
Return the script of the specified trace\&.
.TP
\fBns_ictl markfordelete\fR
Mark the interpreter for deletion after the \fIdeallocate\fR interpreter traces
and have run\&. This is useful when it's necessary to delete an interp after it
has been modified in a way that cannot be safely cleaned up, such as by the
TclPro debugger\&.
.TP
\fBns_ictl runtraces\fR \fItracewhen\fR
Run the scripts of the specified trace\&.
.TP
\fBns_ictl save\fR \fIscript\fR
Replace the interpreter initialization script for the current virtual
server\&.
The newly saved script will be used to initialize newly created
interpreters\&. Existing interpreters will be reinitialized when
\fBns_ictl update\fR is called\&.
.TP
\fBns_ictl trace\fR \fItracewhen\fR \fIscript\fR ?\fIargs\fR?
Register an interpreter \fItrace\fR \fIscript\fR\&.
.sp
\fBcreate\fR, \fBallocate\fR and \fBgetconn\fR traces are called in FIFO (first
in, first out) order; \fBfreeconn\fR, \fBdeallocate\fR and \fBdelete\fR traces
are called in LIFO (last in, first out) order\&.
.sp
All traces must be registered before server start up completes\&.  Valid
\fBtracewhen\fR options are:
.RS
.TP
\fBallocate\fR
Allocate interpreter traces fire when an interpreter is first allocated for a
particular thread, for example at the beginning of connection processing, job
queue processing, or for a scheduled procedure\&.
.TP
\fBcreate\fR
Create traces fires when a new interpreter is first created\&. They are the first
to be called, and are always called for every interpreter\&.
.TP
\fBdeallocate\fR
Deallocate interpreter traces fire at the end of a transaction, after any
\fIgetconn\fR traces if running in a connection thread\&.
A deallocate trace is a good place for general resource cleanup\&.
.TP
\fBdelete\fR
Delete interpreter traces fire when an interpreter is deleted\&. Interpreters are
often cached per-thread and reused multiple times, so a ?delete? trace
may only fire when a thread exits or when \fBns_ictl markfordelete\fR is
called explicitly\&. They are the last trace to be called for an interp, and are
always called, eventually\&.
.TP
\fBfreeconn\fR
Freeconn interpreter traces fire after connection processing is complete, before
any deallocate interpreter traces\&.
.TP
\fBgetconn\fR
Getconn interpreter traces fire after all allocate traces have run, before
connection processing for a URL begins\&.
.sp
Note: a \fBgetconn\fR interpreter trace fires only once per connection, so if a
Tcl proc is registered as a connection filter, that will trigger the
\fBgetconn\fR interpreter trace, otherwise it will fire later in the process
when the registered proc, \fIADP\fR, or Tcl page runs\&.
.RE
.TP
\fBns_ictl update\fR
Re-run the interpreter initialization script if it has changed since this
interpreter was last initialized\&.
.PP
.SH EXAMPLES
.CS


% ns_ictl epoch
1

.CE
.CS


% ns_ictl getmodules
nsdb nslog nscp

.CE
.SH "SEE ALSO"
ns_atclose
.SH KEYWORDS
callback, interpreter, module, ns_cleanup, ns_eval, ns_reinit, server built-in, trace