'\"
'\" Generated from file 'nsperm\&.man' by tcllib/doctools with format 'nroff'
'\"
.TH "nsperm" n 4\&.99\&.19 nsperm ""
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
nsperm \- NaviServer Permissions and Access Control Guide
.SH DESCRIPTION
.SH "ACCESS CONTROL"
.PP
NaviServer allows you to define users and groups of users, and assign
permission records to individual pages or entire page hierarchies\&.
NaviServer users are distinct from operating system users\&. A permission
record lets you allow or disallow lists of users, lists of groups, and
lists of hosts for a method and URL combination\&.
.PP
NaviServer requires one special user, nsadmin\&. This user is always
allowed access to any URL on a NaviServer\&. The nsadmin user is similar
to the Unix root user\&.
.PP
NaviServer is configured by default with the nsadmin user, a system
group, a public group, and a users group\&.
.PP
You can change the permissions given to the system, public, and users
groups and assign users to them by following the procedures described
in this chapter\&.
.SH "USERS AND GROUPS"
.PP
NaviServer users are identified by short user names\&. These user names
can be any name you choose; they are completely independent of the
Unix login accounts\&. New users can be assigned subdirectories of the
NaviServer pages directory where they can store content\&.
.SH "DEFINING USERS"
.PP
To define NaviServer users, you need to create entries for them in the
passwd file, which resides in the /modules/nsperm directory\&. The
default passwd file contains:
.PP
.CS


   ""::::::
   nsadmin:CUdnvgBYocLSI:::::
   nobody::::::

.CE
.PP
The format is the same as the format for the /etc/passwd file\&.
NaviServer ignores all but the first two fields, which are the user
name and the encrypted password\&. The password itself is encrypted the
same way as Unix passwords\&.
.PP
The "" user is the unauthenticated user and is treated the same as any
other user\&.
.SH "DEFINING GROUPS"
.PP
To define NaviServer groups, you need to create entries for them in the
group file, which resides in the /modules/nsperm directory\&. The
default group file contains:
.CS


   system:::nsadmin
   users:::nsadmin,nobody
   all:::nsadmin,nobody,""
   public:::""

.CE
The format is the same as the format for the /etc/group file\&.
NaviServer ignores all but the first and last fields, which are the
name of the group and a comma-separated list of users in the group\&.
.PP
The default group file, shown above, creates groups called system,
users, all, and public, with the listed users in each\&.
.SH PERMISSIONS
.PP
Permission records indicate the allowed access for a particular URL
and method (GET, and PUT)\&. GET access to a URL allows the user to
display the page, or submit information in a form\&. PUT access allows
the user to write to the page or delete the page\&.
.PP
Once you have defined authorized NaviServer users and groups, you can
maintain NaviServer permission records\&. Normally, only nsadmin and
users in the system group can set permission records directly\&.
.SH "PERMISSIONS INHERITANCE"
.PP
To simplify the permission structure and reduce the number of
permission records you need to maintain, you can specify that a
permission record is inherited by more specific URLs\&. For example, a
permission record for /a/b would be inherited by /a/b/c\&.htm if there
is no specific permission record for /a/b/c\&.htm\&.
.SH "SETTING PERMISSIONS FOR USERS AND GROUPS"
.PP
To define NaviServer permissions for users and groups, you need to
create permission entries for them in the perms file, which resides in
the /modules/nsperm directory\&. The default perms file does not contain
any permission entries, but it contains the following comments, which
explain how to add entries to the file:
.CS


   # This is the NaviServer perms file which defines which users
   # and groups may or may not visit certain URLs\&.
   #
   # The format is:
   # ACTION  INHERITANCE  METHOD  URL  ENTITY
   #
   # ACTION can be: denygroup, allowgroup, denyuser, or allowuser
   # INHERITANCE can be: inherit or noinherit
   # METHOD can be: PUT, GET, POST, or any other supported method\&.
   # URL is the path relative to pageroot, e\&.g\&., /index\&.html or
   # /images
   # ENTITY is either the name of a user or group, as specified in
   # the passwd and group files\&.
   #
   # Example:
   # denyuser  inherit GET /NS ""
   # allowuser inherit GET /NS nsadmin

.CE
.SH "ALLOWING HOSTS"
.PP
You can specifically allow hosts to log in as certain users\&. The
hosts\&.allow file, which resides in the /modules/nsperm directory,
allows you to specify which hosts may log in as certain users\&. The
default hosts\&.allow file contains:
.CS


   #
   # This is the NaviServer hosts\&.allow file\&. It allows you to specify
   # which hosts may log in as certain users\&. If you have an entry
   # in this file for a given user, you may not have an entry in
   # hosts\&.deny for that same user\&.
   #
   #
   nsadmin: 10\&.0\&.0\&.0/8, ::1/64, \&.internal\&.mycompany\&.com, home\&.me\&.com

.CE
.PP
The format for entries in the file is:
.PP
.CS


   username: host, host, host \&.\&.\&.

.CE
where username is a user defined in the passwd file and host can be
specified in either of these forms:
.PP
.IP \(bu
ipaddress/netmask
.sp
For example, a host specified as 10\&.0\&.0\&.0/8 (which is the
same as 10\&.0\&.0\&.0/255\&.0\&.0\&.0) matches any IP address
that begins with 10\&.
.IP \(bu
a fully-qualified host name
.sp
For example, foo\&.bar\&.com\&.
.IP \(bu
part of a host name
.sp
For example, \&.bar\&.com, which would match anything ending in
\&.bar\&.com\&.
.PP
Any user in this file must be coming from one of the listed addresses
to gain access\&.
.SH "DENYING HOSTS"
.PP
You can specifically deny hosts from logging in as certain users\&. The
hosts\&.deny file, which resides in the /modules/nsperm directory,
allows you to specify which hosts cannot log in as certain users\&. The
default hosts\&.deny file contains:
.CS


   #
   # This is the NaviServer hosts\&.deny file\&. It allows you to specify
   # which hosts may not log in as certain users\&. If you have an
   # entry in this file for a given user, you may not have an entry
   # in hosts\&.allow for that same user\&.
   #
   # Example:
   #
   # nsadmin: hacker\&.badguy\&.com, \&.aol\&.com, 10\&.2\&.114\&.0/24
   #

.CE
.PP
The format for entries in the file is:
.CS


   username: host, host, host \&.\&.\&.

.CE
.PP
where username is a user defined in the passwd file and host can be
specified in either of these forms:
.IP \(bu
ipaddress/netmask
.sp
For example, a host specified as 10\&.0\&.0\&.0/8 matches any
IP address that begins with 10\&.
.IP \(bu
a fully-qualified host name
.sp
For example, foo\&.bar\&.com\&.
.IP \(bu
part of a host name
.sp
For example, \&.bar\&.com, which would match anything ending in
\&.bar\&.com\&.
.PP
.SH "\&.HTACCESS MODE"
This mode is similar to Apache but more simpler and limited in functionality\&. It supports only
allowing and denying access to a particular directory\&.
.PP
To enable this
.CS


   ns_section "ns/server/servername/module/nsperm"
   ns_param   htaccess   true
   ns_param   passwdfile /usr/local/ns/modules/nsperm/passwd

.CE
passwdfile can point to any file, by default it set to default nsperm module password file\&.
Now, in the directory where access is wanted, create \&.htaccess file and add lines like these:
.CS


   allow vlad john
   deny steve

.CE
.SH "SEE ALSO"
ns_perm, ns_permpasswd, ns_permreload
.SH KEYWORDS
module, nsperm