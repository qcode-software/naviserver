# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

eval ::tcltest::configure $argv



#
# test ns_return with different charsets (also default)
#

test encoding-1.1 {
    Send body with ns_return and charset utf-8
} -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain; charset=utf-8" "äöü"
    }
} -body {
    nstest::http -encoding utf-8 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding"
} -cleanup {
    ns_unregister_op GET /encoding
} -result [list 200 "text/plain; charset=utf-8" 6 "äöü"]


test encoding-1.2 {
    send body with ns_return and charset iso-8859-1
} -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain; charset=iso-8859-1" [encoding convertto iso8859-1 "äöü"]
    }
} -body {
    nstest::http -encoding iso8859-1 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding"
} -cleanup {
    ns_unregister_op GET /encoding
} -result [list 200 "text/plain; charset=iso-8859-1" 3 "äöü"]


test encoding-1.3 {
    Send body with ns_return and default charset.
} -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain" [encoding convertto iso8859-1 "äöü"]
    }
} -body {
    nstest::http -encoding iso8859-1 -getbody 1 -getheaders {Content-Type} GET "/encoding"
} -cleanup {
    ns_unregister_op GET /encoding
} -result [list 200 "text/plain" "äöü"]


#
# test ns_write (and ns_startcontent) with different charsets (also default)
#

test encoding-2.1 {
    ns_startcontent: encoding from charset: utf-8
} -setup {
    ns_register_proc GET /encoding {
        ns_startcontent -charset "utf-8"
        ns_write "äöü"
    }
} -body {
    nstest::http -encoding utf-8 -getbody 1 GET "/encoding"
} -cleanup {
    ns_unregister_op GET /encoding
} -result "äöü"


test encoding-2.2 {
    ns_startcontent: encoding from mime-type: utf-8
} -setup {
    ns_register_proc GET /encoding {
        ns_startcontent -type "text/plain; charset=utf-8"
        ns_write "äöü"
    }
} -body {
    nstest::http -encoding utf-8 -getbody 1 GET "/encoding"
} -cleanup {
    ns_unregister_op GET /encoding
} -result "äöü"


test encoding-2.3 {
    ns_startcontent: encoding from charset: iso-8859-1
} -setup {
    ns_register_proc GET /encoding {
        ns_startcontent -charset "iso-8859-1"
        ns_write "äöü"
    }
} -body {
    nstest::http -encoding iso8859-1 -getbody 1 GET "/encoding"
} -cleanup {
    ns_unregister_op GET /encoding
} -result "äöü"


test encoding-2.4 {
    ns_startcontent: encoding from mime-type: iso-8859-1
} -setup {
    ns_register_proc GET /encoding {
        ns_startcontent -type "text/plain; charset=iso-8859-1"
        ns_write "äöü"
    }
} -body {
    nstest::http -encoding iso8859-1 -getbody 1 GET "/encoding"
} -cleanup {
    ns_unregister_op GET /encoding
} -result "äöü"

test encoding-2.5 {
    ns_startcontent: default encoding
} -setup {
    ns_register_proc GET /encoding {
        ns_startcontent -type text/plain
        ns_write "äöü"
    }
} -body {
    nstest::http -encoding iso8859-1 -getbody 1 GET "/encoding"
} -cleanup {
    ns_unregister_op GET /encoding
} -result "äöü"


#
# The following test both reading the bytes from the disk in a
# specific encoding, according to ns/encodings, and converting
# the resulting utf-8 to a specific encoding, according to
# ns/mimetypes.
#

test encoding-3.1 {
    File in iso-8859-1 encoding should produce utf-8 output
} -body {
    nstest::http -encoding utf-8 -getbody 1 \
        -getheaders {Content-Type Content-Length} \
        GET "/encoding.iso2utf_adp"
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 äöü}


test encoding-3.2 {
    File in utf-8 encoding should produce utf-8 output
} -body {
    nstest::http -encoding utf-8 -getbody 1 \
        -getheaders {Content-Type Content-Length} \
        GET "/encoding.utf2utf_adp"
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 äöü}


test encoding-3.3 {
    File in iso-8859-1 encoding should produce iso-8859-1 output
} -body {
    nstest::http -encoding iso8859-1 -getbody 1 \
        -getheaders {Content-Type Content-Length} \
        GET "/encoding.iso2iso_adp"
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=iso-8859-1} 3 äöü}


test encoding-3.3.1 {
    File in iso-8859-2 encoding should produce iso-8859-2 output
} -body {
    nstest::http -encoding iso8859-2 -getbody 1 \
        -getheaders {Content-Type Content-Length} \
        GET "/encoding.iso-8859-2_adp"
} -result {200 {text/plain; charset=iso-8859-2} 4 äöüŁ}


test encoding-3.3.2 {
    File in iso-8859-2 encoding should produce utf-8 output
} -body {
    nstest::http -encoding utf-8 -getbody 1 \
        -getheaders {Content-Type Content-Length} \
        GET "/encoding.iso-8859-2_adp?mime=utf"
} -result {200 {text/plain; charset=utf-8} 8 äöüŁ}


test encoding-3.4 {
    File in utf-8 encoding should produce iso-8859-1 output
} -body {
    nstest::http -encoding iso8859-1 -getbody 1 \
        -getheaders {Content-Type Content-Length} \
        GET "/encoding.utf2iso_adp"
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=iso-8859-1} 3 äöü}


test encoding-3.5 {
    File in iso-8859-1 encoding should produce output with default OutputCharset; 
    Content-Type-Header will be changed
} -body {
    nstest::http -getbody 1 \
        -getheaders {Content-Type Content-Length} \
        GET "/encoding.iso_adp"
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 äöü}


test encoding-3.6 {
    File in utf-8 encoding should produce output with default OutputCharset; 
    Content-Type-Header will be changed
} -body {
    nstest::http -getbody 1 \
        -getheaders {Content-Type Content-Length} \
        GET "/encoding.utf_adp"
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 äöü}


#
# test of ns_adp_mimetype
#

test encoding-4.0 {
    Output charset changed to iso-8859-1 with ns_adp_mimetype
} -body {
    nstest::http -encoding iso8859-1 -getbody 1 \
        -getheaders {Content-Type Content-Length} \
        GET "/encoding.utf2utf_adp?mime=iso"
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=iso-8859-1} 3 äöü}


test encoding-4.1 {
    Output charset changed to utf-8 with ns_adp_mimetype
} -body {
    nstest::http -encoding utf-8 -getbody 1 \
        -getheaders {Content-Type Content-Length} \
        GET "/encoding.iso2iso_adp?mime=utf"
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 äöü}


#
# test urlencoding
#

test encoding-5.1 {
    Decode url with iso-8859-1 charset
} -setup {
    ns_register_proc GET /encoding {
        ns_conn urlencoding iso8859-1
        set x [ns_queryget x NULL]
        ns_return 200 "text/plain; charset=iso-8859-1" $x
    }
} -body {
    nstest::http -encoding iso8859-1 -getbody 1 \
        GET "/encoding?x=%e4%f6%fc"
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 äöü}


test encoding-5.2 {
    Decode url with utf-8 charset
} -setup {
    ns_register_proc GET /encoding {
        ns_conn urlencoding utf-8
        set x [ns_queryget x NULL]
        ns_return 200 "text/plain; charset=iso-8859-1" $x
    }
} -body {
    nstest::http -encoding iso8859-1 -getbody 1 \
        GET "/encoding?x=%c3%a4%c3%b6%c3%bc"
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 äöü}


#
# Test buffer handling during conversion.
#

test encoding-6.1 {
    Return a string larger than IOBUFSZ as used in Ns_ConnWriteVChars()
} -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain; charset=utf-8" [string repeat x 8193]
    }
} -body {
    set result [nstest::http -getbody 1 -getheaders content-type GET /encoding]
	list [lindex $result 0] [lindex $result 1] [string length [lindex $result 2]]
} -cleanup {
	unset -nocomplain result
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 8193}


#
# Make sure static files served directly from disk don't have their
# mime-types charset munged.
#

test encoding-7.1 {
    A text/* mime-type.
} -body {
    nstest::http -getbody 1 -getheaders content-type GET /hello.html
} -result {200 text/html {Hello World!}}

test encoding-7.2 {
    An application/* mime-type for a text document.
} -body {
    nstest::http -getbody 1 -getheaders content-type GET /hello.xhtml
} -result {200 application/xhtml+xml {Hello World!}}




cleanupTests
