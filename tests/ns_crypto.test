# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv

#
# Most fo these tests require the OpenSSL API, some require nsf
#
tcltest::testConstraint crypto [ns_info ssl]
tcltest::testConstraint nsf [expr {[info commands ::nsf::proc] ne ""}]

#######################################################################################
#  Message digests: sha1, sha224, sha256, sha512
#######################################################################################

test ns_crypto_sha2-1.1 {basic syntax: plain call} -constraints crypto -body {
     ns_crypto::md
} -returnCodes error -result {wrong # args: should be "ns_crypto::md command ?args?"}
test ns_crypto_sha2-1.2 {basic syntax: plain call} -constraints crypto -body {
     ns_crypto::md string -digest sha123 x
} -returnCodes error  -match glob -result {Unknown value for digest "sha123", valid: *}

test ns_crypto_sha2-2.0 {basic operation} -constraints crypto -body {
    ns_crypto::md string foo
} -result "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae"

test ns_crypto_sha2-2.1 {basic operation} -constraints crypto -body {
    ns_crypto::md string -digest sha224 foo
} -result "0808f64e60d58979fcb676c96ec938270dea42445aeefcd3a4e6f8db"

test ns_crypto_sha2-2.2 {basic operation} -constraints crypto -body {
    ns_crypto::md string -digest sha256 foo
} -result "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae"

test ns_crypto_sha2-2.3 {basic operation} -constraints crypto -body {
    ns_crypto::md string -digest sha384 foo
} -result "98c11ffdfdd540676b1a137cb1a22b2a70350c9a44171d6b1180c6be5cbb2ee3f79d532c8a1dd9ef2e8e08e752a3babb"

test ns_crypto_sha2-2.4 {basic operation} -constraints crypto -body {
    ns_crypto::md string -digest sha512 foo
} -result "f7fbba6e0636f890e56fbbf3283e524c6fa3204ae298382d624741d0dc6638326e282c41be5e4254d8820772c5518a2c5a8c0c7f7eda19594a7eb539453e1ed7"

#######################################################################################
#  HMAC: Keyed-Hashing for Message Authentication
#  based on sha1, sha224, sha256, sha512
#  RFC 2104 https://tools.ietf.org/html/rfc2104
#######################################################################################

test ns_hmac_sha2-1.1 {basic syntax: plain call} -constraints crypto -body {
    ns_crypto::hmac
} -returnCodes error -result {wrong # args: should be "ns_crypto::hmac command ?args?"}
test ns_hmac_sha2-1.2 {basic syntax: plain call} -constraints crypto -body {
    ns_crypto::hmac string -digest sha123 x
} -returnCodes error -result {wrong # args: should be "ns_crypto::hmac string ?-digest digest? ?-encoding encoding? key message"}
test ns_hmac_sha2-1.3 {basic syntax: plain call} -constraints crypto -body {
    ns_crypto::hmac string -digest sha123 x y
} -returnCodes error -match glob -result {Unknown value for digest "sha123", valid: *}

test ns_hmac_sha2-2.0 {basic operation} -constraints crypto -body {
    ns_crypto::hmac string "Jefe" "what do ya want for nothing?"
} -result "5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843"

test ns_hmac_sha2-2.1 {basic operation} -constraints crypto -body {
    ns_crypto::hmac string -digest sha224 "Jefe" "what do ya want for nothing?"
} -result "a30e01098bc6dbbf45690f3a7e9e6d0f8bbea2a39e6148008fd05e44"

test ns_hmac_sha2-2.2 {basic operation} -constraints crypto -body {
    ns_crypto::hmac string -digest sha256 "Jefe" "what do ya want for nothing?"
} -result "5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843"

test ns_hmac_sha2-2.3 {basic operation} -constraints crypto -body {
    ns_crypto::hmac string -digest sha384 "Jefe" "what do ya want for nothing?"
} -result "af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736322445e8e2240ca5e69e2c78b3239ecfab21649"

test ns_hmac_sha2-2.4 {basic operation} -constraints crypto -body {
    ns_crypto::hmac string -digest sha512 "Jefe" "what do ya want for nothing?"
} -result "164b7a7bfcf819e2e395fbe73b56e0a387bd64222e831fd610270cd7ea2505549758bf75c05a994a6d034f65f8f0e6fdcaeab1a34d4a6b4b636e070a38bce737"


test ns_hmac_sha1-1.1 {basic operation} -constraints crypto -body {
     ns_crypto::hmac string -digest sha1 "Jefe" "what do ya want for nothing?"
} -result "effcdf6ae5eb2fa2d27416d5f184df9c259a7c79"

test ns_hmac_sha1-1.2 {binary operation (example from RFC 4226, appendix D)} -constraints crypto -body {
     ns_crypto::hmac string -digest sha1 12345678901234567890 [binary format W 0]
} -result "cc93cf18508d94934c64b65d8ba7667fb7cde4b0"

test ns_hmac_sha1-1.3 {binary operation (example from RFC 4226, appendix D)} -constraints crypto -body {
    ns_crypto::hmac string -digest sha1 12345678901234567890 [binary format W 1]
} -result "75a48a19d4cbe100644e8ac1397eea747a2d33ab"


#######################################################################################
#  HMAC and MD file test
#######################################################################################

test ns_hmac-file-1.0 {ns_hmac file function} -constraints {crypto nsf} -body {
    catch {ns_hmac file -digest sha256 foo [ns_server pagedir]/16480bytes} result
    set result
} -result "a3d3b7ad986f84a8e4b170ec576747361b31596b63c9135b049624612126ffd7"

test ns_md-file-1.0 {ns_hmac file function} -constraints {crypto nsf} -body {
    catch {ns_md file -digest sha256 [ns_server pagedir]/16480bytes} result
    set result
} -result "53deaf2e6c268ed0aae583e1c6f8679eedf08fb1218914530fa09b954c4bd621"

#######################################################################################
#  HOTP: An HMAC-Based One-Time Password Algorithm
#  RFC 4426 https://tools.ietf.org/html/rfc4226
#######################################################################################

test hotp-1 {

    Test for HOTP based on testvector in Appendix D from RFC 4226
    https://www.ietf.org/rfc/rfc4226.txt

} -constraints {crypto nsf} -body {
    set result ""
    foreach C {0 1 2 3 4 5 6 7 8 9} {
        lappend result [ns_hotp -digest sha1 -key 12345678901234567890 [binary format W $C]]
    }
    return $result
} -result "755224 287082 359152 969429 338314 254676 287922 162583 399871 520489"


#######################################################################################
#  TOTP: Time-Based One-Time Password Algorithm
#  RFC 6238 https://tools.ietf.org/html/rfc6238
#######################################################################################

test totp-1 {

    Test for HOTP based on testvector from Appendix B of RFC 6238
    https://tools.ietf.org/html/rfc6238

} -constraints {crypto nsf} -body {
    set result {}
    foreach time {59 1111111109 1111111111 1234567890 2000000000 20000000000} {
        foreach digest {
            sha1
            sha256
            sha512
        } key {
            12345678901234567890
            12345678901234567890123456789012
            1234567890123456789012345678901234567890123456789012345678901234
        } {
            lappend result [ns_totp -digest $digest -key $key -time $time]
        }
    }
    return $result
} -result "94287082 46119246 90693936 07081804 68084774 25091201 14050471 67062674 99943326 89005924 91819424 93441116 69279037 90698825 38618901 65353130 77737706 47863826"


#######################################################################################
#  HMAC-based Extract-and-Expand Key Derivation Function (HKDF)
#  RFC 5869 https://tools.ietf.org/html/rfc5869
#######################################################################################
catch {ns_crypto::md x} errorMsg
if {[string match "*hkdf*" $errorMsg]} {

    test hkdf-1.0 {test HKDF based on sha256, test case 1 from RFC 5869} -constraints {crypto} -body {
        ::ns_crypto::md hkdf -digest sha256 \
            -salt   [binary format H* 000102030405060708090a0b0c] \
            -secret [binary format H* 0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b] \
            -info   [binary format H* f0f1f2f3f4f5f6f7f8f9] \
            42
    } -result "3cb25f25faacd57a90434f64d0362f2a2d2d0a90cf1a5a4c5db02d56ecc4c5bf34007208d5b887185865"

    test hkdf-1.1 {test HKDF based on sha256, test case 3 from RFC 5869} -constraints {crypto} -body {
        ::ns_crypto::md hkdf -digest sha256 \
            -salt   "" \
            -secret [binary format H* 0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b] \
            -info   "" \
            42
    } -result "8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d9d201395faa4b61a96c8"

    test hkdf-1.2 {test HKDF based on sha1, test case 4 from RFC 5869} -constraints {crypto} -body {
        ::ns_crypto::md hkdf -digest sha1 \
            -salt   [binary format H* 000102030405060708090a0b0c] \
            -secret [binary format H* 0b0b0b0b0b0b0b0b0b0b0b] \
            -info   [binary format H* f0f1f2f3f4f5f6f7f8f9] \
            42
    } -result "085a01ea1b10f36933068b56efa5ad81a4f14b822f5b091568a9cdd4f155fda2c22e422478d305f3f896"

}

#
# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
