# -*- Tcl -*-

# 
# Like encoding.test, but uses 'ns_http run' instead of
# 'nstest::http-0.9 -encoding'
#                             

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv

test encoding_ns_http-0.0 "test whether HttpGetResult uses ExternalToUtf" -constraints !usingExternalToUtf -setup {
    ns_register_proc GET /get {ns_return 200 "text/plain; charset=iso-8859-2" "≈Å"}
} -body {
    set result [ns_http run [ns_config test listenurl]/get]
    if {[dict get $result body] eq "≈Å"} {
        testConstraint usingExternalToUtf true
    }
    return {}
} -cleanup {
    ns_unregister_op GET /get
} -result {}


#
# test ns_return with different charsets (also default)
#

test encoding_ns_http-1.1 {
    Send body with ns_return and charset utf-8
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain; charset=utf-8" "√§√∂√ºüòÉ"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result [list 200 "text/plain; charset=utf-8" 10 "√§√∂√ºüòÉ"]


test encoding_ns_http-1.2 {
    send body with ns_return and charset iso-8859-1
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain; charset=iso-8859-1" [encoding convertto iso8859-1 "√§√∂√º"]
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result [list 200 "text/plain; charset=iso-8859-1" 3 "√§√∂√º"]


test encoding_ns_http-1.3 {
    Send body with ns_return and default charset.
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain" [encoding convertto iso8859-1 "√§√∂√º"]
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result [list 200 "text/plain" "√§√∂√º"]


#
# test ns_write (and ns_headers) with different charsets (also default)
#

test encoding_ns_http-2.1 {
    ns_headers encoding from charset: utf-8
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_headers 200 "text/plain; charset=utf-8"
        ns_write "√§√∂√º"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result "200 √§√∂√º"


test encoding_ns_http-2.2 {
    ns_headers: encoding from mime-type: utf-8
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_headers 200 "text/html; charset=utf-8"
        ns_write "√§√∂√º"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result "200 √§√∂√º"


test encoding_ns_http-2.3 {
    ns_headers: encoding from charset: iso-8859-1
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_headers 200 "text/plain; charset=iso-8859-1"
        ns_write "√§√∂√º"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result "200 √§√∂√º"


test encoding_ns_http-2.4 {
    ns_headers: encoding from mime-type: iso-8859-1
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_headers 200 "text/html; charset=iso-8859-1"
        ns_write "√§√∂√º"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result "200 √§√∂√º"

test encoding_ns_http-2.5 {
    ns_headers: default encoding
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_headers 200 text/plain
        ns_write "√§√∂√º"
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result "200 √§√∂√º"


#
# The following test both reading the bytes from the disk in a
# specific encoding, according to ns/encodings, and converting
# the resulting utf-8 to a specific encoding, according to
# ns/mimetypes.
#

test encoding_ns_http-3.1 {
    File in iso-8859-1 encoding should produce utf-8 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.iso2utf_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 √§√∂√º}


test encoding_ns_http-3.2 {
    File in utf-8 encoding should produce utf-8 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.utf2utf_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 √§√∂√º}


test encoding_ns_http-3.3 {
    File in iso-8859-1 encoding should produce iso-8859-1 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.iso2iso_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=iso-8859-1} 3 √§√∂√º}


test encoding_ns_http-3.3.1 {
    File in iso-8859-2 encoding should produce iso-8859-2 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.iso-8859-2_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -result {200 {text/plain; charset=iso-8859-2} 4 √§√∂√º≈Å}


test encoding_ns_http-3.3.2 {
    File in iso-8859-2 encoding should produce utf-8 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.iso-8859-2_adp?mime=utf]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -result {200 {text/plain; charset=utf-8} 8 √§√∂√º≈Å}


test encoding_ns_http-3.4 {
    File in utf-8 encoding should produce iso-8859-1 output
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.utf2iso_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=iso-8859-1} 3 √§√∂√º}


test encoding_ns_http-3.5 {
    File in iso-8859-1 encoding should produce output with default OutputCharset;
    Content-Type-Header will be changed
} -constraints usingExternalToUtf -body {
#   nstest::http -getbody 1 \
#       -getheaders {Content-Type Content-Length} \
#       GET "/encoding.iso_adp"
    set result [ns_http run [ns_config test listenurl]/encoding.iso_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 √§√∂√º}


test encoding_ns_http-3.6 {
    File in utf-8 encoding should produce output with default OutputCharset;
    Content-Type-Header will be changed
} -constraints usingExternalToUtf -body {
#   nstest::http -getbody 1 \
#       -getheaders {Content-Type Content-Length} \
#       GET "/encoding.utf_adp"
    set result [ns_http run [ns_config test listenurl]/encoding.utf_adp]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 √§√∂√º}


#
# test of ns_adp_mimetype
#

test encoding_ns_http-4.0 {
    Output charset changed to iso-8859-1 with ns_adp_mimetype
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.utf2utf_adp?mime=iso]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=iso-8859-1} 3 √§√∂√º}


test encoding_ns_http-4.1 {
    Output charset changed to utf-8 with ns_adp_mimetype
} -constraints usingExternalToUtf -body {
    set result [ns_http run [ns_config test listenurl]/encoding.iso2iso_adp?mime=utf]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 6 √§√∂√º}


#
# test urlencoding
#

test encoding_ns_http-5.1 {
    Decode url with iso-8859-1 charset
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_conn urlencoding iso8859-1
        set x [ns_queryget x NULL]
        ns_return 200 "text/plain; charset=iso-8859-1" $x
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding?x=%e4%f6%fc]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 √§√∂√º}


test encoding_ns_http-5.2 {
    Decode url with utf-8 charset
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_conn urlencoding utf-8
        set x [ns_queryget x NULL]
        ns_return 200 "text/plain; charset=iso-8859-1" $x
    }
} -body {
    set result [ns_http run [ns_config test listenurl]/encoding?x=%c3%a4%c3%b6%c3%bc]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [dict get $result body]
} -cleanup {
    ns_unregister_op GET /encoding
} -result {200 √§√∂√º}


#
# Test buffer handling during conversion.
#

test encoding_ns_http-6.1 {
    Return a string larger than IOBUFSZ as used in Ns_ConnWriteVChars()
} -constraints usingExternalToUtf -setup {
    ns_register_proc GET /encoding {
        ns_return 200 "text/plain; charset=utf-8" [string repeat x 8193]
    }
} -body {
#   set result [nstest::http -getbody 1 -getheaders content-type GET /encoding]
#       list [lindex $result 0] [lindex $result 1] [string length [lindex $result 2]]
    set result [ns_http run [ns_config test listenurl]/encoding]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [ns_set iget $headers Content-Length]
} -cleanup {
        unset -nocomplain result
    ns_unregister_op GET /encoding
} -result {200 {text/plain; charset=utf-8} 8193}


#
# Make sure static files served directly from disk don't have their
# mime-types charset munged.
#

test encoding_ns_http-7.1 {
    A text/* mime-type.
} -constraints usingExternalToUtf -body {
#   nstest::http -getbody 1 -getheaders content-type GET /hello.html
    set result [ns_http run [ns_config test listenurl]/hello.html]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [dict get $result body]
} -result {200 text/html {Hello World!}}

test encoding_ns_http-7.2 {
    An application/* mime-type for a text document.
} -constraints usingExternalToUtf -body {
#   nstest::http -getbody 1 -getheaders content-type GET /hello.xhtml
    set result [ns_http run [ns_config test listenurl]/hello.xhtml]
    set headers [dict get $result headers]
    list [dict get $result status] \
        [ns_set iget $headers Content-Type] \
        [dict get $result body]
} -result {200 application/xhtml+xml {Hello World!}}




cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
