# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

eval ::tcltest::configure $argv

test ns_conn-1.1 {basic syntax: plain call} -body {
     ns_conn
} -returnCodes error -result {wrong # args: should be "ns_conn option"}

test ns_conn-1.2 {basic syntax: wrong argument} -body {
     ns_conn 123
} -returnCodes error -result {bad option "123": must be auth, authpassword, authuser, channel, clientdata, close, compress, content, contentfile, contentlength, contentsentlength, copy, driver, encoding, fileheaders, filelength, fileoffset, files, flags, form, headers, host, id, isconnected, keepalive, location, method, outputheaders, peeraddr, peerport, pool, port, protocol, query, request, server, sock, start, status, timeout, url, urlc, urlencoding, urlv, version, or zipaccepted}

test ns_conn-1.3.1 {pool} -setup {
    ns_register_proc GET /conn {ns_return 200 text/plain /[ns_conn isconnected]/ }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 /1/}

test ns_conn-1.3.2 {pool} -setup {
    ns_register_proc GET /conn {ns_return 200 text/plain /[ns_conn pool]/ }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 //}

test ns_conn-1.3.3 {server} -setup {
    ns_register_proc GET /conn {ns_return 200 text/plain /[ns_conn server]/ }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 /test/}

test ns_conn-1.3.4 {protocol} -setup {
    ns_register_proc GET /conn {ns_return 200 text/plain /[ns_conn protocol]/ }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 /http/}

test ns_conn-1.3.5 {peeraddr} -setup {
    ns_register_proc GET /conn {ns_return 200 text/plain /[ns_conn peeraddr]/ }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 /127.0.0.1/}


test ns_conn-2.1 {basic operation} -body {
     ns_conn close
} -returnCodes error -result {no current connection}

#
# ns_connchan
#
test ns_connchan-1.0 {basic operation} -body {
     ns_connchan
} -returnCodes error -result {wrong # args: should be "ns_connchan command ?args?"}

test ns_connchan-1.1 {basic operation} -body {
     ns_connchan x
} -returnCodes error -result {bad option "x": must be detach, close, list, callback, write, or read}

test ns_connchan-1.2 {detach without connection} -body {
     ns_connchan detach
} -returnCodes error -result {no current connection}

test ns_connchan-1.3 {detach connection} -setup {
    ns_register_proc GET /conn {
	set handle [ns_connchan detach]
	set list [ns_connchan list]
	ns_connchan close $handle
	# Since we detach the console and close it manually, we user
	# nsvs for result communication
	nsv_set connchan result $handle-[llength $list]-[llength [lindex $list 0]]
    }
    nsv_unset -nocomplain connchan
} -body {
    catch {nstest::http -getbody 1 -- GET /conn}
    nsv_get connchan result
} -cleanup {
    nsv_unset -nocomplain connchan
    ns_unregister_op GET /conn
} -result {conn0-1-8}

test ns_connchan-1.4 {detach connection, return result via "ns_connchan write"} -setup {
    ns_register_proc GET /conn {
	set handle [ns_connchan detach]
	set list [ns_connchan list]
	# ns_connchan is not made for returning in the same connection
	# thread, bug we can use this for testing.
	ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\nHandle = $handle, lengths [llength $list]-[llength [lindex $list 0]]"
	ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 {Handle = conn1, lengths 1-8}}

test ns_connchan-1.5 {detach connection, return error from ns_write via "ns_connchan write"} -setup {
    ns_register_proc GET /conn {
	set handle [ns_connchan detach]
	catch {ns_write foo} errorMsg
	ns_connchan write $handle "HTTP/1.0 200 OK\r\n\r\n$errorMsg"
	ns_connchan close $handle
    }
} -body {
    nstest::http -getbody 1 -- GET /conn
} -cleanup {
    ns_unregister_op GET /conn
} -result {200 {connection channels is detached}}


cleanupTests
