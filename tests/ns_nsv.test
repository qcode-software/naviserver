# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

test ns_nsv-1.1 {basic syntax nsv_set} -body {
    nsv_set 
} -returnCodes error -result {wrong # args: should be "nsv_set array key ?value?"}

test ns_nsv-1.2 {basic syntax nsv_get} -body {
    nsv_get
} -returnCodes error -result {wrong # args: should be "nsv_get array key"}

test ns_nsv-1.3 {basic syntax nsv_exists} -body {
    nsv_exists 
} -returnCodes error -result {wrong # args: should be "nsv_exists array key"}

test ns_nsv-1.4 {basic syntax nsv_append} -body {
    nsv_append
} -returnCodes error -result {wrong # args: should be "nsv_append array key value ?value ...?"}

test ns_nsv-1.5 {basic syntax nsv_lappend} -body {
    nsv_lappend
} -returnCodes error -result {wrong # args: should be "nsv_lappend array key value ?value ...?"}

test ns_nsv-1.6 {basic syntax nsv_incr} -body {
    nsv_incr
} -returnCodes error -result {wrong # args: should be "nsv_incr array key ?count?"}

test ns_nsv-1.7 {basic syntax nsv_unset} -body {
    nsv_unset
} -returnCodes error -result {wrong # args: should be "nsv_unset ?-nocomplain? ?--? array ?key?"}

test ns_nsv-1.8 {basic syntax nsv_array} -body {
    nsv_array
} -returnCodes error -result {wrong # args: should be "nsv_array option ..."}

test ns_nsv-1.9 {basic syntax nsv_array} -body {
    nsv_array ?
} -returnCodes error -result {bad option "?": must be set, reset, get, names, size, or exists}

test ns_nsv-1.10 {basic syntax nsv_names} -body {
    nsv_names zirrZarr
} -result ""



test ns_nsv-2.1 {nsv_set a key} -body {
    nsv_set a k v
} -cleanup {
    nsv_unset -nocomplain a
} -result v

test ns_nsv-2.2 {nsv_set same key} -body {
    nsv_set a k v1
    nsv_set a k v2
} -cleanup {
    nsv_unset -nocomplain a
} -result v2

test ns_nsv-2.3 {nsv_set an "integer" key} -body {
    nsv_set a 1 v
} -cleanup {
    nsv_unset -nocomplain a
} -result v

test ns_nsv-2.4 {nsv_set key with spaces} -body {
    nsv_set a "and now to something different" v
} -cleanup {
    nsv_unset -nocomplain a
} -result v

test ns_nsv-2.5 {nsv_set big value} -body {
    # 1MB
    nsv_set a k [string repeat "x" [expr {1024*1024}]]
} -cleanup {
    nsv_unset -nocomplain a
} -result [string repeat "x" [expr {1024*1024}]]


test ns_nsv-3.1 {nsv_unset too many args} -body {
    nsv_unset a k v x
} -returnCodes error -result {wrong # args: should be "nsv_unset ?-nocomplain? ?--? array ?key?"}

test ns_nsv-3.2 {nsv_unset key} -setup {
    nsv_set a k v
} -body {
    nsv_unset a k
    nsv_exists a k
} -result 0

test ns_nsv-3.3 {nsv_unset an "integer" key} -setup {
    nsv_set a 1 v
} -body {
    nsv_unset a 1
    nsv_exists a 1
} -result 0

test ns_nsv-3.4 {nsv_unset key with spaces} -setup {
    nsv_set a "and now to something different" v
} -body {
    nsv_unset a "and now to something different"
    nsv_exists a "and now to something different"
} -result 0

test ns_nsv-3.5 {nsv_unset array} -setup {
    nsv_set a k1 v1
    nsv_set a k2 v2
    nsv_set a k3 v3
} -body {
    nsv_unset a
    list [nsv_exists a k1] [nsv_exists a k2] [nsv_exists a k3]
} -result {0 0 0}

test ns_nsv-3.6 {nsv_unset non-existing array} -body {
    nsv_unset non_existing_array
} -returnCodes error -result {no such array: non_existing_array}

test ns_nsv-3.7 {nsv_unset non-existing array without complaint} -body {
    nsv_unset -nocomplain non_existing_array
} -result {}

test ns_nsv-3.8 {nsv_unset non-existing key} -setup {
    nsv_set a k v
} -body {
    nsv_unset a missing_key
} -cleanup {
    nsv_unset -nocomplain a
} -returnCodes error -result {no such key: missing_key}

test ns_nsv-3.9 {nsv_unset non-existing key without complaint} -setup {
    nsv_set a k v
} -body {
    nsv_unset -nocomplain a k
} -cleanup {
    nsv_unset a
} -result {}



test ns_nsv-4.1 {nsv_array set} -body {
    nsv_array set a {k1 v1 k2 v2}
    list [nsv_exists a k1] [nsv_exists a k2]
} -cleanup {
    nsv_unset -nocomplain a
} -result {1 1}

test ns_nsv-4.3 {nsv_array names} -setup {
    nsv_array set a {k1 v1 k2 v2}
} -body {
    lsort [nsv_array names a]
} -cleanup {
    nsv_unset -nocomplain a
} -result {k1 k2}

test ns_nsv-4.4 {nsv_array names glob} -setup {
    nsv_array set a {k1 v1 K2 V2}
} -body {
    nsv_array names a k*
} -cleanup {
    nsv_unset -nocomplain a
} -result k1

test ns_nsv-4.5 {nsv_array get} -setup {
    nsv_array set a {k1 v1 k2 v2}
} -body {
    lsort [nsv_array get a]
} -cleanup {
    nsv_unset -nocomplain a
} -result {k1 k2 v1 v2}

test ns_nsv-4.6 {nsv_array get glob} -setup {
    nsv_array set a {k1 v1 K2 V2}
} -body {
    lsort [nsv_array get a k*]
} -cleanup {
    nsv_unset -nocomplain a
} -result {k1 v1}

test ns_nsv-4.7 {nsv_array size} -setup {
    nsv_array set a {k1 v1 k2 v2}
} -body {
    nsv_array size a
} -cleanup {
    nsv_unset -nocomplain a
} -result 2

test ns_nsv-4.8 {nsv_array names reset} -setup {
    nsv_array set a {k1 v1 k2 v2}
} -body {
    nsv_array reset a {k3 v3 k4 v4}
    lsort [nsv_array get a]
} -cleanup {
    nsv_unset -nocomplain a
} -result {k3 k4 v3 v4}

test ns_nsv-4.9 {nsv_array exists} -setup {
    nsv_set a k v
} -body {
    nsv_array exists a
} -cleanup {
    nsv_unset -nocomplain a
} -result 1

test ns_nsv-4.10 {nsv_array exists} -body {
    nsv_array exists noexists
} -result 0



test ns_nsv-5.1 {nsv_get nonexisting key from nonexisting array} -body {
    nsv_get noexist noexist
} -returnCodes error -result {no such array: noexist}

test ns_nsv-5.2 {nsv_get nonexisting key} -setup {
    nsv_set a k1 v1
} -body {
    nsv_get a k2
} -cleanup {
    nsv_unset -nocomplain a
} -returnCodes error -result {no such key: k2}

test ns_nsv-5.3 {nsv_get existing key} -body {
    nsv_set a k v
    nsv_get a k
} -cleanup {
    nsv_unset -nocomplain a
} -result v



test ns_nsv-6.1 {nsv_exists nonexisting key} -body {
    nsv_set a k1 v1
    nsv_exists a k2
} -cleanup {
    nsv_unset -nocomplain a
} -result 0

test ns_nsv-6.2 {nsv_exists existing key} -body {
    nsv_set a k v
    nsv_exists a k
} -cleanup {
    nsv_unset -nocomplain a
} -result 1

test ns_nsv-6.3 {nsv_exists nonexisting array} -body {
    nsv_exists noexist k
} -result 0



test ns_nsv-7.1 {nsv_append} -body {
    nsv_append a k v
    nsv_append a k v
} -cleanup {
    nsv_unset -nocomplain a
} -result vv



test ns_nsv-8.1 {nsv_lappend} -body {
    nsv_lappend a k v
    nsv_lappend a k v
} -cleanup {
    nsv_unset -nocomplain a
} -result {v v}

test ns_nsv-8.3 {nsv_lappend number of elements} -body {
    nsv_lappend a k [list v1 v1]
    nsv_lappend a k [list v2 v2]
    llength [nsv_get a k]
} -cleanup {
    nsv_unset -nocomplain a
} -result 2



test ns_nsv-9.1 {nsv_incr without count} -body {
    nsv_incr a k
    nsv_incr a k
} -cleanup {
    nsv_unset -nocomplain a
} -result 2

test ns_nsv-9.2 {nsv_incr with positive count} -body {
    nsv_incr a k +10
    nsv_incr a k +20
} -cleanup {
    nsv_unset -nocomplain a
} -result 30

test ns_nsv-9.3 {nsv_incr with negative count} -body {
    nsv_incr a k -10
    nsv_incr a k -20
} -cleanup {
    nsv_unset -nocomplain a
} -result -30

test ns_nsv-9.4 {nsv_incr with unrepresentable count} -body {
    nsv_incr a k +1000000000000
} -returnCodes error -match glob -result {integer value too large to represent*}

test ns_nsv-9.5 {nsv_incr from negative to positive} -body {
    nsv_set a k -1
    nsv_incr a k
    nsv_incr a k
} -cleanup {
    nsv_unset -nocomplain a
} -result 1

test ns_nsv-9.6 {nsv_incr type mismatch} -body {
    nsv_incr a k v
} -returnCodes error -result {expected integer but got "v"}

test ns_nsv-9.7 {nsv_incr by zero} -body {
    nsv_incr a k +0
    nsv_incr a k +00
} -cleanup {
    nsv_unset -nocomplain a
} -result 0



test ns_nsv-10.1 {nsv_names} -body {
    nsv_set nsv-a1 k v
    nsv_set nsv-a2 k v
    lsort [nsv_names nsv-a*]
} -result {nsv-a1 nsv-a2}



cleanupTests
