# -*- Tcl -*-

package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv

test ns_parseurl-1.0 {basic syntax: plain call} -body {
     ns_parseurl 
} -returnCodes error -result {wrong # args: should be "ns_parseurl url"}

test ns_parseurl-1.1 {full URL, no port} -body {
    ns_parseurl http://openacs.org/www/t.html
} -result {proto http host openacs.org path www tail t.html}

test ns_parseurl-1.2 {full URL, no port} -body {
    ns_parseurl http://openacs.org:80/www/t.html
} -result {proto http host openacs.org port 80 path www tail t.html}

test ns_parseurl-1.3 {full URL, no port, no component} -body {
    ns_parseurl http://openacs.org/
} -result {proto http host openacs.org path {} tail {}}

test ns_parseurl-1.4 {full URL, no port, no component, no trailing slash} -body {
    ns_parseurl http://openacs.org
} -result {proto http host openacs.org path {} tail {}}

test ns_parseurl-1.5 {full URL, no port, one component} -body {
    ns_parseurl http://openacs.org/t.html
} -result {proto http host openacs.org path {} tail t.html}

#
# relative URLs
#

test ns_parseurl-2.1 {relative URL} -body {
    ns_parseurl /www/t.html
} -result {path www tail t.html}

# legacy NaviServer, desired?
test ns_parseurl-2.2 {relative URL, no leading /} -body {
    ns_parseurl www/t.html
} -result {tail www/t.html}

#
# protocol relative (protocol agnostic) URLs (contained in RFC 3986)
#
test ns_parseurl-3.1 {protocol relative URL with port} -body {
    ns_parseurl //openacs.org/www/t.html
} -result {host openacs.org path www tail t.html}

test ns_parseurl-3.2 {protocol relative URL without port} -body {
    ns_parseurl //openacs.org:80/www/t.html
} -result {host openacs.org port 80 path www tail t.html}


test ns_parseurl-4.0 {URL with colon in the path, but no port provided} -body {
    ns_absoluteurl //google.com:80/test.html http://openacs.org:80
    ns_parseurl https://fcm.googleapis.com/fcm/send/c707XIVXbcY:APA91bEgMg8DNeNapWNKby
} -result {proto https host fcm.googleapis.com path fcm/send tail c707XIVXbcY:APA91bEgMg8DNeNapWNKby}

#
# ns_absoluteurl
#

test ns_absoluteurl-1.0 {basic syntax} -body {
     ns_absoluteurl 
} -returnCodes error -result {wrong # args: should be "ns_absoluteurl partialurl baseurl"}

test ns_absoluteurl-1.1 {invalid syntax for base URL} -body {
     ns_absoluteurl 1 2
} -returnCodes error -result {Could not parse base URL into protocol, host and path}


test ns_absoluteurl-2.1a {replace just the last part} -body {
    ns_absoluteurl foo.html http://openacs.org/www/t.html
} -result {http://openacs.org/www/foo.html}

test ns_absoluteurl-2.1b {replace just the last part, use ip literal notation} -body {
    ns_absoluteurl foo.html {http://[::1]/www/t.html}
} -result {http://[::1]/www/foo.html}

test ns_absoluteurl-2.1c {replace just the last part, use ip literal notation} -body {
    ns_absoluteurl foo.html {http://[::1]:80/www/t.html}
} -result {http://[::1]:80/www/foo.html}


test ns_absoluteurl-2.2 {replace the whole path} -body {
    ns_absoluteurl /foo.html http://openacs.org/www/t.html
} -result {http://openacs.org/foo.html}

test ns_absoluteurl-2.3a {replace the protocol} -body {
    ns_absoluteurl //google.com http://openacs.org/www/t.html
} -result {http://google.com/}

test ns_absoluteurl-2.3b {replace the protocol} -body {
    ns_absoluteurl //google.com https://openacs.org/www/t.html
} -result {https://google.com/}

test ns_absoluteurl-2.3c {replace the protocol} -body {
    ns_absoluteurl //google.com/test.html https://openacs.org/www/t.html
} -result {https://google.com/test.html}


test ns_absoluteurl-3.0 {incomplete base URL} -body {
    ns_absoluteurl //google.com/test.html //openacs.org/www/t.html
} -returnCodes error -result {Could not parse base URL into protocol, host and path}

test ns_absoluteurl-3.1a {base URL containing just protocol and host} -body {
    ns_absoluteurl //google.com/test.html http://openacs.org/
} -result {http://google.com/test.html}
test ns_absoluteurl-3.1b {base URL containing just protocol and host} -body {
    ns_absoluteurl //google.com:80/test.html http://openacs.org/
} -result {http://google.com:80/test.html}
test ns_absoluteurl-3.1c {base URL containing just protocol and host} -body {
    ns_absoluteurl //google.com:80/test.html http://openacs.org:80/
} -result {http://google.com:80/test.html}

test ns_absoluteurl-3.2a {base URL containing just protocol and host, no slash} -body {
    ns_absoluteurl //google.com/test.html http://openacs.org
} -result {http://google.com/test.html}
test ns_absoluteurl-3.2b {base URL containing just protocol and host, no slash} -body {
    ns_absoluteurl //google.com:80/test.html http://openacs.org
} -result {http://google.com:80/test.html}
test ns_absoluteurl-3.2c {base URL containing just protocol and host, no slash} -body {
    ns_absoluteurl //google.com:80/test.html http://openacs.org:80
} -result {http://google.com:80/test.html}




cleanupTests

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
