=======================================
NaviServer 4.99.11, released 2016-05-01
=======================================

Changes relative to 4.99.10

 156 files changed, 8613 insertions(+), 3142 deletions(-)

New Features:

  * IPv6 support: NaviServer works now with IPv6 and IPv4
    addresses.  It is e.g. possible to use "::" as address (to denote
    the unspecified address, roughly similar to 0.0.0.0 in IPv4) to
    accept any IPv6 or IPv4 address, when the OS supports IPv4-mapped
    addresses, or one can use arbitrary addresses. Note, that one can
    as well load the driver for a server multiple times, once with an
    IPv6 and once with an IPv4 address.  Adding this feature required
    changes in the drivers, since earlier versions had IPv4 structures
    compiled in. As a consequence, also drivers for additional
    protocols have to be adjusted (for this release, the IPv6-adjusted
    modules are all modules of the naviserver core, plus nsssl, nsudp,
    nssmtpd, nsdns)

  * Added HTTP/1.1 pipelining support: Pipelining is a (not so often
    used) feature of HTTP/1.1 where multiple requests are sent on a
    persistent connection without waiting for the results of the first
    request. Recently more (esp. mobile) clients started to use
    pipelining. Previous versions of NaviServer handled just the first
    request of the pipeline and swallowed (ignored) later requests of
    the pipeline.

  * Added support for HTML5 file attribute "multiple": HTML5 allows
    for uploading multiple files under the same INPUT name. Previous
    version of NaviServer just accepted the first file with the given
    name.

  * Reduced memory consumption:
  
    - Improved support from upload handling of large input. When
      uploads larger than "maxupload" is spooled to a file, the
      results are available via [ns_conn contentfile] rather than
      [ns_conn content].  There might be many places in application
      programs, where this distinction might be relevant. The new
      version gets now form content via [ns_getform] from both
      sources, fixes potential encoding problems.  Similarly, the new
      function [ns_getcontent] returns the unparsed content either
      binary or encoded as file or as string. These new features makes
      it easer to use upload spooling to avoid memory bloats.
      
    - Furthermore, (spooled) files can be sent from disk to some http
      server via ns_http (or ns_ssl) without the need to load the
      content first to memory by using the new parameter body_file)

  * Improved crypto-support: the new version supports SHA2 hashcodes
    (command ns_sha2) and keyed message authentications based on SHA2
    (command ns_hmac_sha2). The new version uses the C implementation
    of the crypto functions by Olivier Gay <olivier.gay@a3.epfl.ch>.

  * Reduced memory consumption: avoid memory bloat on uploads and in
    HTTP client operations with large contents (esp. useful for
    contents >1GB).  ns_getform an the new ns_getcontent work now on
    spooled and in-memory content in a uniform manner.
    
  * Improved debugging support: new severity "Debug(request)" can be
    used follow life-time of a request (useful especially for
    inspecting concurrency of long-running requests).


Bug Fixes:

 - Fixed potential lockup, when bind operation fails,
   e.g. when server is already running (old bug)

 - Keep query parameter after directory induced redirect in fastpath
   (bug report of David Osborne in the NaviServer list)
   
 - Don't swallow erroneous HTTP requests: previously, error replies
   generated from the driver (e.g. 400 invalid request) were
   not logged at all (neither in the access.log or in the error.log).
   This is due to the nature, how the nslog modules works. Now
   such conditions are reported in the error.log.

 - Make HTTP-request line parser more precise. Previously
   many invalid requests were treated as HTTP/0.9 requests leading
   to strange error messages.

 - Provide more (and more detailed) error messages to ease debugging.

 - Improve validity of HTML error messages generated by NaviServer

 - Resurrect handling of non-HTTP drivers (based on
   drvPtr->requestProc) such as nssmtpd.

 - apply url-encoded form parsing only when content is
   www-form-urlencoded.  Previously, it was attempted on every content
   which might lead to unexpected results.

Documentation improvements:

 - Align style and logo of default web server configuration with style
   of man pages
 - Improved validity of HTML man pages
 - Fixed documentation bug on ns_cookie
 - Improved documentation of configure parameters
  - various more man pages updated 

Tcl API Changes:

  - new function: [ns_info ipv6] obtains information whether the binary
    supports IPv6 or not

  - As a consequence of "multiple file" support (see above) the
    following functions return for the specified name potentially a
    list of values
    
        [ns_conn fileoffset $name]
	[ns_conn filelength $name]
	[ns_conn fileheaders $name]
	
    and the ns_set returned by [ns_getform] will contain multiple
    entries for the file (and $name.tmpfile and $name.content-type).

  - new commands:
      * ns_sha2 ?-length ...? data
      * ns_hmac_sha2 ?-length ...? key message
      * ns_getcontent (obtain body of request either from memory
        of from spoolfile without memory bloat on huge files)

  - new option "-body_file" for ns_http and ns_ssl. By using this
    parameter one can send huge files without memory bloat
    (i.e. loading the full file into memory). The function is more or
    less the counterpart to the spoolfile for uploads when the content
    is larger than maxupload.

  - ns_getform processes content from [ns_conn content] or
    [ns_conn contentfile] (whatever is available).

  - interface change:
      * old interface of ns_sendmail based on positional arguments is deprecated
      * new interface of ns_sendmail is
          ns_sendmail ?-to ...?  ?-from ...? ?-subject ...? ?-body ...? \
                      ?-headers ...? ?-bcc ...? ?-cc ...?
      
C API Changes:
  - New functions:
  
    * Ns_HttpParseHost(): parses host and port number from a string.
      Reason: IPv4 address conventions use simply a colon for
      separating host and port, but IPv6 address contain as well
      various colons. The new function supports IP-literal notation
      according to RFC 3986 section 3.2.2 (IP address between square
      brackets), which has to be used as well for IPv6.
      
    * Similarly, the new function Ns_HttpLocationString() to unifies
      now generation of host and location strings

    * New IP version agnostic functions for manipulating sockets,
      addresses and ports:
	Ns_LogSockaddr(), Ns_SockaddrGetPort(), Ns_SockaddrGetSockLen(),
	Ns_SockaddrMask(), Ns_SockaddrMaskBits(), Ns_SockaddrSetPort(),
	Ns_SockaddrSameIP(), ns_inet_ntop(), ns_inet_pton()
	
    * New function Ns_ConnReturnInvalidMethod() to report that the provided
      method is invalid (was returning "not found" before)

    * New function Ns_DStringAppendPrintable() to append a string which might
      contain non-printable characters in a printable fashion to a DString
      (useful for e.g. debugging)

    * Ns_Stat() is the former function FastStat() from fastpath made
      reusable in other modules.

  - Changed C-API functions (incompatible with earlier versions):
    * The following function accept now generic (version agnostic) sockaddr:
      Ns_BindSock(), Ns_ConnSetPeer(), Ns_GetSockAddr(),
      Ns_SockBind(), Ns_SockBindUdp()
    * Ns_CtxString() renamed to Ns_HexString() to make its intention
      more clear and added a parameter to control lower and upper case



Configuration Changes:
  * New configure flag --disable-ipv6 to build NaviServer just with IPv4 support,
    even when IPv6 support is available.
  * Updated sample config files for IPv6
  * Added makefile target: "lldb-sample" lets one running nsd with
    the sample config file "nsd-config.tcl" under lldb

Command Line Changes:
  * Extended prebind options to work with IPv6 addresses

Code Changes:

  * All built-in MIME types are updated and completed with the IANA
    media type definitions. Warning: This change might return now
    different results from ns_guesstype unless the mime type is
    specified in the config file.

  * Improve reusability: The new version exports the low-level I/O functions
    of nssock to make it reusable in other driver modules. The following
    functions are now exported to a library:
  	Ns_DriverSockAccept(), Ns_DriverSockRecv(), Ns_DriverSockSend(),
	Ns_DriverSockClose()

  * Code cleanup:
    - used clean approach to obtain hex string from function pointer
    - use boolean types on more occasions
    - use more often typedef-ed function definitions
    - make NS_TCL_SET_STATIC and NS_TCL_SET_DYNAMIC an enum
      (Ns_TclSetType), since the values are mutual exclusive
    
  * Regression tests
    - extended test (we have now 1084 test cases)
    - remove deprecated calls
 
=======================================
NaviServer 4.99.10, released 2016-02-16
=======================================

Changes relative to 4.99.9
 32 files changed, 404 insertions(+), 123 deletions(-)

Bug Fixes:
- fix potential race condidion for configure value "connsperthread"
- fix conflicting prototypes in nsdbpg (on some compilers)

Documentation improvements:
 * add list of deprecated tcl-commands to documentation
 * fix spelling errors

Code Changes:
 * added log entries, when deprecated tcl-commands are called
 * remove obsolete .cvsignore files from repo
 * use SCNd64 instread of PRId64 for scanning numbers
 * further cleanup of the compatibility layer of the PRI*PTR macros
 * add parallel checks and inconclusive results to cppcheck options
 * use native bool definition when available
 * add target to makefile for testing under lldb
 * further code cleanup

Important changes in modules:
 * nsdbpg: fix conflicting prototype
 * nsssl: don't crash when fetching obtaining DH parameters from pem file fails


======================================
NaviServer 4.99.9, released 2016-01-11
======================================

Changes relative to 4.99.8
 146 files changed, 5595 insertions(+), 4389 deletions(-)

New Features:

  * New command "ns_urlspace": this command allows to attach and
    retrieve arbitrary data to URLs in a hierarchical manner form the
    Tcl level. The command allows e.g.  to write ns-perm like access
    control in Tcl without much hassle.

       ns_urlspace set ?-id i? ?-key k? ?-noinherit? /url/ string
       ns_urlspace get ?-exact? ?-id i? ?-key k? ?-noinherit? /url/
       ns_urlspace list
       ns_urlspace new
       ns_urlspace unset ?-id i? ?-key k? ?-noinherit? ?-recurse? /url/

  * Added ability to optionally minify css and js files on the fly
    when gzipped content is requested. This is an extension of the
    gzip_static/gzip_refresh feature (for details see "fastpath" section
    in "ns_return" man page.

  * New statistics from nsdb interface: "ns_db stats" returns
    number and time of handle and sql operations (can be used
    in connection with e.g. munin for monitoring db health)

  * Added ability to pass env to ns_proxy (for details see
    man page of ns_proxy)

  * Added ability to keep "Host:" header in http client requests
    (for details, see man page of ns_http)

  * Improved logging support:

    - Added log colorization based on ANSI color codes. This feature
      makes it easier to spot error and warning in the error log
      file. Log colorization is turned on via configuration parameter
      "logcolorize" in the "ns/parameters" section in the NaviServer
      config file. Fine-tuning is possible via "logprefixcolor",
      "logprefixintensity" and per severity via
      
          ns_logctl severity severity-level ?-color color? \
             ?-intensity intensity? ?bool?

      When viewing a colorized error.log with less, use "less -r".

    - Added ability to log selectively SQL statements depending on
      pool and duration of the SQL command (configuration parameter
      "logMinDuration" for per-pool configuration sections,
      new command "ns_db logminduration ...").
      
    - Provide context in error log entries, when Tcl eval raises
      an error (this allows better distinction from where the
      exception was raised)

    - Added TCP_FASTOPEN support for Mac OS X 10.11

Bug Fixes:
  * the urlspace code now can be compiled with and without
    __URLSPACE_OPTIMIZE__. The performance difference is
    probably for most application little.
  * fix "floating-point" format for Ns_ObjvTime():
    1.05 was interpreted as 1.5 before
  * fix binary handling and content-type in http client
    requests (e.g. for -body in ns_http command)
  * fix bad interaction between chunked encoding and gzipped
    content (when closing gzip stream)
  * Added config option for disabling directorylisting
    (fastpath config option "directorylisting none")
  * fix quoted entries in access log, when quotes are contained
    in the content
  * Don't use TCP_CORK on UDP sockets
  * Ensure list nature of errorCode is preserved in proxy calls
  * Remove potential xss attack (mostly false positives) on error
    messages that are directly generated from user strings by NaviServer
  * Improved "signal lost" handling (timeout happens, but connPtr is
    provided). On some sites the previous approach was leading to a
    state stuck in a while in the error state.
  * Fixed off-by-one error in ns_server.  NsTclServerObjCmd was
    incorrectly checking argc after parsing options. As a result,
    "ns_server -pool {}" (pool given, no subcommand) would segfault.


Documentation improvements:
  * fix obsolete documentation for ns_register_proc
  * new man page for "ns_urlspace"
  * improve documentation for main-features, ns_cache, ns_connchan,
    ns_db, ns_http, ns_job, ns_log, ns_normalizepath, ns_proxy,
    ns_register, ns_return, ns_sleep, ns_time, nsv,
  * include logo of generated html docs via css to ease Debian
    packaging (silence lintian)


Tcl API Changes:
  * improve compatibility of ns_eval with Tcl's eval.
  * new API functions
    - ns_urlspace set|get|list|new|unset ...
    - ns_logctl severity severity-level ?-color color? ?-intensity intensity? ?bool?
    - ns_db logminduration ...
    - ns_db stats
    - ns_proxy config ... -env ns-set ...
    - ns_http queue .... -keep_host_header
    
  
C API Changes:
  * Added Ns_GetTimeFromString: provide API callable from config file to
    convert strings to ns_time (supporting "sec:usec" and "sec.fraction"
    formats)
  * Mark broken and unused function Ns_UrlSpecificGetFast() as deprecated
  * Added Ns_(No)CloseOnExec implementation for Win32
  * Added Ns_SetIUpdate()
  * Ns_Cancel(), Ns_Pause(), Ns_Resume() return "bool" instead of "int"


Incompatible API Changes:
  * Potential incompatibility: "ns_eval" behaves now closer to
    Tcl "eval" (e.g. allows to define procs with comments)


Configuration Changes:
  * Improved sample configuration for OpenACS, sample-config
    and nsssl
  * Added cppcheck target to Makefile.module


Code Changes:
  * Updated list of known HTTP status codes  
  * Code cleanup:
    - use real boolean type when C99 is available
      (necessary for modules implemented in C++)
    - add const declarations
    - reduce implicit signed/unsigned conversions
    - reduce variable scopes
    - make code more uniform
    - better handling of nonnull asserts
      (don't raise warnings for these cases
       for most-recent gcc6 versions, when -pedantic is used)
    - prefer single returns from functions when possible
    - use NaviServer argv passing Ns_ParseObjv() on more
      occasions
    - replaced obsolete function 'asctime' by strftime
    - added fallback for definition of L_tmpnam, since the fallback
      from Tcl was removed on 2015-07-15
    - various changes for further silencing of static checkers
      (cppcheck and clang static checker)
 * Extended regression tests


Important changes in modules:
 * nsdbpg: fixes for "ns_pg blob*"
 * nsstats: added db-pool statistics, improved formatting
 * nsssl:
   - improved binary handling for "-body" (client procs),
   - ability to keep "Host:" header field
 * nsdbpg, nssmtpd, nsdns, nssnmp, nsudp, nsphp,nsdhcpd, nsssl, nsdbi:
   - code cleanup
 * changes in modules:  
    13 files changed, 116 insertions(+), 856 deletions(-)


======================================
NaviServer 4.99.8, released 2015-04-13
======================================

Changes relative to 4.99.7
  55 files changed, 1088 insertions(+), 527 deletions(-)

New Features:
  * ns_md5, ns_sha1: added binary support
    When binary data is passed to this function, use
    Tcl byte-array operations instead of string operations
  * Added ability to debug configuration of nscgi via
    "ns_logctl severity Debug(cgi) on"    
  * Added config parameter "compresspreinit": Setting this parameter
    to true (default is false) will cause the compression stream
    buffers to be allocated and initialized at server startup.
    Without it, they will be allocated and initialized as needed.  This
    change drops the initial memory footprint of a server with a
    default config significantly.

Bug Fixes:
  * Fixed bug reported by Wolfgang Winkler, when " ns_urldecode --" was 
    called (switched to regular argv parser)
  * Fixed bug, when "ns_conn content" was called without content
    potential race conditions on thread exits
  * Fixed potential race conditions on thread exits
  * ns_md5: Code generation was broken
    (probably since a long time, due to a mix up of somewhat tricky casts)
  * Fixed warning in interaction between TCP_CORK and nsssl
  * Fixed bug, where one thread frees a nsv-array, but an internal
    representation of an Tcl_Obj for this array was still active in
    another thread
  * Fixed bug where ns_imgsize returned an error where it should return
    success and width and height returned as 0 (according to documentation)
  * Avoid potential access of string past null character
  * Fixed a bug with in https client commands (ns_ssl) when paths and parameters
    are passed.
  * Fixed nsphp compilation (and "make php").
    Many thanks to Branden Graves for feedback and testing.
    
Documentation improvements:
  * Added documentation for ns_md5
  * Improved documentation for ns_img commands
  * Improved documentation for nscgi
  
Configuration Changes:
  * Improved sample configuration for OpenACS and nsssl
  * Improved Makefiles (reduce redundancy for CFLAGS)
  * Improved rpath handling in configure.ac for Linux distros,
    where TCL_CC_SEARCH_FLAGS and TCL_LD_SEARCH_FLAGS are set
    empty, like e.g.Debian  

Code Changes:
  * Extended Regression Test:
    - Added test set for ns_md5, compared results with other implementations
    - Added binary regression test for ns_md5 and ns_sha1
    - Added test set for ns_md5
    - Improved robustness of tests for ns_parseargs
    - Added tests for "ns_urldecode --"
    - Added test set infrastructure (nstest::https, server setup) and
      test cases for nsssl
    - Added test set for ns_img* commands
    - Number of regression tests passed 1000
    
  * Reduced implicit type conversions and other minor code cleanups
  * Protect against potential buffer overruns


======================================
NaviServer 4.99.7, released 2015-02-23
======================================

Changes relative to 4.99.6
    216 files changed, 20967 insertions(+), 13287 deletions(-)

New Features:

  * Added Interface to NaviServer to read/write directly
    via driver routines. The new command "ns_connchan"
    provides a higher level alternative to the idiom
    "ns_conn channel" + Tcl-commands. The new command
    uses the internal socketcallback infrastructure and allows to
    
      - detach the currently open connection channel from a
        connection thread, to
      - read/write/close the channel from other threads, and to
      - query the states to then currently detached channels
        (similar to "ns_writer list")
      
    By accessing the driver infrastructure, "ns_connchan" makes it
    possible to read/write from/to SSL/TLS channels. The new command
    makes it easy e.g.  to implement WebSockets over SSL/TLS
    (ws://... and wss://...) which is not possible with the
    pre-existing infrastructure.

    Summary of Advantages:
      * use the same interface for http and https (and other drivers)
      * no (potential) problems with select() in Tcl when using
        many (>1024) file descriptors
      * less potential problems with Tcl-Sockets (buffering, translations)
      * lower resource consumption

    Implemented interface:
       ns_connchan detach
       ns_connchan close channel
       ns_connchan list ?-server server?
       ns_connchan callback ?-timeout s? ?-receivetimeout s? ?-sendtimeout s? channel command when
       ns_connchan read channel
       ns_connchan write channel string

  * Improved ns_log handling
    - New subcommand [ns_log stats] returns the statistics
      from calls to ns_log by severity-level. This allows
      to write monitoring tools to provide rough overviews
      at which time at which server what kind of
      servers/warnings/... were produced
      
    - Allow to modify logging of sql statements via
         ns_logctl severity Debug(sql) on
      at runtime
      
    - Add debugging severity for tasks "Debug(task)"

  * Added ability to load a driver module without listening on a
    port: This is useful in cases, where the driver registers
    client commands (such as nssock or nsssl) and only these
    are wanted. Loading the driver without listening can be
    achieved by specifying "0" for the port.

  * Improved support for windows compilation with native compilers
    for 32 and 64 bit (Many thanks to Andreas Piskorski)


Performance Improvements:
  - Added more compiler hints likely/unlikely
  - Made Ns_Encrypt threadsafe under Linux (reduce mutex)
  - Use getpwnam_r, getpwuid_r, getgrnam_r, and getgrgid_r instead of
    their thread-unsafe counterparts. This change allow these functions
    to run without locking.
  - Reduced size of compressed requests in several situations (empty io_vecs)


Bug Fixes:
  * Fixed encoding in [ns_conn content]
  * Fixed incorrect result of "ns_conn protocol" (returned empty)
  * Fixed crash when a thread was created with
    "ns_thread begindetached" and an error occurred
    during startup
  * Fixed memory management for TclThread by moving TclThreadArg into
    thread local storage
  * Fixed race condition in TLS cleanup
  * Fixed bug in argument parsing of "ns_cond"
  * Fixed setting of private/shared in ns_module
  * Fixed bug with "ns_adp_ctl stream on"
  * Moved network module filtering to the front to avoid double loading
    of Tcl modules (many thanks to William Scott Jordan for the fix)
  * ns_http:
    - Fixed trailing slashes in some urls
    - Fixed possible race condition when time gap between "ns_http queue"
      and "ns_http wait" is larger
  * Minor fixes in nscgi
  * Windows fixes
    - Fixed weird bugs when Tcl-functions are called during
      load of .dll files (showed up as hanging/crashing functions
      returning time from Tcl)
    - Fixed Ns_NormalizePath() for //foo/bar paths on Win32 (bug #1162890)
    - Use distinct bit-patterns for signal detection under windows.
    - Fixed array unset bug
  * Fixed a potential race condition in writer threads
  * [ns_perm delperm]: Fixed ignoring of argument "-noinherit"
  * Fixed reply headers in HEAD requests


Documentation improvements:
  - Improved typesetting, wording
  - Removed more obsolete content (e.g. concerning CVS, old dummy parameters)
  - Use examples from existing code basis
  - Improved comment density in source code
  - Documented missing subcommands, such as "ns_time format"


Tcl API Changes:
  * Marked "ns_geturl" as deprecated, use ns_http instead
  * Marked redundant names of subcommands in "ns_thread" as deprecated
    - ns_thread begin -> ns_thread create
    - ns_thread getid -> ns_thread id
    - ns_thread join -> ns_thread wait
    - ns_thread get -> ns_thread handle
  * Allow time interval of "-timeout" for "ns_db gethandle" to be
    specified with second factions (in the usual "ns_time" format)


C API Changes:
  - [ns_conn content]: new flag "-binary" to return always the raw bytes
  - [ns_thread begin|begindetached]: added flag "-name" for naming
    thread explicit


Configuration Changes:
  - Updated Makefiles as recommended in documentation


Code Changes:

  * Many of the changes are the result of a (sometimes over-picky)
    code-checkers on unix and windows systems, in particular pc-lint,
    cppcheck and the clang static checkers. Many thanks to
    Maurizio Martignano for setting up the testing framework
    based on SonarQube and for eagerly pull in updates.
  
  * Function prototypes and API definition
    - add missing function prototypes
    - removed occurrences of old-style prototypes (when functions are defined without arguments)
    - removed unneeded external references and symbols and unreferenced enumeration values
    - aligned argument names in function prototypes with function definitions
    - added non-null/returns non-null assertions for prototypes    
    - added asserts to check non-null properties
    - added "const" when appropriate
    - added missing "static" declarations

  * Improved and more consistent macro definitions
    - use INT2PTR and PTR2INT consistently when converting between
      integers and pointers
    - use NS_TRUE/NS_FALSE instead of 1/0
    - use NS_INVALID_FD instead of -1
    - use NS_SOCKET and NS_INVALID_SOCKET instead of int/-1
    - use NS_INVALID_PID for invalid pids
    - change from usage of -1 or INVALID_SOCKET (windows predefined constant)
      to NS_INVALID_SOCKET due to confusions
    - use UNUSED consistently
    - character properties and conversions
       . new macro CHARTYPE for testing character properties
       . new macro CHARCONV for converting characters
    - added a new macros PTR2NSSOCK and NSSOCK2PTR in analogy to PTR2INT
      and INT2PTR to mask more win incompatibilities       
    - prefer "const" over "CONST" unless in Tcl interface
    - improved consistency of variable and macro naming
    - put macro values into parenthesis

  * Improved general code quality
    - reduced variable scopes
    - remove cases of undefined C behavior
    - prefer leaving a switch statement via "break", and not via "return"
    - move assignments out of if-conditions
    - brace body of "if" statements and "for" loops
    - make ignoring of function results explicit
    - avoid shadowing of variable names
    - fix potentially uninitialized local and static variables

  * Used more precise and consistent types
    - prefer type "bool" over "int" when appropriate
    - use unsigned types for bit operations
    - prefer size_t, ssize_t, socklen_t, pid_t, nfds_t over int
    - use consistently uintptr_t for nextids
    - use enumerations instead of plain defines on some occasions    
    - prefer boolean expression
    - reduce implicit conversions
      (signed/unsigned, signed constants, loss of precision, ...)
    - removed many cases of casts of complex expressions
    - reduce prohibited operations with plain (signed) chars
    - recast results of <<
    - standardize type definitions of objv in ObjCmds to the
      variant recommended by Tcl man pages

  * Improved C-standard compliance
    - silence "-pedantic" compilation with -stc=c99 under linux on most cases
    - avoid c90 identifiers starting with str[a-z], to[a-z], E[A-Z], _*
    - avoid c90 reserved identifier "signal", "free", "remove", "time"
    - added missing printf macros

  * Improved usage of c-library functions and OS abstraction
     - use arc4random() when available
     - use crypt_r() when available
     - prefer memcpy() over strncpy(), since it has in most cases the
       appropriate semantics and it is faster
    - new/fixed OS abstractions functions/macros:
       ns_lseek, ns_dup, ns_dup2, use ns_open, ns_close, ns_lseek, ns_dup,
       ns_dup2, ns_write, ns_read, ns_mkstemp

  * Removed potential crashes from buffer overflows
     - use memory bounded functions instead of potentially buffer
       overflowing functions
     - replace unsafe atof() by strtod()
     - replace unsafe atoi() by strtol()
     - replace call to deprecated function asctime() by a call to
       asctime_s()
     - remove hard-coded sizes of ip-addresses and replace it by NS_IPADDR_SIZE
     - don't hardcode sizes for string arrays

  * Use of modern-style argument parser Ns_ParseObjv() on several places
    instead of manual argv parsing 
	ns_job interface, ns_truncate, ns_ftruncate,
	ns_addrbyhost, ns_hostbyaddr
	
  * Make mutex timings configurable via #define NS_NO_MUTEX_TIMING

  * Improved code formatting
    - add emacs editor hints to to keep formatting conventions
    - prefer spaces over tabs
    
  * Extended regression test


Changes in Modules worth to be noted:

  * websocket:
    New module implementing a WebSocket interface.  This is a Tcl-only
    module defined with two sample applications (chat and a file
    watcher for e.g error.log and access.log).  It support ws://
    (WebSocket over http) and wss:// (WebSocket over https).  For
    details and configuration, see the README file of the module.
    
  * nszlib:
    Added commands:

      ns_zlib deflate /data/
      ns_zlib inflate /data/

    which are compatible with the same-named php functions.
    [ns_zlib deflate ...] returns the raw compressed binary data.
    These functions are e.g. needed e.g. when implementing
    as sasl interface for shibboleth.

 * nsssl:
    - Ability to load the module without listening to socket by
     specifying 0 as port.  This is useful for e.g. just using the HTTPS
     client command ns_ssl.
   - Update configuration recommendations 

 * nsoracle:
   Backport of the nsoracle driver from AOLserver to NaviServer with
   code cleanup.


======================================
NaviServer 4.99.6, released 2014-06-29
======================================

Changes relative to 4.99.5
    198 files changed, 4972 insertions(+), 2657 deletions(-)

New Features/Performance Improvements:

    * Added support for delivering static gzipped content 
      via ns/fastpath.
      NaviServer allows now deliver gzipped content for static files
      in cases the client requests for this. The gzipped files 
      are stored
      statically in the file system like the unzipped content. Therefore
      the file delivery of gzipped content can be performed without 
      runtime penalty. NaviServer compares the time stamps of the
      compressed and uncompressed content. If the time-stamp of the
      uncompressed content is changed, NaviServer refreshes the
      compressed content automatically.

      The static gzip delivery is controlled over the following
      configuration parameters:

	- parameter "gzip_static" for "ns/fastpath" (default false)

	  Send the gzipped version of the file if available and the
  	  client accepts gzipped content. When a file path/foo.ext is
  	  requested, and there exists a file path/foo.ext.gz, and the
  	  timestamp of the gzipped file is equal or newer than the
  	  source file, use the gzipped file for delivery.

	- parameter "gzip_cmd" for "ns/fastpath" (default "")

  	  Command for zipping files in case the (static) gzipped
	  version of the file is older than the source. The command is
	  just used for re- gzipping outdated files, it does not
	  actively compress files, which were previously not
	  compressed (this would be wasteful for e.g.  large tmp
	  files, there is not cleanup, etc.). If this parameter is not
	  defined, outdated gzipped files are ignored, and a warning
	  is written to the error.log. Example setting: 
          "/usr/bin/gzip -9".

        - parameter "gzip_refresh" (default false)

          When the parameter is set to true and the modification time
          of the compressed file is older than the modification time
          of the source then refresh the compressed file automatically
          with the command "::ns_gzipfile source target". When this
          parameter is not defined (or the refresh cmd fails),
          outdated gzip-ed files are ignored, a warning is written to
          the error.log and the content is delivered uncompressed.

      The content is never delivered gzipped on range requests. 



    * Security improvements:

      - Prevent potential HTTP response splitting attack: all response
        header fields are sanitized to avoid injection of header file
        contents potentially leading to HTTP response splitting attacks.

      - Improved nsssl driver
        * provide forward secrecy and DH key exchange with precompiled
          defaults
        * support elliptic curve cryptography (ECDH)
        * deactivated SSLv2

      - By using parameter "extraheaders" (see below) in nsssl one can
	activate HTTP Strict Transport Security (HSTS) for nsssl (see
	https://bitbucket.org/naviserver/nsssl/)

      - The sample configuration of nsssl leads to a "A+" rating from
        SSL labs.


    * Mime-types overhaul:
       
      - NaviServer supports now the all mimetypes as defined via RFCs,
	W3C and IANA
      - Some incorrect mimetypes are fixed
      - scripted mimetype definitions produce warnings on overwriting
        of mimetypes and on useless definitions.


   * Modules update:

      - include nsdbi* in packaged module tar file
      - extended options in ns_dbi for dbi_rows
      - added compatibility to nsdns for new versions of DiG (9.10.*)
      - fixes for nsudp (HTTP over UDP), nsdbpg, nszlib, 
        nssmtpd, nsstats


Bug Fixes:

    * Tcl argument list parser: The old implementation could lead to
      crashes when Tcl_Objs where shared and the internal validation
      of the internal representation failed.

      Tcl_GetIndexFromObj() validates internal representations based
      on the pointer of the base string table, which works only
      reliably with static string tables. Since command definitions
      contain non-static fields (which cannot be determined at compile
      time) NaviServer can't use static string tables, but uses
      stack-allocated string tables for command definitions. This can
      lead to mix-ups for shared Tcl_Objs (keeping base of string
      table and index) in case two string tables are at the same
      position on the stack. As a consequence, the internal
      representation with a potentially wrong index is reused,
      leading to potential crashes. Now. the caching is only allowed
      for non-shared Tcl_Objs.

    * Module loading: Previous versions of NaviServer loaded always
      "global modules" after per-server modules (and after blueprint
      generation).  If e.g. a database modules was loaded globally, it
      was not possible to refer to its defined command from the
      blueprint. Now, just the loading of network modules happens in
      the strict old order.

    * Ns_CacheUnsetValue() is now more robust against code, where
      freeProc calls a ns_cache operation (such as
      e.g. nsdbipg). Before that modification, double free operations
      were possible when the cache was pruned.  

    * Make sure to initialize all members of Ns_DriverInitData to zero

    * sockcallback.c: fix size of reallocation unit (many thanks to
      Wolfgang Winkler for pointing this out)

    * tclmisc.c: fix incorrect type for allocation unit (sha context
      instead of md5 context)

    * Fix flag settings in ns_adp_parse

    * Fix clock ensemble oddity in blueprint (error message: Error:
      time zone ":Tcl/Localtime" not found; many thanks to 
      David Osborne)

    * Save Tcl interpreter aliases and ensembles in blueprint (Many
      thanks to Jeff Rogers)

    * Fix generation of documentation: dtplite from tcllib 1.15 does
      not allow spaces in "titles" of manpages. Fix all manpages, such
      that build-doc works again.


Documentation improvements:

    * Doc page for ns_return: added section for describing 
      fastpath configuration

    * Document that "ns_conn compress 0" can deactivate compression

    * Updated documentation of deprecated commands in the source

    * Fixed/updated/extended various man pages such as ns_tmpnam,
      ns_getform, ns_set

    * Removed obsolete commands from the documentation (ns_set with
      -persist, -shared, ns_share)
        

Tcl API Changes:

    * ns_setcookie, ns_getcookie ns_deletecookie:

      - ns_setcookie, ns_deletecookie: added flag "-replace" to
        replace already issued cookie requests in output headers; the
        same option is used in OpenACS.

      - ns_setcookie: added option "-discard" as specified in RFC 2965

      - ns_getcookie: added option ?-include_set_cookies bool? to
        search cookies being set as well (from output headers); the
        same option is used in OpenACS.
 
    * ns_http: 

      - Added flags "-file /varName/" and "-spoolsize /int/" to
        "ns_http wait". If the content of the obtained file is larger
        or equal than spoolsize, it is spooled to temp file,
	and the name of the temp file is returned in the 
        variable provided by "-file". These options make it 
        possible to retrieve also large
	content (e.g. video files) via ns_http without bloating memory

      - Additional parameter "-decompress" for "ns_http wait" to
	compress the result on the fly (incrementally) in 
        case it is content encoding is "gzip"

    * ns_time: add option "ns_time format" to print a time 
      in the sec:usec format in secs in a decimal dot notation

    * Mark ns_tmpnam as deprecated since it uses an 
      deprecated C-library function (use ns_mktemp instead)

    * Allow "ns_mktemp" to be called without template 
      (makes migration from ns_tmpnam simpler)

    * Mark ns_connsendfp as deprecated (it was already 
      documented as deprecated, superseded by ns_writefp)


C API Changes:
    None

Incompatible API Changes:
    None

Configuration Changes:

    * New parameter "extraheaders" to drivers (e.g. nssock,
      nsssl). This feature allows an admin to specify extra reply
      headers sent back on every request. By using this feature, one
      can activate for example HTTP Strict Transport Security (HSTS)
      for nsssl (see https://bitbucket.org/naviserver/nsssl/)

    * Update man pages and sample config files


Command Line Changes:
    None

Code Changes:
    * Added compatibility with OpenSolaris (e.g. OmniOS).

    * Code Cleanup
      - reduce variable scopes to improve locality
      - Get rid of CVS variables
      - make test for byte-array safe for changes introduced in 
        Tcl 8.6 and back-ported to Tcl 8.5 
        (see e.g. http://core.tcl.tk/tcl/info/91be696bf3)
      - defined new macro NS_GNUC_DEPRECATED_FOR() to be able to provide
	replacement hint and use it where appropriate
      - improve error message

    * Test environment:
      - nstest::http: added flag "-getmultiheaders" to return all
	header fields (multiset) with the specified name

    * Build environment:
      - use recommended autoconf constants quoting
      - deactivate AM_* macros (get rid of warnings), since 
        these are not used by autogen.sh
      - replace obsolete macro AC_TRY_RUN, AC_TRY_LINK
      - use recent version of install-sh and tcl.m4
      - additional make target: cppcheck

   * Extended regression test

======================================
NaviServer 4.99.5, released 2013-05-25
======================================

New Features:

    * New connection thread architecture:
      - Introduced connection thread queues for better control over
        connection threads and to reduce queuing operations for
        handing requests from the driver to the connection threads.

    * Support for improved TCP socket option handling 
      (when supported by the OS);
       - use TCP_FASTOPEN (when deferaccept is configured)
       - Adding TCP option "nodelay" for nssock on operating 
         systems that do not use this by default (such as Linux)
       - Use TCP_CORK to optimize TCP_PACKAGE size on machines where
         this is available.

    * Improved asynchronous request handling and log file writing to
      reduce latencies and improve robustness

       - Asynchronous HTML streaming via writer threads to reduce
         connection thread blocking time for slow delivery lines.
       - New asynchronous log file writer to write access.log
         and error.log without blocking - configurable

    * Better scalability by reducing busiest lock contention and
      finer lock granularity (see below).

    * Improved introspection commands:
      - Report more detailed timing information and request statistics
        via "ns_server ?-server s? ?-pool p? stats". The command
        returns accept-times, queue-times, filter-times and run-times
        per server and pool.
      - Report OS-level thread ID via "ns_info threads" when supported
        from the OS (currently just Linux). This information is used by
        nsstats.tcl to report e.g. system time and user time per thread.
      - New subcommand "ns_conn clientdata" to query or set client data
        (used e.g in ns_writer list)
      - Added ns_fastpath_cache_stats to obtain usage info from the
        fastpath cache

    * Support for marking scripted and C-implemented Tcl-commands 
      as deprecated.



Performance Improvements:

    * Server lock to pool lock in most cases
    * Lazy init of zlib (mostly reduction in memory consumption)
    * Allow delivery of mmapped files via writer without the need of copying content.
    * Introduce separate locks for waiting queue (wqueue) and thread queue
      (tqueue) per pool. In classical naviserver there is was a single poll lock
      (covering all pools) used. The change leads to much finer lock
      granularity in improves scalability.
    * Added async disk writer to reduce request latencies due to file system latencies. 
      Now used optionally for access log and error-log.
    * Use GetSection() instead of Ns_ConfigCreateSection() in ConfigGet().
      This is faster and removes the need for the most-frequently used mutex lock
      in naviserver, namely "nsd:conf".
    * Compiler optimizations for branch prediction - likely(),unlikely() macros.  
    * Improved concurrency in writer threads by supporting asynchronous 
      parial writes.


Bug Fixes:

    * Do not save variables of the toplevel namespace into the blueprint. 
      OpenACS had with this a problem, since the database handles are managed via 
      global variables, which is solved by this modification.
    * ns_eval -sync syntax.
    * Fixed all known range request bugs from regression test.
    * Fix output for "ns_server active|queued|all"
    * ns_server stats and in ns_server connections to be per server.
    * Fix length computation in "ns_writer submitfile" when offset is specified
    * Fix thread safety of "nswriter list".
    * Simplified driver logic and fixed bad interaction with nsssl,
      which used non-blocking sockets, but declared itself as a non-async
      driver). Fixed potential bug for partial reads in header parsing
      (string comparison could read past available bytes, pick up values
      from previous requests). 
    * Increase static buffer size to prevent SSL from stalling.
    * Fix a bug showing up with nsssl (a driver has no NS_DRIVER_ASYNC flag set), 
      where pollin says that data is available, but the read returns no data 
      and leads to a busy loop.
    * Fix bug in rolling access log when rollfmt is specified. Previously 
      the log file was closed but not reopened, log data was lost.
    * Protect against a bug in Tcl, when several threads are created
      concurrently via Tcl_CreateInterp()


Documentation improvements:

    * Updated/completed/added documentation (ns_conn, ns_http and
      friends, ns_writer, ns_register, ns_register_op, ns_return, ...)

    * Remove man pages for non-existing commands and half written man
      pages.

    * Updated documentation in configuration files

    * Added sample configuration file for OpenACS


Tcl API Changes:

    * New and modified commands/subcommands:

      - nsv_get: added optional argument ?varName? to nsv_get to
        obtain compatibility with tsv::get in the Tcl thread
        library. This option allows an atomic test + get operation,
        avoiding unsafe nsv_exists following by nsv_get.

          nsv_get /array/ /key/ ?/varName/?

      - Obtain a value from the cache 
        (similar to nsv_get)

          ns_cache_get /cache/ /key/ ?/varName/?
        
      - Write a notice to the error.log when this command 
        is used 

          ns_deprecated ?/alternative/? ?/explanation/?

      - Change server settings on the fly:

          ns_server ?-server /server/? ?-pool /p/? maxthreads ?/value/?
          ns_server ?-server /server/? ?-pool /p/? minthreads ?/value/?

      - The following commands can return now server-specific
        results, when "-server ..." is used:

          ns_server ?-server /server/? filters
          ns_server ?-server /server/? pagedir
          ns_server ?-server /server/? requestprocs
          ns_server ?-server /server/? tcllib
          ns_server ?-server /server/? traces
          ns_server ?-server /server/? url2file


      - The following commands can return now server-specific
        and pool-specific results:

          ns_server ?-server /server/? ?-pool p? active
          ns_server ?-server /server/? ?-pool p? all
          ns_server ?-server /server/? ?-pool p? queued
          ns_server ?-server /server/? ?-pool p? connections
          ns_server ?-server /server/? ?-pool p? maxthreads ?value?
          ns_server ?-server /server/? ?-pool p? minthreads ?value?
          ns_server ?-server /server/? ?-pool p? stats
          ns_server ?-server /server/? ?-pool p? threads
          ns_server ?-server /server/? ?-pool p? waiting

      - Return number of requests, number of spools and number of
        requests added to the waiting queue plus cumulative times to
        serve requests.

          ns_server ?-server /server/? ?-pool /p/? stats

      - Query for the current connection, whether
        the requestor accepts zipped results
        
          ns_conn zipaccepted

      - Return for the current connection the 
        connection pool

          ns_conn pool
 
      - Query or set for the current connection the client data.  The
        client data is provided by the application and is potentially
        passed to different threads and can be used to establish the
        context with the connection thread. For example, the writer
        thread outputs the client data when listing running connections
        (one can determine e.g. which user has initiated the delivery,
        etc.).

          ns_conn clientdata

      - Query or modify the size limit of files being delivered
        via the writer threads

          ns_writer size /driver/ ?/value/?

      - Query or modify the configuration parameter
        writerstreaming that controls streaming HTML
        output via writer threads
  
          ns_writer streaming /driver/ ?/value/?

      - Allow to restrict the output of "ns_writer list"
        to list only requests from a particular (virtual) server

          ns_writer list ?-server /server/?

      - The output of "ns_writer list" now contains the start time of
        the initiating request, the name of the thread, driver, the
        ip-address of the requestor, the file descriptor, the
        remaining size and the bytes already sent, and the client data
        as provided via [ns_conn clientdata].

      - Determine the section in the configuration for a driver
        in the configuration file

          ns_driversection ?-driver /drv/? ?-server /server/?


    * Deprecated commands/subcommands:


      - ns_httpget, ns_httppost and ns_httpopen are deprecated (use
        ns_http instead)

      - "ns_info platform" is deprecated; use $::tcl_platform(platform) instead.
        "ns_info winnt" is deprecated; use $::tcl_platform(platform) instead.

      - ns_register_adptag is deprecated - use ns_adp_registerscript instead.

      - ns_adp_registertag is deprecated - use ns_adp_registeradp instead.

      - The following commands are deprecated

          ns_info filters
          ns_info pagedir
          ns_info pageroot
          ns_info requestprocs
          ns_info tcllib
          ns_info traces
          ns_info url2file

        and defined the following commands instead:

          ns_server ?-server /server/? filters
          ns_server ?-server /server/? pagedir
          ns_server ?-server /server/? requestprocs
          ns_server ?-server /server/? tcllib
          ns_server ?-server /server/? traces
          ns_server ?-server /server/? url2file

      - ns_server - passing pool as 2nd argument is deprecated.
        new option serverdir returns the base directory. Using 
        instead the explicit options
          "ns_server ?-server /server/? serverdir" 
     
      - "ns_server keepalive" is deprecated;
        use "ns_conn keepalive" instead


C API Changes:
    * Ns_OptionConverter: added Ns_OptionServer to convert string to
      existing server.  Extended option parser to allow options at the
      end of a command

    * New function NsWakeupDriver(); used in queue to signal
      conditions to the driver, when we might have to recreate
      threads.

    * New function NsWakeupConnThreads(ConnPool *poolPtr) to wake up
      every idle conn thread during shutdown.


Incompatible API Changes:
   * ns_setexpires takes single argument for seconds to calculate
     Expires header.  Passing conn no longer supported (was deprecated).

Configuration Changes:
    * Provided sample OpenACS config file openacs-config.tcl.

    * New boolean parameter "writerstreaming" for drivers to
      activate/deactivate streaming of HTML output via writer thread.

    * New boolean parameter logpartialtimes true" for section
      ns/server/${server}/module/nslog: Include a high-resolution
      start time and partial request durations (accept, queue, filter,
      run) in the access log.

    * New integer parameters "lowwatermark" and "highwatermark" in
      section ns/server/${server} for controlling connection thread
      creation:

        ns_param lowwatermark 10  ;# Create additional threads when 
                                  ;# the queue is more than 10% full
        ns_param highwatermark 80 ;# Allow concurrent when queue is 
                                  ;# more than 80% full. Specifying 
                                  ;# 100% effectively disables this.

    * New boolen parameter asynclogwriter under ns/parameter to
      turn on/off asynchronous writes to access log and error log

    * Obsolete flushcontent parameter is no longer supported.

Command Line Changes:

    * Allow calls for "nsd -c" without config files.  

        $ /usr/local/ns/bin/nsd  -c

    * Allow specification of environment variable NAVISERVER to point
      to the naviserver home directory (for e.g. log file
      directories), otherwise determined by the location of the nsd
      binary. Examples:

        $ NAVISERVER=/usr/local/ns/ ./nsd/nsd  -c


Code Changes:
    * Moved statistics structure from NsServer to ConnPool to track
      per-pool usage. Added member poolPtr to Conn for easy association.

    * Defined new C function Ns_LogDeprecated() for handling deprecated
      messages for tcl-level defined commands.

    * Standardize printing of timings (get rid of stupid $sec.$microsecs,
      where 1.2 means 1.000002 secs).

    * Extend interface of NsWriterQueue() to accept iovec & nbufs
      (as required by Ns_ConnSend()). This saves an unneeded copy of the
      send data.

    * Reduce number of (used) API calls by favoring iovec interface.

    * Handle partial low-level writes correctly by allowing partial
      writes at the driver level.

      - The old SockSend() is now implemented using of nssock.sendProc
        and performs partial writes on non-blocking sockets.

      - Ns_SockSendBufs() delivers all iovec bufs like before but now
        calls NsDriverSend() instead of the direct SockSend().

      - Ns_ConnSend() calls Ns_SockSendBufs() instead of NsDriverSend() in
        cases, where the writer thread is not used.

      - Ns_SockSendBufs() calls NsDriverSend() instead of SockSend()

      - Ns_SockSendFileBufs() calls NsDriverSend() instead of
        Ns_SockSendBufs()

      Further changes:

      - Group fields in WriterSock to separate concern of file-spooling and
        memory based requests.

      - Factor out WriterSend() from DriverThread() to improve readability
        and locality

    * use scatter/gather interface for writer instead of the char* interface

    * Generalized option parser from ns_server and used in
      ns_urlencode and ns_urldecode to get rid of the potential crash
      due to non-static strings in Tcl_GetIndexFromObjStruct().

    * Update to TEA 3.9, rename configure.in to configure.ac as
      suggested by the auto-tools warning

    * Provide better error message when subcommand of "ns_server" not
      found.

    * Add lookup for server in NsTclServerObjCmd()

    * Make Ns_ObjvTable static where possible

    * Drop LogToAsyncFile and use NsAsyncWrite in LogToFile.  Async
      log file writing can be switched on/off by configuring the async
      log writer.

    * Remove spread factor, which is not needed due to connection
      thread queue

    * use gettimeofday() if available instead of the rount trip to tcl

    * Adjusting server exit to new infrastructure; new function
      NsWakeupConnThreads(ConnPool *poolPtr) to wake up every idle
      conn thread during shutdown.

    * Report error message in sock accept, if the errno is different
      from EAGAIN.

    * Let Ns_ConnSend() use the writer thread to deliver adp-content
      etc. without blocking a connection thread. This improves the request
      latency and avoids potential slow-delovery DOS attacks.
      
    * Extend the interface of SockWriterRelease() to contain the
      queue. SockWriterRelease() manages now the queue entries as seen
      e.g. by "nswriter list".  Handle POLLHUP in writer thread
      explicitly.

    * Delegate close() operations from writer thread to driver thread via
      NsSockClose().

    * Added support for SO_ACCEPTFILTER for machines having no
      TCP_DEFER_ACCEPT

    * Extending buffer size when sending files via writer thread from
      4KB to 16KB.

    * Replaced unsafe system calls with safe ones (e.g. mktemp() by mkstemp())

    * Improved code quality with static analyzer and valgrind

    * Extended regression test


======================================
NaviServer 4.99.4, released XXXX-XX-XX
======================================

New Features:

    * Less eager thread creation short request peaks. Naviserver tended
      to create too many threads in situation of short bottlenecks (e.g.
      file system latencies). This can reduce resource consumption on
      larges sites significantly.

    * New threads are added to the waiting queue in an already warm
      state.  Previously, threads we created in one step and the
      initialization of thread blocked the first request added to the
      thread. "minthreads" controls the number of warm threads kept
      around.

    * Improved cache statistics: added "saved", expressing cumulative
      saved time from "ns_cache_eval". The reporting of theses
      statistics as updated as well in the add-on package nsstats.

    * Improved locking statistics: added "total_waiting_time" and
      "max_waiting_time" to the mutex monitoring statistics. The
      reporting of theses statistics as updated as well in the add-on
      package nsstats.

    * Made upload progress management compatible with usual 
      tracking conventions by using the query parameter "X-Progress-ID"
      if present (as used in nginx, lighttpd and by apache (mod_passenger)).

    * Added support for chunked encoding for uploads (as used e.g. in WEBDAV
      PUT requests from Mac OS X Finder).

    * Added small compatibility layer for providing Aolserver compatibility
      (e.g. support "ns_cache eval" as well as "ns_cache_eval"); the layer
      is designed to be sufficient for OpenACS.

    * Improve concurrency on writing on access logs. File system latencies
      can block the full server, the change improves the situation.

    * Added [ns_thread stackinfo] to obtain stack size and usage from the 
      current thread.

    * Add option "-exact" to "ns_cache_keys" to enable exact lookups (also 
      when glob characters are used in keys)

    * Provided constat time lookup for [ns_cache_keys /cache/
      /pattern/], when "pattern" contains no glob characters

    * Added .htaccess mode for nsperm module. Similar to Apache but
      only to allow access. This is disabled by default, can be
      enabled in the ns/server/servername/module/nsperm section. Doc
      is updated. In this version only current directory is checked
      for .htaccess file.

    * New lazy Tcl interpreter initialization option. Saves memory and speeds
      initialization of interp on first use by defining procs on-demand.
      See: tcl/lazyloader parameter below.

    * New module nsproxy executes Tcl scripts via pool of external
      processes. Useful to keep buggy/non-thread-safe code isolated from
      main server process. See also: ns_job.

    * Log filter callbacks (Tcl and C) may be added to the error log stream
      to handle particular kinds of log messages by e.g. logging to a separate
      file.

    * Error logging may now be disabled/enabled at runtime with the
      ns_logctl command.

    * User-defined named log severities may be created using the ns_logctl
      command. These may be enabled/disabled individually, at runtime, unlike
      the old numeric user-levels.

    * New limits feature. Connection limits can be bundled together into a
      named set of limits and then applied to a subset of the URL
      hierarchy. The max number of connection threads running and waiting to
      run a URL, the max upload file size, and the max time a connection
      should wait to run are all configurable. See ns/limits parameters below.

    * ns_cache_create now takes a -maxentry switch limits the max size of an
      entry allowed into the cache to prevent wasteful cache flushes.

    * ns_cache_create now takes a -timeout switch which is the default timeout
      for one thread to wait for another to complete an ns_cache_eval command,
      if the -timeout switch is not given to the ns_cache_eval command itself.

    * Time values passed to commands such as the -timeout switch of
      ns_cache_eval now distinguish between an absolute time in the future and
      an offset from the current time. A heuristic is used: large values are
      absolute times in the future.

    * A new [ns_cache_eval -force ...] switch replaces any existing cached value
      whether it is up to date or not.

    * A new ns_cache_stats -contents switch dumps the expire and size of each
      entry in the cache cache. Useful when developing / testing to check
      utilisation.

    * The new [ns_conn keepalive ?bool?] sub-command disables or requests
      keepalive behavior for the current connection.

    * ns_getcsv now takes a -delimiter switch.

    * ns_parseargs: default values can now be specified with in the form 
      {[..]} to cause evaluation, like ns_parseargs {-flag {[script]}} $args ...

    * Commands which timeout now set a NS_TIMEOUT Tcl error code, which if not
      caught is reported as an HTTP 503 Unavailable response.

    * Handle png images, as well as existing gif and jpg with new ns_img*
      commands.

    * New [ns_mutex eval script] to safely handle unlocking on error.

    * Thread commands now takes names as well as thread-object references.

    * New options jobsperthread and jobtimeout for ns_job command to perform
      automatic job threads exit in case of idle or max number of jobs reached

    * Updated ns_perm module to support missing checkpass and sepass commands

    * ns_http was ported from Aolserver 4.5 and uses new task API

    * ADP parser was ported from AS 4.5 and also used for processing .tcl files

    * New option acceptsize for driver to tell how many connection can be accepted at once,
      this improves performance significantly in case of large number of incoming connections

    * New Ns_Sls* and ns_sls commands supporting socket-local-storage (data which persists for 
      the lifetime of an open TCP connection)

    * ns_httpget now supports chunked encoding in results

    * ns_return etc. will now gzip the body content, if that option is enabled.

    * Static files can now be sent using the OS native sendfile() on
      supported platforms (currently Linux).

    * ns_unregister_op is now the correct way to unregister procs, adp, and tcl
      pages. (The older names are kept around for backwards compat.)

    * NaviServer now builds on Win32 using the standard configure scripts and
      the MingWin32 compiler.

    * New command ns_mutex trylock which works similar to the same C API function

    * New command ns_filestat which is similar to file stat but uses direct system 
      call instead of Tcl VFS

    * New command ns_db rowcount, which return the number of affected rows after a
      DML operation.

    * Support for If-Range: header in conditional range requests, this makes the server
      more RFC compliant and allows file retrievals, re-gets and file mirroring without 
      additional coding, it is all done by the server and HTTP

Security Improvements:
    * Disallow terminal escape characters in the log file (potential attack)
    * Protection against path traversal attack

Bug Fixes:
    * Fixed timeout keep-alive management: When many requests were
      posted into a persistent connection, it happend frequently that
      a few of these requests were processed after the keep-alive
      timeout (keepwait) was firing.

    * Fixed various potential crashes (range requests, severity
      management, 64 bit, NsTclParseArgsObjCmd with Tcl 8.5, POST with
      sizes ending exactly at page boundary, accessing "nsconn
      content" after connection close, purges on new-created entries
      in the cache).

    * Improved test environment: 
      - placed nstest into a namespace
      - added parameter "-verbose" to nstest::http to trace communication 
      - added parameter -omitcontentlength to to nstest::http to test
        requests without content length

    * Fixed early closes from the server on too-large content (looked like
      a server crash to clients like firefox, google chrome, etc.). This
      has the disadvantage that now the full request has to be transferred.

    * Naviserver could loop under linux in some situations where a
      client connection was closed unexpectedly (observed under vmware
      under intel 64bit).

    * Improved Code quality (reduced scope of variables, unused variables, 
      changed types of file descriptors for socket from "int" to "SOCKET"
      etc.).

    * removed unused config parameter "urlstats", "maxurlstats",
      "globalstats", "maxdropped", "keepallmethods"

    * Fix to prevent multiple DriverAccepts on the same socket. The
      original coded relied on the fact that later accepts lead to an
      ERROR_STATE. Under RHEL 4 (Power, 64bit) the second accept
      blocks.

    * Fix Ns_Time for platforms, where time_t is long.
    * Updated documentation
    * Various 64bit fixes.
    * Fix path attribute of HTP Cookie string.
    * Make sure upload stats lock is unlocked after use.
    * Fix crash in writer thread logging already freed data.
    * Fix crashes in cache code due to incorrect expired entry flushing fixed.
    * Only add cache commands to virtual server interps.
    * Don't inflate flush-stats on cache eval error.
    * Custom error documents (return redirects) now send back the correct HTTP
    * response code. Used to always report 200, success.
    * Make unsetting an environment variable work cross platform.
    * Fix bug where executable name was freed before use.
    * Don't delete bound Unix domain sockets.
    * Fix typo in ns_setexpires command.
    * Windows: block SIGPIPE.
    * Windows: fix stdin, stdout, stderr channel initialization.
    * Fix infinite loop in spooler thread code.
    * Message line-breaking of email bodies sent with ns_sendmail now works
      correctly for non ASCII data.
    * Files over 2 Gb are supported for logging, serving, uploads, etc.
    * Fixed ns_sendmail for cases when message body is large and it fails to
      send all body because of nonblocking socket mode
    * Fix a race condition in the fastpath code which could allow random files
      anywhere on the same filesystem to be served by the server.


Incompatible API Changes:

    * ns_setcookie -maxage renamed -expires to match common usage throughout
      code.

    * All cookies are now set HttpOnly by default. The -scriptable option must
      be true for the client javascript engine to have access to the cookies.

    * The 'secure' flag of Ns_ConnSetCookieEx() is now a flags option which
      takes NS_COOKIE_SECURE and NS_COOKIE_SCRIPTABLE. Non-scriptable is the
      default as for the Tcl API.

    * ns_var, ns_share and the -share option to ns_set have been removed.
      Please use the nsv_* commands instead.


Configuration Changes:

    Please update your server configuration files to take account of the
    following new features and changes.

    * Randomizing the connection life-time controlling parameters
      "connsperthread" and "threadtimeout" by a new config parameter
      "spread". The spread is a number between 0 and 100, expressing
      the percentage of randomization. The randomization provides
      better resource distributions and prohibits mass thread
      extinction and recreations.

    * New config parameters "keepalivemaxuploadsize" and
      "keepalivemaxdownloadsize" for controlling keep-alives for largish
      content. Use separate request instead of waiting until the large
      content transfer has finished.

    * Fastpath static page configuration is now a global setting rather then
      per-server:

      ns_section "ns/fastpath"
      ns_param mmap          false    ;# Use mmap(2) to read files from disk.
      ns_param cache         false    ;# Cache file contents in memory.
      ns_param cachemaxsize  10240000 ;# Size of file cache, if enabled.
      ns_param cachemaxentry 8192     ;# Don't cache files larger than this.

    * Global thread stacksize configuration deprecated. Server now uses OS
      default. Only explicitly set the stacksize to some smaller than default
      value if you need to save memory because your server has a lot of
      threads, and you know for certain this won't cause problems with deeply
      nested Tcl or ADP scripts.

      ns_section "ns/parameters"      ;# or "ns/threads"
      ns_param stacksize     100000   ;# DON'T DO THIS.

    * The dnscachemaxentries config param has been renamed dnscachemaxsize to
      more accurately reflect what the setting does. A new setting
      dnswaittimeout has been added:

      ns_section "ns/parameters"
      ns_param dnscache        true   ;# Enable the DNS query cache.
      ns_param dnscachemaxsize 512000 ;# Max memory for cache.
      ns_param dnscachetimeout 60     ;# Minutes to cache a DNS query.
      ns_param dnstimeout      5      ;# Seconds to wait for query answer.

    * The buffer size used by the writer thread is now configurable:

      ns_section "ns/server/server1/module/nssock"
      ns_param writerbufsize   8192   ;# Read from file in bufsize chunks.

    * The Tcl lazy loader may be enabled with the following parameter:

      ns_section "ns/server/server1/tcl"
      ns_param lazyloader      false  ;# Define procs in thread-interps on
      demand.

    * New sections for server limits:

      ns_section "ns/limits"
      ns_param default         "Default Limits" ;# Defines a limit.

      ns_section "ns/limit/default"
      ns_param maxrun          100       ;# Conn threads running for limit.
      ns_param maxwait         100       ;# Conn threads waiting for limit.
      ns_param maxupload       102400000 ;# Max size of file upload in bytes.
      ns_param timeout         60        ;# Total seconds to wait for resources.

      ns_section "ns/server/server1/limits"
      ns_param default         "GET  /*" ;# Map default limit to URL.
      ns_param default         "POST /*"
      ns_param default         "HEAD /*"


Code Changes:

   * Fixed test to use preferred getaddrinfo()/getnameinfo() for Mac
     OS X instead of gethostbyaddr()/gethostbyname() when working
     under the OS release.

   * Make compilation clean under clang.

   * Provide names for Ns_Mutex to report meaningful output in
     naviserver statistics.

   * Use poll() as well under Darwin. Per default, poll() returns
     writeable even when the socket is not. However, setting
     SO_SNDLOWAT fixes this (added by this patch). The change makes it
     possible to quer POLLHUP for all platforms.

   * Use "long" instead of "int" for statistics to avoid quick overruns.

   * Added private version of NsBsearch and re-define the "bsearch" to
     point to it for Windows builds. The Windows implementation of
     bsearch appears to be buggy.

    * Rewritten cancellation logic. Cancelled jobs stay in the queue
      and get run on the thread as any other jobs. The differnce is
      only that we mark the cancellation state early (even before
      running the script) so the very first Tcl command in the script
      will be cancelled thus resulting in whole job cancellation. This
      fixes some weird races.

   * Nsv shared variables now have a C API.

   * Experimental event driven IO API, Ns_Event*().

   * New Ns_RegisterAtShutdown() proc handles notification of shutdown and
     wait for completion with timeout.

   * Make Ns_RegisterProxy() public, add ns_register_proxy command.

   * Vectored IO support:

       Ns_ConnSend() now sends all given buffers. Used to send 16 and silently
       discard the rest.

       Increase max iov buffs sent at once.

       Expose iov functionality to higher layers with Ns_ConnWriteVChars(),
       which handles character data, and Ns_ConnWriteV(), which manages data
       streaming.

       ns_write now takes a vector of buffers.

   * New driver callback API. This affects modules such as nssock and any SSL
     modules. This provides more flexibility to write unusual protocol modules.
     Also added is the ability to provide platform-specific sendfile() support.

   * Each loaded driver module now runs in it's own thread (port from
     AOLserver 4.5).

   * Use *DStingSetLength() rather than *DStringTrunc() throughout code to try
     and prevent excess malloc/free activity.

   * Conn structure now contains stat with the file currently being served, stat is
     called at the beginning of the request

   The following routines have been removed, deprecated or disabled.

   * Removed: Ns_RegisterServerShutdown(), Ns_RegisterAtServerShutdown(),
     Ns_RegisterShutdown().
     See: Ns_RegisterAtShutdown().
   * Disabled: Ns_LogSetLogFlushProc(), Ns_SetNsLogProc().
     See: Ns_AddLogfilter(), Ns_RemoveLofFilter().


   IMPORTANT API changes: (length, nsend) parameters are now Tcl_WideInt, so it requires
   to recompile all modules that use those functions:
        
        int Ns_ConnSendChannel(Ns_Conn *conn, Tcl_Channel chan, Tcl_WideInt nsend)
        int Ns_ConnSendFp(Ns_Conn *conn, FILE *fp, Tcl_WideInt nsend)
        int Ns_ConnSendFd(Ns_Conn *conn, int fd, Tcl_WideInt nsend)
        
        void Ns_ConnSetRequiredHeaders(Ns_Conn *conn, CONST char *type, Tcl_WideInt length)
        void Ns_ConnSetLengthHeader(Ns_Conn *conn, Tcl_WideInt length)
        int Ns_ConnReturnOpenChannel(Ns_Conn *conn, int status, CONST char *type,
                         Tcl_Channel chan, Tcl_WideInt length)
        int Ns_ConnReturnOpenFile(Ns_Conn *conn, int status, CONST char *type,
                      FILE *fp, Tcl_WideInt length)
        int Ns_ConnReturnOpenFd(Ns_Conn *conn, int status, CONST char *type,
                    int fd, Tcl_WideInt length)


======================================
NaviServer 4.99.1, released 2006-01-02
======================================

This is just a part of numerous additions, improvements and
fixes since 4.99.0 release. For the complete set, please consult
the ChangeLog file.

New Features:

    * HTTP Range requests for streaming media and resuming downloads 
    * Full Chunked encoding support for Fastpath, Adp and Tcl scripts
    * Using temporary files for large uploads when content exceeds 
      pre-configured maxsize parameter
    * New spooler thread for handling large file uploads
    * New [ns_upload_stats] command to gather upload statistics
    * New spooler thread for handling large file uploads
    * Added ns_conn responseversion to manually set response protocol
      and version to have full control about returned HTTP format
    * Add C-level support for TclVFS (all IO on files done with Tcl wrappers)
    * Add new command [ns_atprestartup].
    * Add new command [ns_runonce] which ensures that the given script is
      run only once, either globally or per virtual server, during the 
      lifetime of the server process.
    * New autogen/TEA3 compatible configuration
    * Add new command [ns_logctl severity]
    * Added many new test (this is an evolving effort)
    * Added support of binder as a separate process
    * Added [ns_info started] and [ns_info shutdownpending] commands
    * Add new Tcl command [ns_register_fastpath]
    * Added Tcl interface to C-level cache routines.
    * Added first traces of documentation based on Tcl doctools
    * New simplified deployment directory structure

Code Changes:

    * New function Ns_ConnPrintfHeaders() for adding NTTP headers in
      printf style
    * Allocate interps efficiently, max 1 per-thread per-server
    * Add Ns_TclLogErrorInfo and allow admin to configure which 
      connection headers to log for Tcl errors
    * Remove [ns_markfordelete] command and roll into ns_ictl as
      [ns_ictl markfordelete]
    * Make Tcl send panic messages to the server log.

======================================
NaviServer 4.99.0, released 2005-07-05
======================================

New Features:

    * Byte code for Tcl pages are cached if nscache module present
    * Add support for mass virtual hosting #1159471
    * ns_uuencode et all now do full base64 encoding
    * New introspection commands for procs, filters and traces #1161597
    * C and Tcl API for HTTP cookies #1145957
    * Add -bytes option to ns_conncptofp command
    * New command ns_conn channel #1156141
    * Add new watchdog feature to restart the server if it crashes
    * Add ns_sha1 cryptographic hash command
    * C and Tcl API for setting response code of current connection
    * ns_accesslog can change configuration at runtime
    * New C and Tcl API for parsing command options and arguments
    * Server can now run as root if instructed to
    * Add new command ns_atstartup
    * New routines for listening on UDP and UNIX domain sockets
    * Add -localhost -localport options to ns_sockopen

Bug Fixes:

    * Add locking to non multi-thread safe timegm()
    * Fix infinite loop in DNS routines
    * Call comm drivers DriverClose command when socket is released
    * Fix crash bug in nslog on NULL rollfmt
    * Fix URL decoding of '+' characters #1145277
    * Report correct MIME type for xml documents #1145927
    * Fix crash in channel detach code #1143586
    * Make ns_sendmail handle dropped connections
    * Fix crash on startup when resolving localhost
    * Preserve nsdb exception messages generated by driver

Code Changes:

    * New function Ns_ConnPrintfHeaders()
    * Use GCC compiler code checks #1215725
    * Remove GNU implementations of getopt and poll
    * Cleanup up autoconf and use autoheader
    * Clean up test harness and add lots of tests
    * New Tcl callback infrastructure #1162223
    * New convenience functions for handling Tcl object types
    * New function Ns_TclPrintfResult() for formatting Tcl results
    * No more support for defunct AOLpress
    * Remove support for old connid argument in much code #1156107
    * Modules nspd and nsext moved from core to external modules
    * Objectified TclX keyed lists
