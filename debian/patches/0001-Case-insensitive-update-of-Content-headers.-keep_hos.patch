From: David Osborne <david@qcode.co.uk>
Date: Tue, 7 Jul 2015 09:52:37 +0100
Subject: Case insensitive update of Content headers. keep_host_header switch
 for HttpConnect.

---
 doc/src/naviserver/ns_http.man |    6 ++++++
 include/ns.h                   |    4 ++++
 nsd/return.c                   |    2 +-
 nsd/set.c                      |   28 ++++++++++++++++++++++++++++
 nsd/tclhttp.c                  |   37 ++++++++++++++++++++++++++++---------
 5 files changed, 67 insertions(+), 10 deletions(-)

diff --git a/doc/src/naviserver/ns_http.man b/doc/src/naviserver/ns_http.man
index a5b537a..79de04e 100644
--- a/doc/src/naviserver/ns_http.man
+++ b/doc/src/naviserver/ns_http.man
@@ -32,6 +32,7 @@ id url done|running ....
 	[opt [arg {-headers S}]] \
 	[opt [arg {-body B}]] \
 	[opt [arg {-timeout T}]] \
+	[opt [arg {-keep_host_header}]] \
 	[arg url] \
 	]
 
@@ -52,6 +53,11 @@ Timeout for how long to wait for finishing the whole request
 (default 2:0, secs:microsesc)
 
 [para]
+[arg -keep_host_header]
+allows the Host: header field for the request to be passed in via the -headers arg. 
+Otherwise it is overwritten.
+
+[para]
 The command [cmd "ns_http queue"] opens a connection to the web server
 denoted in the [arg url] and returns on success the [arg id] of the HTTP
 request, which might be used later in a [cmd "ns_http wait"] 
diff --git a/include/ns.h b/include/ns.h
index 43ab3c8..618b79d 100644
--- a/include/ns.h
+++ b/include/ns.h
@@ -2359,6 +2359,10 @@ NS_EXTERN void
 Ns_SetUpdate(Ns_Set *set, const char *key, const char *value)
     NS_GNUC_NONNULL(1) NS_GNUC_NONNULL(2) NS_GNUC_NONNULL(3);
 
+NS_EXTERN void
+Ns_SetIUpdate(Ns_Set *set, const char *key, const char *value)
+    NS_GNUC_NONNULL(1) NS_GNUC_NONNULL(2) NS_GNUC_NONNULL(3);
+
 NS_EXTERN Ns_Set *
 Ns_SetCreate(const char *name)
     NS_GNUC_RETURNS_NONNULL;
diff --git a/nsd/return.c b/nsd/return.c
index 372dd7c..a461c24 100644
--- a/nsd/return.c
+++ b/nsd/return.c
@@ -154,7 +154,7 @@ Ns_ConnSetHeaders(const Ns_Conn *conn, const char *field, const char *value)
 void
 Ns_ConnUpdateHeaders(const Ns_Conn *conn, const char *field, const char *value)
 {
-    Ns_SetUpdate(conn->outputheaders, field, value);
+    Ns_SetIUpdate(conn->outputheaders, field, value);
 }
 
 /*
diff --git a/nsd/set.c b/nsd/set.c
index b8b6d14..68a42b2 100644
--- a/nsd/set.c
+++ b/nsd/set.c
@@ -35,6 +35,34 @@
  */
 
 #include "nsd.h"
+#
+
+/*
+ *----------------------------------------------------------------------
+ *
+ * Ns_SetIUpdate --
+ *
+ *	Remove a tuple and re-add it (case insensitive).
+ *
+ * Results:
+ *	None.
+ *
+ * Side effects:
+ *	None.
+ *
+ *----------------------------------------------------------------------
+ */
+
+void
+Ns_SetIUpdate(Ns_Set *set, const char *key, const char *value)
+{
+    assert(set != NULL);
+    assert(key != NULL);
+    assert(value != NULL);
+
+    Ns_SetIDeleteKey(set, key);
+    (void)Ns_SetPut(set, key, value);
+}
 
 
 /*
diff --git a/nsd/tclhttp.c b/nsd/tclhttp.c
index 9135f6c..119a971 100644
--- a/nsd/tclhttp.c
+++ b/nsd/tclhttp.c
@@ -44,8 +44,8 @@ static int HttpWaitCmd(NsInterp *itPtr, int objc, Tcl_Obj *CONST* objv)
 static int HttpQueueCmd(NsInterp *itPtr, int objc, Tcl_Obj *CONST* objv, int run)
     NS_GNUC_NONNULL(1);
 static int HttpConnect(Tcl_Interp *interp, const char *method, const char *url,
-			Ns_Set *hdrPtr, Tcl_Obj *bodyPtr, Ns_HttpTask **httpPtrPtr)
-    NS_GNUC_NONNULL(1) NS_GNUC_NONNULL(2) NS_GNUC_NONNULL(3) NS_GNUC_NONNULL(6);
+			Ns_Set *hdrPtr, Tcl_Obj *bodyPtr, bool keep_host_header, Ns_HttpTask **httpPtrPtr)
+    NS_GNUC_NONNULL(1) NS_GNUC_NONNULL(2) NS_GNUC_NONNULL(3) NS_GNUC_NONNULL(7);
 
 static bool HttpGet(NsInterp *itPtr, const char *id, Ns_HttpTask **httpPtrPtr, bool removeRequest)
     NS_GNUC_NONNULL(1) NS_GNUC_NONNULL(2) NS_GNUC_NONNULL(3);
@@ -202,12 +202,14 @@ HttpQueueCmd(NsInterp *itPtr, int objc, Tcl_Obj *CONST* objv, int run)
     Ns_Set *hdrPtr = NULL;
     Tcl_Obj *bodyPtr = NULL;
     Ns_Time *incrPtr = NULL;
+    bool keep_host_header = NS_FALSE;
 
     Ns_ObjvSpec opts[] = {
         {"-timeout",  Ns_ObjvTime,   &incrPtr,  NULL},
         {"-headers",  Ns_ObjvSet,    &hdrPtr,   NULL},
         {"-method",   Ns_ObjvString, &method,   NULL},
         {"-body",     Ns_ObjvObj,    &bodyPtr,  NULL},
+        {"-keep_host_header", Ns_ObjvBool, &keep_host_header,    (void *)NS_TRUE},
         {NULL, NULL,  NULL, NULL}
     };
     Ns_ObjvSpec args[] = {
@@ -221,7 +223,7 @@ HttpQueueCmd(NsInterp *itPtr, int objc, Tcl_Obj *CONST* objv, int run)
     if (Ns_ParseObjv(opts, args, interp, 2, objc, objv) != NS_OK) {
         return TCL_ERROR;
     }
-    if (HttpConnect(interp, method, url, hdrPtr, bodyPtr, &httpPtr) != TCL_OK) {
+    if (HttpConnect(interp, method, url, hdrPtr, bodyPtr, keep_host_header, &httpPtr) != TCL_OK) {
 	return TCL_ERROR;
     }
     Ns_GetTime(&httpPtr->stime);
@@ -698,7 +700,7 @@ HttpGet(NsInterp *itPtr, const char *id, Ns_HttpTask **httpPtrPtr, bool removeRe
  */
 static int
 HttpConnect(Tcl_Interp *interp, const char *method, const char *url, Ns_Set *hdrPtr,
-	    Tcl_Obj *bodyPtr, Ns_HttpTask **httpPtrPtr)
+	    Tcl_Obj *bodyPtr, bool keep_host_header, Ns_HttpTask **httpPtrPtr)
 {
     NS_SOCKET    sock;
     Ns_HttpTask *httpPtr;
@@ -714,10 +716,23 @@ HttpConnect(Tcl_Interp *interp, const char *method, const char *url, Ns_Set *hdr
 	Tcl_AppendResult(interp, "invalid url: ", url, NULL);
         return TCL_ERROR;
     }
+
+    /* 
+     * If host_keep_header set then Host header must be present.
+     */
+
+    if (keep_host_header == NS_TRUE) {
+        if ( hdrPtr == NULL || Ns_SetIFind(hdrPtr, "Host") == -1 ) {
+	    Tcl_AppendResult(interp, "keep_host_header specified but no Host header given", NULL);
+	    return TCL_ERROR;
+        }
+    }
+
     /*
      * Make a non-const copy of url, where we can replace the item separating
      * characters with '\0' characters.
      */
+
     url2 = ns_strdup(url);
     
     host = url2 + 7;
@@ -767,7 +782,9 @@ HttpConnect(Tcl_Interp *interp, const char *method, const char *url, Ns_Set *hdr
 	/*
 	 * Remove the header fields, we are providing
 	 */
-	Ns_SetIDeleteKey(hdrPtr, "Host");
+        if (keep_host_header == NS_FALSE) {
+	    Ns_SetIDeleteKey(hdrPtr, "Host");
+        }
 	Ns_SetIDeleteKey(hdrPtr, "Connection");
 	Ns_SetIDeleteKey(hdrPtr, "Content-Length");
 
@@ -794,10 +811,12 @@ HttpConnect(Tcl_Interp *interp, const char *method, const char *url, Ns_Set *hdr
 			 Ns_InfoServerVersion());
     }
     
-    if (portString == NULL) {
-	Ns_DStringPrintf(&httpPtr->ds, "Host: %s\r\n", host);
-    } else {
-	Ns_DStringPrintf(&httpPtr->ds, "Host: %s:%d\r\n", host, portNr);
+    if (keep_host_header == NS_FALSE) {
+        if (portString == NULL) {
+	    Ns_DStringPrintf(&httpPtr->ds, "Host: %s\r\n", host);
+        } else {
+	    Ns_DStringPrintf(&httpPtr->ds, "Host: %s:%d\r\n", host, portNr);
+        }
     }
 
     if (bodyPtr != NULL) {
